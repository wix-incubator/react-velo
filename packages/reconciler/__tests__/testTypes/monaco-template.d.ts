// /dependencies/react.17.0.2.d.ts

declare module 'react';
declare module 'react/*';

// /dependencies/lodash.4.17.21.d.ts

declare module 'lodash';
declare module 'lodash/*';

// /elementsMap.d.ts
type PageElementsMap = {
    "#section1": $w.HiddenCollapsedElement;
    "#undefined": $w.HiddenCollapsedElement;
    "#PlayerCards": $w.Repeater;
    "#DealerCards": $w.Repeater;
    "#DealerTotal": $w.Text;
    "#Box": $w.Box;
    "#box1": $w.Box;
    "#Card": $w.Box;
    "#PlayerSymbol": $w.Text;
    "#PlayerShape1": $w.Text;
    "#PlayerShape2": $w.Text;
    "#DealerCard": $w.Box;
    "#DealerSymbol": $w.Text;
    "#DealerShape1": $w.Text;
    "#DealerShape2": $w.Text;
    "#DealerCardBack": $w.Image;
    "#Result": $w.Text;
    "#Next": $w.Button;
    "#PlayerTotal": $w.Text;
    "#box2": $w.Box;
    "#Hit": $w.Button;
    "#Stand": $w.Button;
    "#menuContainer1": $w.MenuContainer;
    "#vectorImage2": $w.VectorImage;
    "#expandableMenu1": $w.HiddenCollapsedElement;
    "#page1": $w.Page;
    "#header1": $w.Header;
    "#section3": $w.HiddenCollapsedElement;
    "#section2": $w.HiddenCollapsedElement;
    "#footer1": $w.Footer;
    "#vectorImage1": $w.VectorImage;
    "#horizontalMenu1": $w.Menu;
    "#vectorImage3": $w.VectorImage;
    "#text2": $w.Text;
}
// /types/pages/index.d.ts
/// <reference path="../common/anyProperties.d.ts" />
/// <reference path="../common/emptyBuffer.d.ts" />
/// <reference path="./$w.d.ts" />
/// <reference path="../common/declaration.d.ts" />
// /types/common/declaration.d.ts
/// <reference path="./wix-dataset.d.ts" />
/// <reference path="./$w.d.ts" />
/// <reference path="./wix-location.d.ts" />
/// <reference path="./wix-site.d.ts" />
/// <reference path="./wix-storage.d.ts" />
/// <reference path="./wix-window.d.ts" />
/// <reference path="./wix-billing-backend.d.ts" />
/// <reference path="./wix-bookings-backend.d.ts" />
/// <reference path="./wix-captcha-backend.d.ts" />
/// <reference path="./wix-chat-backend.d.ts" />
/// <reference path="./wix-http-functions.d.ts" />
/// <reference path="./wix-configs-backend.d.ts" />
/// <reference path="./wix-crm-backend.d.ts" />
/// <reference path="./wix-data.d.ts" />
/// <reference path="./wix-events.d.ts" />
/// <reference path="./wix-events-backend.d.ts" />
/// <reference path="./wix-fetch.d.ts" />
/// <reference path="./wix-forum-backend.d.ts" />
/// <reference path="./wix-groups-backend.d.ts" />
/// <reference path="./wix-marketing-backend.d.ts" />
/// <reference path="./wix-media-backend.d.ts" />
/// <reference path="./wix-members.d.ts" />
/// <reference path="./wix-members-backend.d.ts" />
/// <reference path="./wix-paid-plans-backend.d.ts" />
/// <reference path="./wix-paid-plans.d.ts" />
/// <reference path="./wix-pay.d.ts" />
/// <reference path="./wix-pay-backend.d.ts" />
/// <reference path="./wix-pricing-plans-backend.d.ts" />
/// <reference path="./wix-realtime-backend.d.ts" />
/// <reference path="./wix-router.d.ts" />
/// <reference path="./wix-secrets-backend.d.ts" />
/// <reference path="./wix-site-backend.d.ts" />
/// <reference path="./wix-stores-backend.d.ts" />
/// <reference path="./wix-users-backend.d.ts" />
/// <reference path="./wix-animations.d.ts" />
/// <reference path="./wix-bookings.d.ts" />
/// <reference path="./wix-crm.d.ts" />
/// <reference path="./wix-realtime.d.ts" />
/// <reference path="./wix-search.d.ts" />
/// <reference path="./wix-seo.d.ts" />
/// <reference path="./wix-stores.d.ts" />
/// <reference path="./wix-users.d.ts" />

// /types/common/wix-users.d.ts
/**
 * **Deprecated.**
 * The wix-users module will continue to work, but a newer version is available at
 * [wix-members](https://www.wix.com/velo/reference/wix-members).
 * 	[Read more](https://www.wix.com/corvid/reference/wix-users.html#)
 */
declare module 'wix-users' {
    import wixCrm from 'wix-crm';
    /**
     * **Deprecated.**
     * This object will continue to work, but a newer version is available at
     * [wix-members.currentMember.getMember()](https://www.wix.com/velo/reference/wix-members/currentmember/getmember).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users.html#currentUser)
     */
    const currentUser: User;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-members.authentication.applySessionToken()](https://www.wix.com/velo/reference/wix-members/authentication/applysessiontoken).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users.html#applySessionToken)
     */
    function applySessionToken(sessionToken: string): Promise<void>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-crm.triggeredEmails.emailMember()](https://www.wix.com/velo/reference/wix-crm/triggeredemails/emailmember).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users.html#emailUser)
     */
    function emailUser(emailId: string, toUser: string, options?: TriggeredEmailOptions): Promise<void>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-window.consentPolicy.getCurrentConsentPolicy()](https://www.wix.com/velo/reference/wix-window/consentPolicy-obj/getcurrentconsentpolicy).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users.html#getCurrentConsentPolicy)
     */
    function getCurrentConsentPolicy(): PolicyDetails;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-members.authentication.login()](https://www.wix.com/velo/reference/wix-members/authentication/login).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users.html#login)
     */
    function login(email: string, password: string): Promise<void>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-members.authentication.logout()](https://www.wix.com/velo/reference/wix-members/authentication/logout).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users.html#logout)
     */
    function logout(): void;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-window.consentPolicy.onConsentPolicyChanged()](https://www.wix.com/velo/reference/wix-window/consentPolicy-obj/onconsentpolicychanged).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users.html#onConsentPolicyChanged)
     */
    function onConsentPolicyChanged(handler: ConsentPolicyChangedHandler): void;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-members.authentication.onLogin()](https://www.wix.com/velo/reference/wix-members/authentication/onlogin).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users.html#onLogin)
     */
    function onLogin(handler: LoginHandler): void;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-members.authentication.promptForgotPassword()](https://www.wix.com/velo/reference/wix-members/authentication/promptforgotpassword).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users.html#promptForgotPassword)
     */
    function promptForgotPassword(language?: string): Promise<void>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-members.authentication.promptLogin()](https://www.wix.com/velo/reference/wix-members/authentication/promptlogin).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users.html#promptLogin)
     */
    function promptLogin(options?: LoginOptions): Promise<User>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-members.authentication.register()](https://www.wix.com/velo/reference/wix-members/authentication/register).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users.html#register)
     */
    function register(email: string, password: string, options?: RegistrationOptions): Promise<RegistrationResult>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-window.consentPolicy.resetConsentPolicy()](https://www.wix.com/velo/reference/wix-window/consentPolicy-obj/resetconsentpolicy).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users.html#resetConsentPolicy)
     */
    function resetConsentPolicy(): Promise<void>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-window.consentPolicy.setConsentPolicy()](https://www.wix.com/velo/reference/wix-window/consentPolicy-obj/setconsentpolicy).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users.html#setConsentPolicy)
     */
    function setConsentPolicy(policy: Policy): Promise<PolicyDetails>;
    /**
     * The event that occurred when the consent policy changed.
     */
    type ConsentPolicyChangedEvent = {};
    /**
     * An object used by the `promptLogin()` function to determine how the login dialog box appears.
     */
    type LoginOptions = {
        /**
         * What type of login experience to present: `"login"` or `"signup"`. Defaults to the option chosen in the Member Signup Settings panel in the Editor.
         */
        mode?: string;
        /**
         * Deprecated.
         */
        lang?: string;
        /**
         * Whether the login form should be modal (`true`) or full screen (`false`). Defaults to `false` if the property doesn't exist.
         */
        modal?: boolean;
    };
    /**
     * The current visitor's  consent policy settings.
     */
    type Policy = {
        /**
         * Consent for mandatory cookies for Wix websites, such as for security cookies. Wix places these cookies on your device and these cookies do not require visitor consent. Always `true`.
         */
        essential: boolean;
        /**
         * Consent for cookies placed on the visitor's device that "remember" visitor settings to improve visitor experience. For example, an indication that the visitor dismissed a popup. The default is `true`.
         */
        functional: boolean;
        /**
         * Consent for cookies used for analytics, such as Wix analytics, Google Analytics, Yandex Metrica, and so on. The default is `true`.
         */
        analytics: boolean;
        /**
         * Consent for cookies used for advertising purposes. This includes 3rd-party scripts and pixels that may potentially place advertising cookies on the device (such as Twitter page view and Facebook Pixel). The default is `true`.
         */
        advertising: boolean;
        /**
         * Consent for a visitor's personal data to be transferred to a 3rd party (such as Google Analytics, Facebook Pixel, and FullStory). The default is `true`.
         */
        dataToThirdParty: boolean;
    };
    /**
     * The complete details of the current user's consent policy.
     */
    type PolicyDetails = {
        /**
         * Whether the policy is the default consent policy set by the site owner. If `true`, either the user has not set a policy or the site owner has reset the policy.
         */
        defaultPolicy: boolean;
        /**
         * An object representing the visitor's current consent policy.
         */
        policy: Policy;
        /**
         * If a cookie exists in the browser defining the current consent policy, the date the policy was set. Otherwise, undefined.
         */
        createdDate?: Date;
    };
    /**
     * An object that contains information about a site registration.
     */
    type RegistrationOptions = {
        /**
         * Contact information.
         */
        contactInfo?: wixCrm.ContactInfo;
        /**
         * Sets the [privacy status](https://support.wix.com/en/article/member-privacy-settings-for-groups) of a new member upon registration.
         * One of:
         *
         *  + `"PUBLIC"`: Sets the new member status to public. A member whose status is public is a member of the site's community.
         *  + `"PRIVATE"`: Sets the new member status to private. A member whose status is private is not a member of the site's community. The default is set to private.
         */
        privacyStatus?: string;
    };
    /**
     * An object that contains information about the results of a site registration.
     */
    type RegistrationResult = {
        /**
         * Registration status. Either "Pending" or "Active".
         */
        status: string;
        /**
         * A token for approving the user as
         *  a site member using the [approveByToken()](wix-users-backend.html#approveByToken)
         *  function. The token is safe to pass via email or from client-side code to
         *  backend code. The token is only available when `status` is "Pending".
         */
        approvalToken?: string;
        /**
         * The user that has been registered.
         */
        user: User;
    };
    /**
     * An object used when sending a Triggered Email.
     */
    type TriggeredEmailOptions = {
        /**
         * An object with `key:value` pairs where each
         *  `key` is a variable in the email template created in Triggered Emails and its
         *  corresponding `value` is the value to insert into the template in place of
         *  variable. The values must be strings.
         */
        variables: any;
    };
    /**
     * Function that runs when a visitor's consent policy was changed using [`setConsentPolicy()`](#setConsentPolicy).
     */
    type ConsentPolicyChangedHandler = (event: ConsentPolicyChangedEvent) => void;
    /**
     * Function that runs when a user has logged in.
     */
    type LoginHandler = (user: User) => void;
    /**
     * A site user.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users.User.html#)
     */
    interface User {
        /**
         * **Deprecated.**
         * This property will continue to work, but a newer version is available at
         * [wix-members.currentMember.getMember()](https://www.wix.com/velo/reference/wix-members/currentmember/getmember).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users.User.html#id)
         */
        readonly id: string;
        /**
         * **Deprecated.**
         * This property will continue to work, but a newer version is available at
         * [wix-members.currentMember.getMember()](https://www.wix.com/velo/reference/wix-members/currentmember/getmember).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users.User.html#loggedIn)
         */
        readonly loggedIn: boolean;
        /**
         * **Deprecated.**
         * This property will continue to work, but a newer version is available at
         * [wix-members.currentMember.getRoles()](https://www.wix.com/velo/reference/wix-members/currentmember/getroles).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users.User.html#role)
         */
        readonly role: string;
        /**
         * **Deprecated.**
         * This function will continue to work, but a newer version is available at
         * [wix-members.currentMember.getMember()](https://www.wix.com/velo/reference/wix-members/currentmember/getmember).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users.User.html#getEmail)
         */
        getEmail(): Promise<string>;
        /**
         * Gets the user's member pricing plan.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users.User.html#getPricingPlans)
         */
        getPricingPlans(): Promise<User.PricingPlan[]>;
        /**
         * **Deprecated.**
         * This function will continue to work, but a newer version is available at
         * [wix-members.currentMember.getRoles()](https://www.wix.com/velo/reference/wix-members/currentmember/getroles).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users.User.html#getRoles)
         */
        getRoles(): Promise<User.UserRole[]>;
    }
    /**
     * A site user.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users.User.html#)
     */
    namespace User {
        /**
         * An object returned by the `getPricingPlans()` function representing a user's [pricing plans](https://support.wix.com/en/article/adding-and-setting-up-the-paid-plans-app).
         */
        type PricingPlan = {
            /**
             * The pricing plan's name.
             */
            name: string;
            /**
             * The pricing plan's start date.
             */
            startDate?: Date;
            /**
             * The pricing plan's expiry date.
             */
            expiryDate?: Date;
        };
        /**
         * An object returned by the `getRoles()` function representing a user's [roles](https://support.wix.com/en/article/creating-member-roles-6943237).
         */
        type UserRole = {
            /**
             * Role name as defined in the site's dashboard or one of "Admin" or "Member".
             */
            name: string;
            /**
             * Role description, if defined in the site's dashboard.
             */
            description?: string;
        };
    }
}

// /types/common/wix-stores.d.ts
/**
 * The wix-stores module contains functionality for working with your
 *  site's store from client-side code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.html#)
 */
declare module 'wix-stores' {
    /**
     * The wix-stores.cart module provides functionality for working with your site's cart from client-side code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.html#cart)
     */
    const cart: Cart;
    /**
     * The wix-stores.navigate module provides functionality for navigating your store from client-side code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.html#navigate)
     */
    const navigate: Navigate;
    /**
     * The wix-stores.product module provides functionality for working with your store's products from client-side code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.html#product)
     */
    const product: Product;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-stores.cart.getCurrentCart()](https://www.wix.com/velo/reference/wix-stores/cart/getcurrentcart).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.html#getCurrentCart)
     */
    function getCurrentCart(): Promise<CartObj>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-stores.product.getOptionsAvailability()](https://www.wix.com/velo/reference/wix-stores/product/getoptionsavailability).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.html#getProductOptionsAvailability)
     */
    function getProductOptionsAvailability(productId: string, choices: any): Promise<ProductOptionsAvailability>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-stores.product.getVariants()](https://www.wix.com/velo/reference/wix-stores/product/getvariants).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.html#getProductVariants)
     */
    function getProductVariants(productId: string, options?: ProductVariantOptions): Promise<VariantItem[]>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-stores.cart.onChange()](https://www.wix.com/velo/reference/wix-stores/cart/onchange).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.html#onCartChanged)
     */
    function onCartChanged(handler: CartChangedHandler): void;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-stores.cart.removeProduct()](https://www.wix.com/velo/reference/wix-stores/cart/removeproduct).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.html#removeProductFromCart)
     */
    function removeProductFromCart(cartLineItemId: number): Promise<CartObj>;
    /**
     * An object representing an address.
     */
    type CartAddress = {
        /**
         * First name.
         */
        firstName: string;
        /**
         * Last name.
         */
        lastName: string;
        /**
         * Email address.
         */
        email: string;
        /**
         * Phone number.
         */
        phone: string;
        /**
         * Address.
         */
        address: string;
    };
    /**
     * An object representing a coupon applied in a shopping cart.
     */
    type CartAppliedCoupon = {
        /**
         * Coupon code.
         */
        code: string;
        /**
         * Coupon unique identifier.
         */
        couponId: string;
        /**
         * Coupon name.
         */
        name: string;
        /**
         * Type of coupon.
         *  One of:
         *
         *  + `"BuyXGetY"`
         *  + `"FixedPriceAmount"`
         *  + `"FreeShipping"`
         *  + `"MoneyOffAmount"`
         *  + `"PercentOffRate"`
         */
        couponType: string;
        /**
         * Value of the coupon discount.
         */
        discountValue: string;
    };
    /**
     * An object representing a visitor who abandoned a shopping cart.
     */
    type CartBuyerInfo = {
        /**
         * Buyer's unique ID.
         */
        id: string;
        /**
         * Buyer's email address.
         */
        email: string;
        /**
         * Buyer's first name.
         */
        firstName: string;
        /**
         * Buyer's last name.
         */
        lastName: string;
        /**
         * Buyer's identity.
         *  One of:
         *
         *  + `"ADMIN"`: Buyer is the site owner.
         *  + `"MEMBER"`: Buyer is a logged-in site member.
         *  + `"VISITOR"`: Buyer is not logged in.
         *  + `"CONTACT"`: A contact has been created for the buyer.
         */
        identityType: string;
        /**
         * Buyer's phone number.
         */
        phone: string;
    };
    /**
     * An object representing a custom text field.
     */
    type CartCustomTextField = {
        /**
         * Field title.
         */
        title: string;
        /**
         * Field value.
         */
        value: string;
    };
    /**
     * An object representing a line item in a shopping cart.
     */
    type CartLineItem = {
        /**
         * Cart line item ID.
         */
        id: number;
        /**
         * Name of the line item.
         */
        name: string;
        /**
         * Notes about the line item.
         */
        notes: string;
        /**
         * Line item price.
         */
        price: string;
        /**
         * Line item product ID.
         */
        productId: string;
        /**
         * Line item quantity.
         */
        quantity: number;
        /**
         * Line item stock keeping unit.
         */
        sku: string;
        /**
         * Total price charged to the customer for all line items after any applicable discounts.
         */
        totalPrice: string;
        /**
         * Line item weight.
         */
        weight: string;
        /**
         * Type of the line item.
         *  One of:
         *
         *  + `"DIGITAL"`: Digital item.
         *  + `"PHYSICAL"`: Physical item.
         *  + `"CUSTOM_AMOUNT_ITEM"`: Item with a custom price.
         *  + `"UNSPECIFIED"`: Type can't be classified due to an error.
         */
        lineItemType: string;
        /**
         * Line item options.
         */
        options: Option[];
        /**
         * Media item.
         */
        mediaItem: CartMediaItem;
        /**
         * Custom text.
         */
        customTextFields: CartCustomTextField[];
    };
    /**
     * An object representing a line item's primary media.
     */
    type CartMediaItem = {
        /**
         * Media item type. Currently only `"IMAGE"` type supported.
         */
        type: string;
        /**
         * Media item source for media uploaded to Wix (wix:image, wix:video or external URL).
         */
        src: string;
    };
    /**
     * An object representing a shopping cart.
     */
    type CartObj = {
        /**
         * Unique identifier of the shopping cart.
         */
        _id: string;
        /**
         * Coupon applied in the shopping cart.
         */
        appliedCoupon: CartAppliedCoupon;
        /**
         * Cart billing address.
         */
        billingAddress: CartAddress;
        /**
         * The buyer's information.
         */
        buyerInfo: CartBuyerInfo;
        /**
         * Cart status. Either `"INCOMPLETE"` or `"COMPLETE"`.
         */
        status: string;
        /**
         * Currency of the shopping cart.
         */
        currency: Currency;
        /**
         * The shopping cart's shipping information.
         */
        shippingInfo: CartShippingInfo;
        /**
         * Items in the shopping cart.
         */
        lineItems: CartLineItem[];
        /**
         * The shopping cart's totals.
         */
        totals: OrderTotals;
        /**
         * The order's units of weight. One of: `"KG"`, `"LB"`, or `"UNSPECIFIED_WEIGHT_UNIT"`.
         */
        weightUnit: string;
    };
    /**
     * An object representing shipping information.
     */
    type CartShippingInfo = {
        /**
         * Shipment address.
         */
        shippingAddress?: CartAddress;
        /**
         * Pickup address.
         */
        pickupInfo?: CartAddress;
    };
    /**
     * An object representing a currency.
     */
    type Currency = {
        /**
         * The currency code.
         */
        currency: string;
        /**
         * The currency symbol.
         */
        symbol: string;
    };
    /**
     * An object representing a media item.
     */
    type MediaItem = {
        /**
         * Media item ID.
         */
        id: string;
        /**
         * Media item title.
         */
        title: string;
        /**
         * Media item description.
         */
        description: string;
        /**
         * Media items type. Can be "image" or "video."
         */
        type: string;
        /**
         * Media item URL.
         */
        src: string;
        /**
         * Thumbnail URL for videos only.
         */
        thumbnail?: string;
    };
    /**
     * An object representing a line item option.
     */
    type Option = {
        /**
         * Name of the product option.
         */
        option: string;
        /**
         * Selected option.
         */
        selection: string;
    };
    /**
     * An object representing an order's totals.
     */
    type OrderTotals = {
        /**
         * The subtotal of all the order's line items, excluding tax.
         */
        subtotal: number;
        /**
         * The total shipping price, including tax.
         */
        shipping: number;
        /**
         * The total amount of tax.
         */
        tax: string;
        /**
         * The total calculated discount amount.
         */
        discount: number;
        /**
         * The total price.
         */
        total: number;
        /**
         * The total weight of the order's items.
         */
        weight: number;
        /**
         * The total quantity of the the order's line items.
         */
        quantity: number;
    };
    /**
     * An object representing paging options.
     */
    type PagingOptions = {
        /**
         * Maximum number of variants to retrieve. Defaults to 300.
         */
        limit?: number;
        /**
         * Number of variants to skip before the retrieved variants. Defaults to 0.
         */
        skip?: number;
    };
    /**
     * An object representing a product variant's option choices.
     */
    type ProductChoices = {
        /**
         * Value of the choice. This key name is
         *  dependent on the product option. For example, if a product
         *  has a size option, this key value will be something like "Size" and its value
         *  will be something like "Large".
         *
         *  `optionKey` is not case-sensitive. Therefore the values for the option keys "`Size`", "`SIZE`", and "`size`" are combined.
         */
        optionKey: string;
    };
    /**
     * An object representing an option for a store product.
     */
    type ProductOption = {
        /**
         * Option type. Either `"color"` or `"drop_down"`.
         */
        optionType: string;
        /**
         * Option name.
         */
        name: string;
        /**
         * Option choices.
         */
        choices: ProductOptionsChoice[];
    };
    /**
     * An object representing all the available options for a store product, such as "Size" or "Color".
     */
    type ProductOptions = {
        /**
         * Name of the option. This key name
         *  is dependent on the options added to the product. For example, if a product has a size
         *  option, this key will be something like `"Size"`.
         *
         *  `optionKey` is not case-sensitive. Therefore the values for the option keys "`Size`", "`SIZE`", and "`size`" are combined.
         */
        optionKey: ProductOption;
    };
    /**
     * An object returned by the `getProductOptionsAvailability()` function representing the availability of a product.
     */
    type ProductOptionsAvailability = {
        /**
         * Whether the product with the specified option choices is available for purchase.
         */
        availableForPurchase: boolean;
        /**
         * An object representing all the available options for a store product.
         */
        productOptions: ProductOptions;
        /**
         * Main product media item (image or video) URL.
         */
        mainMedia: string;
        /**
         * List of product media items.
         */
        mediaItems: MediaItem;
        /**
         * The variant of the product selected using the specified option choices if there is one.
         */
        selectedVariant: ProductOptionsAvailabilitySelectedVariant;
    };
    /**
     * An object representing the product variant selected using the `getProductOptionsAvailability()` function.
     */
    type ProductOptionsAvailabilitySelectedVariant = {
        /**
         * Product variant stock keeping unit value.
         */
        sku: string;
        /**
         * Product variant currency.
         */
        currency: string;
        /**
         * Product variant price. The variant price must be greater than its discount.
         */
        price: number;
        /**
         * Discounted product variant price.
         */
        discountedPrice: number;
        /**
         * Product variant price formatted with the currency.
         */
        formattedPrice: string;
        /**
         * Discounted product variant price formatted with the currency.
         */
        formattedDiscountedPrice: string;
        /**
         * Whether the product variant is shown in the store.
         */
        visible: boolean;
        /**
         * Whether the product variant is in stock.
         */
        inStock: boolean;
        /**
         * Product variant weight.
         */
        weight: number;
    };
    /**
     * An object representing an options choice for a store product, such as choice "Small" for the option "Size."
     */
    type ProductOptionsChoice = {
        /**
         * Choice value.
         */
        value: number;
        /**
         * Choice description.
         */
        description: number;
        /**
         * Choice media.
         */
        media: ProductOptionsChoiceMedia;
        /**
         * Whether the product with this choice is in stock.
         */
        inStock: boolean;
        /**
         * Whether the product with this option is visible.
         */
        visible: boolean;
    };
    /**
     * An object representing the choice media.
     */
    type ProductOptionsChoiceMedia = {
        /**
         * Main choice media item (image or video thumbnail) URL.
         */
        mainMedia: string;
        /**
         * List of choice media items.
         */
        mediaItems: MediaItem;
    };
    /**
     * An object representing the selection of specific variants of a product. Use only one of
     *  `choices` or `variantIds`.
     */
    type ProductVariantOptions = {
        /**
         * Choices of the retrieved variants.
         */
        choices?: any;
        /**
         * IDs of the variants to retrieve.
         */
        variantIds?: string[];
    };
    type QuickViewOptions = {
        /**
         * Product quantity to be displayed in the Quick View. Defaults to 1.
         */
        quantity: number;
    };
    /**
     * An object containing variant information to use when creating or updating variants.
     */
    type VariantInfo = {
        /**
         * Variant currency.
         */
        currency: string;
        /**
         * Variant price. The variant price must be greater than its discount. If the variant price has been updated, changes to the product price do not affect the variant price.
         */
        price: number;
        /**
         * Discounted variant price.
         */
        discountedPrice: number;
        /**
         * Variant price formatted with the currency.
         */
        formattedPrice: string;
        /**
         * Discounted variant price formatted with the currency.
         */
        formattedDiscountedPrice: string;
        /**
         * Variant weight.
         */
        weight: number;
        /**
         * Variant stock keeping unit value.
         */
        sku: string;
        /**
         * Whether the variant is visible in the store.
         */
        visible: boolean;
        /**
         * Price per unit.
         */
        pricePerUnit: number;
        /**
         * Price per unit formatted with currency symbol.
         */
        formattedPricePerUnit: string;
    };
    /**
     * An object representing a product variant item.
     */
    type VariantItem = {
        /**
         * Unique variant ID.
         */
        _id: string;
        /**
         * Choices of the retrieved variant in the form of an object containing a key:value pair for each variant choice. For example, if a variant has a size option, this key value will be something like "Size" and its value will be something like "Large".
         */
        choices: any;
        /**
         * Variant information.
         */
        variant: VariantInfo;
    };
    /**
     * An object representing product variants.
     */
    type Variants = {
        /**
         * List of variant items that match the specified choices or variant IDs.
         */
        items: VariantItem[];
        /**
         * Number of items in the current results page.
         */
        length: number;
        /**
         * Total number of variants with the specified choices.
         */
        totalCount: number;
    };
    /**
     * Function that runs when a cart changes.
     */
    type CartChangedHandler = (cart: CartObj) => void;
    /**
     * The wix-stores.Cart module contains functionality for working with your
     *  site's cart from client-side code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.Cart.html#)
     */
    interface Cart {
        /**
         * Adds one or more products to the cart.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.Cart.html#addProducts)
         */
        addProducts(products: Cart.AddToCartItem[]): Promise<CartObj>;
        /**
         * Adds and applies a coupon to the cart.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.Cart.html#applyCoupon)
         */
        applyCoupon(couponCode: string): Promise<CartObj>;
        /**
         * Gets the current site visitor's cart.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.Cart.html#getCurrentCart)
         */
        getCurrentCart(): Promise<CartObj>;
        /**
         * Hides the Mini Cart.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.Cart.html#hideMiniCart)
         */
        hideMiniCart(): void;
        /**
         * An event handler that is triggered when items are added or removed from a cart.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.Cart.html#onChange)
         */
        onChange(handler: CartChangedHandler): void;
        /**
         * Removes the coupon currently applied to the cart.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.Cart.html#removeCoupon)
         */
        removeCoupon(): Promise<CartObj>;
        /**
         * Removes a specified product from the cart.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.Cart.html#removeProduct)
         */
        removeProduct(cartLineItemId: number): Promise<CartObj>;
        /**
         * Shows the Mini Cart.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.Cart.html#showMiniCart)
         */
        showMiniCart(): void;
        /**
         * Updates the quantity of a specified line item in the cart.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.Cart.html#updateLineItemQuantity)
         */
        updateLineItemQuantity(cartLineItemId: number, quantity: number): Promise<CartObj>;
    }
    /**
     * The wix-stores.Navigate module contains functionality for navigating to
     * store-related pages from client-side code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.Navigate.html#)
     */
    interface Navigate {
        /**
         * Directs the browser to navigate to the site visitor's cart page.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.Navigate.html#toCart)
         */
        toCart(): Promise<void>;
    }
    /**
     * The wix-stores.product module contains functionality for working with your
     *  store's products from client-side code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.Product.html#)
     */
    interface Product {
        /**
         * Gets the availability of a product based on the specified option choices.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.Product.html#getOptionsAvailability)
         */
        getOptionsAvailability(productId: string, choices: any): Promise<ProductOptionsAvailability>;
        /**
         * Gets a product's available variants based on the specified product ID and either option choices or variant IDs.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.Product.html#getVariants)
         */
        getVariants(productId: string, options?: ProductVariantOptions): Promise<VariantItem[]>;
        /**
         * Opens the [Quick View](https://support.wix.com/en/article/wix-stores-customizing-the-quick-view-in-the-product-gallery) modal of a specified product.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.Product.html#openQuickView)
         */
        openQuickView(productId: string, options?: QuickViewOptions): Promise<void>;
    }
    /**
     * The wix-stores.Cart module contains functionality for working with your
     *  site's cart from client-side code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores.Cart.html#)
     */
    namespace Cart {
        /**
         * An object used when adding one or more products to the cart.
         */
        type AddToCartItem = {
            /**
             * ID of the product to add to the cart.
             */
            productId: string;
            /**
             * Number of product units to add to the cart.
             */
            quantity: number;
            /**
             * Specific product options to add to the cart.
             *  If the product you're adding has options, you must specify which options to add.
             */
            options?: Cart.AddToCartOptions;
        };
        /**
         * An object used when adding a product to the cart with options.
         */
        type AddToCartOptions = {
            /**
             * Product options to use when adding the
             *  product to the cart. The object contains key:value pairs where the key is the option name and the value is the chosen option value.
             */
            choices?: any;
            /**
             * Custom text fields to use when adding the product to the cart.
             */
            customTextFields?: Cart.CustomTextField[];
        };
        /**
         * An object used to pass a custom text field when adding a product to
         *  the cart with options.
         */
        type CustomTextField = {
            /**
             * Custom text field title.
             */
            title: string;
            /**
             * Custom text field value.
             */
            value: string;
        };
    }
}

// /types/common/wix-seo.d.ts
/**
 * The wix-seo module contains functionality for working with
 *  [your site's SEO](https://support.wix.com/en/article/search-engine-optimization-seo) from
 *  client-side code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-seo.html#)
 */
declare module 'wix-seo' {
    /**
     * Gets the page's SEO-related link tags.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-seo.html#links)
     */
    const links: Link[];
    /**
     * Gets the page's SEO-related meta tags.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-seo.html#metaTags)
     */
    const metaTags: MetaTag[];
    /**
     * Gets the page's structured data.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-seo.html#structuredData)
     */
    const structuredData: any[];
    /**
     * Gets the page's title.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-seo.html#title)
     */
    const title: string;
    /**
     * Sets the page's SEO-related link tags.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-seo.html#setLinks)
     */
    function setLinks(links: Link[]): Promise<void>;
    /**
     * Sets the page's SEO-related meta tags.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-seo.html#setMetaTags)
     */
    function setMetaTags(metaTags: MetaTag[]): Promise<void>;
    /**
     * Sets the page's structured data.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-seo.html#setStructuredData)
     */
    function setStructuredData(structuredData: any[]): Promise<void>;
    /**
     * Sets the page's title.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-seo.html#setTitle)
     */
    function setTitle(title: string): Promise<void>;
    /**
     * An object representing a link tag.
     */
    type Link = {
        /**
         * The relationship of the linked resource to the current page.
         */
        rel?: string;
        /**
         * The URL of the linked resource.
         */
        href?: string;
    };
    /**
     * An object representing a meta tag.
     */
    type MetaTag = {
        /**
         * Name of the meta tag. Either `name` or `property` are required.
         */
        name?: string;
        /**
         * Name of the meta tag property. Either `property` or `name` are required.
         */
        property?: string;
        /**
         * HTTP header that corresponds to the `content`.
         */
        "http-equiv"?: string;
        /**
         * Meta tag value. For `og:image` meta tags, the `content` can
         *  be an external image URL or a Media Manager image URL as described [here]($w.Image.html#src).
         */
        content: string;
    };
}

// /types/common/wix-search.d.ts
/**
 * The wix-search module contains functionality for searching a site.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-search.html#)
 */
declare module 'wix-search' {
    /**
     * Creates a filter builder for building search filters.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-search.html#filter)
     */
    function filter(): WixSearchFilterBuilder;
    /**
     * Creates a search builder.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-search.html#search)
     */
    function search(phrase?: string): WixSearchBuilder;
    /**
     * Contains functionality for filtering a site search.
     */
    type WixSearchFilter = {
        /**
         * An object containing the filter definition.
         */
        filterDefinition: any;
    };
    /**
     * Contains functionality for refining a site search.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#)
     */
    interface WixSearchBuilder {
        /**
         * Refines a search to match documents that meet the conditions of all of the specified filters.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#and)
         */
        and(...filters: WixSearchFilter[]): WixSearchBuilder;
        /**
         * Adds a sort to a search, sorting by the specified fields in ascending order.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#ascending)
         */
        ascending(...field: string[]): WixSearchBuilder;
        /**
         * Adds a sort to a search, sorting by the specified fields in descending order.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#descending)
         */
        descending(...field: string[]): WixSearchBuilder;
        /**
         * Refines a search builder to only search for documents of the specified document type.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#documentType)
         */
        documentType(type: string): WixSearchBuilder;
        /**
         * Refines a search to match documents whose specified field value equals the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#eq)
         */
        eq(field: string, value: any): WixSearchBuilder;
        /**
         * Categorizes search results according to the specified facets.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#facets)
         */
        facets(...facets: string[]): WixSearchBuilder;
        /**
         * Returns the documents that match the search.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#find)
         */
        find(): Promise<WixSearchResult>;
        /**
         * Sets whether to search for exact matches or approximate matches of the search phrase.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#fuzzy)
         */
        fuzzy(fuzzy: boolean): WixSearchBuilder;
        /**
         * Refines a search to match documents whose specified field value is greater than or equal to the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#ge)
         */
        ge(field: string, value: string | number | Date): WixSearchBuilder;
        /**
         * Refines a search to match documents whose specified field value is greater than the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#gt)
         */
        gt(field: string, value: string | number | Date): WixSearchBuilder;
        /**
         * Refines a search to match documents whose specified field value contains all of the specified values.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#hasAll)
         */
        hasAll(field: string, values: string[]): WixSearchBuilder;
        /**
         * Refines a search to match documents whose specified field contains any of the specified values.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#hasSome)
         */
        hasSome(field: string, values: string[]): WixSearchBuilder;
        /**
         * Refines a search to match documents whose specified field value equals any of the specified values.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#in)
         */
        in(field: string, values: string[] | number[]): WixSearchBuilder;
        /**
         * Refines a search builder to search in the specified language.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#language)
         */
        language(language: string): WixSearchBuilder;
        /**
         * Refines a search or filter to match documents whose specified field value is less than or equal to the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#le)
         */
        le(field: string, value: string | number | Date): WixSearchBuilder;
        /**
         * Limits the number of documents the search returns.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#limit)
         */
        limit(limit: number): WixSearchBuilder;
        /**
         * Refines a search or filter to match documents whose specified field value is less than the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#lt)
         */
        lt(field: string, value: string | number | Date): WixSearchBuilder;
        /**
         * Refines a search to match documents whose specified field value does not equal the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#ne)
         */
        ne(field: string, value: any): WixSearchBuilder;
        /**
         * Refines a search to match documents that do not meet the conditions of all of the specified filters.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#not)
         */
        not(...filters: WixSearchFilter[]): WixSearchBuilder;
        /**
         * Refines a search to match documents that meet the condition of any of the specified filters.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#or)
         */
        or(...filters: WixSearchFilter[]): WixSearchBuilder;
        /**
         * Sets the search phrase to search for.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#query)
         */
        query(phrase: string): WixSearchBuilder;
        /**
         * Sets the number of documents to skip before returning search results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchBuilder.html#skip)
         */
        skip(skip: number): WixSearchBuilder;
    }
    /**
     * Contains functionality for creating filters to use in a site search.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchFilterBuilder.html#)
     */
    interface WixSearchFilterBuilder {
        /**
         * Creates a search filter for matching documents that meet the conditions of all of the specified filters.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchFilterBuilder.html#and)
         */
        and(...filters: WixSearchFilter[]): WixSearchFilter;
        /**
         * Creates a search filter for matching documents whose specified field value equals the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchFilterBuilder.html#eq)
         */
        eq(field: string, value: any): WixSearchFilter;
        /**
         * Creates a search filter for matching documents whose specified field value is greater than or equal to the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchFilterBuilder.html#ge)
         */
        ge(field: string, value: string | number | Date): WixSearchFilter;
        /**
         * Creates a search filter for matching documents whose specified field value is greater than the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchFilterBuilder.html#gt)
         */
        gt(field: string, value: string | number | Date): WixSearchFilter;
        /**
         * Creates a search filter for matching documents whose specified field value contains all of the specified values.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchFilterBuilder.html#hasAll)
         */
        hasAll(field: string, values: string[]): WixSearchFilter;
        /**
         * Creates a search filter for matching documents whose specified field contains any of the specified values.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchFilterBuilder.html#hasSome)
         */
        hasSome(field: string, values: string[]): WixSearchFilter;
        /**
         * Creates a search filter for matching documents whose specified field value equals any of the specified values.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchFilterBuilder.html#in)
         */
        in(field: string, values: string[] | number[]): WixSearchFilter;
        /**
         * Creates a search filter for matching documents whose specified field value is less than or equal to the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchFilterBuilder.html#le)
         */
        le(field: string, value: string | number | Date): WixSearchFilter;
        /**
         * Creates a search filter for matching documents whose specified field value is less than the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchFilterBuilder.html#lt)
         */
        lt(field: string, value: string | number | Date): WixSearchFilter;
        /**
         * Creates a search filter for matching documents whose specified field value does not equal the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchFilterBuilder.html#ne)
         */
        ne(field: string, value: any): WixSearchFilter;
        /**
         * Creates a search filter for matching documents that do not meet the conditions of all of the specified filters.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchFilterBuilder.html#not)
         */
        not(...filters: WixSearchFilter[]): WixSearchFilter;
        /**
         * Creates a filter for matching documents that meet the condition of any of the specified filters.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchFilterBuilder.html#or)
         */
        or(...filters: WixSearchFilter[]): WixSearchFilter;
    }
    /**
     * The results of a site search, containing the retrieved documents.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchResult.html#)
     */
    interface WixSearchResult {
        /**
         * Returns the index of the current results page number.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchResult.html#currentPage)
         */
        readonly currentPage: number;
        /**
         * Returns the documents that match the search.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchResult.html#documents)
         */
        readonly documents: WixSearchResult.Document[];
        /**
         * Returns the facet results retrieved by the search.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchResult.html#facets)
         */
        readonly facets: WixSearchResult.FacetResult[];
        /**
         * Returns the number of documents in the current results page.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchResult.html#length)
         */
        readonly length: number;
        /**
         * Returns the search page size.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchResult.html#pageSize)
         */
        readonly pageSize: number;
        /**
         * Returns the total number of documents that match the search.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchResult.html#totalCount)
         */
        readonly totalCount: number;
        /**
         * Returns the total number of pages the search produced.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchResult.html#totalPages)
         */
        readonly totalPages: number;
        /**
         * Indicates if the search has another page of results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchResult.html#hasNext)
         */
        hasNext(): boolean;
        /**
         * Indicates if the search has a previous page of results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchResult.html#hasPrev)
         */
        hasPrev(): boolean;
        /**
         * Retrieves the next page of search results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchResult.html#next)
         */
        next(): Promise<WixSearchResult>;
        /**
         * Retrieves the previous page of search results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchResult.html#prev)
         */
        prev(): Promise<WixSearchResult>;
    }
    /**
     * The results of a site search, containing the retrieved documents.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-search.WixSearchResult.html#)
     */
    namespace WixSearchResult {
        /**
         * A document returned by a site search. The following are the default properties included in every search result document. For app-specific properties, check the supported schema for each [`documentType`](wix-search.WixSearchBuilder.html#documentType).
         */
        type Document = {
            /**
             * Unique document identifier.
             */
            _id: string;
            /**
             * Document image in the following format: `wix:image://v1//#originWidth=&originHeight=[&watermark=]`
             */
            image: string;
            /**
             * Document type.
             *  One of the following:
             *
             *  + `Site/Pages`
             *  + `Blog/Posts`
             *  + `Bookings/Services`
             *  + `Forum/Content`
             *  + `Stores/Products`
             */
            documentType: string;
            /**
             * The relative page URL. For regular site pages, the URL defined in [SEO settings](https://support.wix.com/en/article/changing-your-page-url). Note that the `url` for the home page is an empty string. For Wix app pages, the URL stored in the database collection.
             */
            url: string;
            /**
             * For regular site pages, all text on the page. For Wix app pages, the description or content stored in the database collection.
             */
            description: string;
            /**
             * For regular site pages, the [SEO page title](https://support.wix.com/en/article/adding-seo-page-titles-and-descriptions-meta-tags#page-titles). For Wix app pages, the title or name stored in the database collection.
             */
            title: string;
        };
        /**
         * Facet value information.
         */
        type Facet = {
            /**
             * Facet value.
             */
            facetValue: string;
            /**
             * Number of returned documents that match the facet value.
             */
            count: number;
        };
        /**
         * Facet information for a single facet specified for the search. Includes the name of the specified facet and the results for each facet value.
         */
        type FacetGroup = {
            /**
             * Name of the facet specified for the search.
             */
            facet: string;
            /**
             * Information about the facet values for the specified facet.
             */
            facets: WixSearchResult.Facet[];
        };
        /**
         * A facet result returned by a site search. A facet result is returned for each parameter specified in the [`facets()`](wix-search.WixSearchBuilder.html#facets) function.
         */
        type FacetResult = {
            /**
             * A facet group with facet information. Includes the name of the specified facet and the results for each facet value.
             */
            facets: WixSearchResult.FacetGroup[];
        };
    }
}

// /types/common/wix-realtime.d.ts
/**
 * The wix-realtime module contains functionality for publishing messages
 *  on channels that site visitors can subscribe to.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-realtime.html#)
 */
declare module 'wix-realtime' {
    /**
     * Adds an event handler that runs when a connection or reconnection
     *  occurs.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-realtime.html#onConnected)
     */
    function onConnected(handler: ConnectionHandler): void;
    /**
     * Adds an event handler that runs when a disconnection occurs.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-realtime.html#onDisconnected)
     */
    function onDisconnected(handler: DisconnectionHandler): void;
    /**
     * Adds an event handler that runs when an error occurs.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-realtime.html#onError)
     */
    function onError(handler: ErrorHandler): void;
    /**
     * Subscribes to a channel or channel resource.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-realtime.html#subscribe)
     */
    function subscribe(channel: Channel, handler: MessageHandler): Promise<string>;
    /**
     * Unsubscribes from a channel or channel resource.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-realtime.html#unsubscribe)
     */
    function unsubscribe(options: UnsubscribeOptions): Promise<void>;
    /**
     * An object representing a channel or channel resource.
     *  Site visitors can subscribe to a channel or channel resource to receive the
     *  messages that are published on it. When site visitors subscribe to a channel, they do not
     *  receive messages published to a resource on that same channel. Similarly,
     *  when site visitors subscribe to a channel resource, they do not
     *  receive messages published to that same channel without a specified resource.
     *  Channel resources inherit their parent channel's permissions, unless specified
     *  otherwise.
     */
    type Channel = {
        /**
         * Channel name. Cannot exceed 140 characters.
         */
        name: string;
        /**
         * ID of a specific channel resource.
         */
        resourceId?: string;
    };
    /**
     * An object representing an error.
     */
    type Error = {
        /**
         * Error code.
         *
         *  One of:
         *
         *  + `1`: Connection error
         *  + `2`: Subscription error (error will also include a channel value)
         *  + `3`: Bad input
         */
        errorCode: number;
        /**
         * Error message.
         */
        message: string;
        /**
         * Channel related to the error.
         */
        channel?: Channel;
    };
    /**
     * An object representing a published message.
     */
    type Message = {
        /**
         * Message payload.
         */
        payload: any;
        /**
         * Message publisher, if sent.
         */
        publisher?: Publisher;
    };
    /**
     * An object representing a publisher.
     */
    type Publisher = {
        /**
         * ID of the publisher.
         */
        id: string;
    };
    /**
     * An object containing options to be used when unsubscribing from a
     *  channel or channel resource.
     */
    type UnsubscribeOptions = {
        /**
         * ID of the subscription to unsubscribe from. Use this
         *  property when unsubscribing from one of multiple subscriptions to a channel or channel
         *  resource.
         */
        subscriptionId?: string;
        /**
         * The channel, and optionally the resource, to
         *  unsubscribe from. Use this property when unsubscribing from all subscriptions to a channel
         *  or channel resource.
         */
        channel?: Channel;
    };
    type ConnectionHandler = () => void;
    type DisconnectionHandler = () => void;
    type ErrorHandler = (error: Error) => void;
    type MessageHandler = (message: Message, channel: Channel) => void;
}

// /types/common/wix-crm.d.ts
/**
 * The wix-crm module contains functionality for working with
 *  [your site's contacts](https://support.wix.com/en/article/about-your-contact-list)
 *  from client-side code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-crm.html#)
 */
declare module 'wix-crm' {
    /**
     * The Contacts API is used to manage a site's contacts.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm.html#contacts)
     */
    const contacts: Contacts;
    /**
     * The Triggered Emails API is used to send triggered emails to your site's contacts and members.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm.html#triggeredEmails)
     */
    const triggeredEmails: TriggeredEmails;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [`wix-crm.contacts.appendOrCreateContact()`](https://www.wix.com/velo/reference/wix-crm/contacts/appendorcreatecontact).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm.html#createContact)
     */
    function createContact(contactInfo: ContactInfo): Promise<string>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-crm.triggeredEmails.emailContact()](https://www.wix.com/velo/reference/wix-crm/triggeredemails/emailcontact).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm.html#emailContact)
     */
    function emailContact(emailId: string, toContact: string, options?: TriggeredEmails.TriggeredEmailOptions): Promise<void>;
    /**
     * An object that contains information about a site contact.
     */
    type ContactInfo = {
        /**
         * Contact's first name.
         */
        firstName?: string;
        /**
         * Contact's last name.
         */
        lastName?: string;
        /**
         * Contact's image source.
         */
        picture?: string;
        /**
         * List of contact's email addresses.
         *  When creating a contact, if no phone number is
         *  provided, at least one email address must be provided.
         */
        emails?: string[];
        /**
         * Email address the contact who is also
         *  a member uses to log into the system.
         */
        loginEmail?: string;
        /**
         * List of contact's phone numbers.
         *  When creating a contact, if no email is
         *  provided, at least one phone number must be provided.
         */
        phones?: string[];
        /**
         * List of contact's labels. [Labels](https://support.wix.com/en/article/creating-contact-labels)
         *  are used to organize contacts. When setting the `labels` property, you can
         *  only list labels that already exist in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).
         */
        labels?: string[];
        /**
         * Any
         *  number of custom fields. [Customs fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)
         *  are used to store additional information about your site's contacts. When
         *  setting a custom field, use key:value pairs where the key matches the names
         *  defined in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).
         *  You can only set values for custom fields that already exist in the Contacts
         *  application.
         */
        customFields?: string | number | Date;
    };
    /**
     * The Contacts API is used to manage a site's contacts.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm.Contacts.html#)
     */
    interface Contacts {
        /**
         * Appends an existing contact or creates a contact if it doesn't exist.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm.Contacts.html#appendOrCreateContact)
         */
        appendOrCreateContact(contactInfo: Contacts.ContactInfo): Promise<Contacts.ContactIdentification>;
    }
    /**
     * The Triggered Emails API is used to send triggered emails to your site's contacts and members.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm.TriggeredEmails.html#)
     */
    interface TriggeredEmails {
        /**
         * Sends a triggered email to the current contact.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm.TriggeredEmails.html#emailContact)
         */
        emailContact(emailId: string, contactId: string, options?: TriggeredEmails.TriggeredEmailOptions): Promise<void>;
        /**
         * Sends a Triggered Email to the currently logged-in site member.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm.TriggeredEmails.html#emailMember)
         */
        emailMember(emailId: string, memberId: string, options?: TriggeredEmails.TriggeredEmailOptions): Promise<void>;
    }
    /**
     * The Contacts API is used to manage a site's contacts.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm.Contacts.html#)
     */
    namespace Contacts {
        type Address = {
            /**
             * Street address ID.
             */
            _id: string;
            /**
             * Address type.
             * `"UNTAGGED"` is shown as "Other" in the Contact List.
             *
             * One of:
             *
             * - `"UNTAGGED"`
             * - `"HOME"`
             * - `"WORK"`
             * - `"BILLING"`
             * - `"SHIPPING"`
             */
            tag: string;
            /**
             * Street address.
             */
            address: Contacts.AddressDetails;
        };
        /**
         * Street address.
         */
        type AddressDetails = {
            /**
             * Main address line, usually street and number, as free text.
             */
            addressLine1?: string;
            /**
             * Street address object, with number and name in separate fields.
             */
            streetAddress?: Contacts.StreetAddressInfo;
            /**
             * Human-readable address string.
             *  If not provided, the value is generated from the available address data.
             */
            formatted?: string;
            /**
             * Free text providing more detailed address information,
             *  such as apartment, suite, or floor.
             */
            addressLine2?: string;
            /**
             * Coordinates of the physical address.
             */
            location?: Contacts.AddressLocation;
            /**
             * City name.
             */
            city?: string;
            /**
             * Code for a subdivision (such as state, prefecture, or province) in an
             *  [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) format.
             */
            subdivision?: string;
            /**
             * 2-letter country code in an
             *  [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
             */
            country?: string;
            /**
             * Postal or zip code.
             */
            postalCode?: string;
        };
        type AddressInfo = {
            /**
             * Address type.
             * `"UNTAGGED"` is shown as "Other" in the Contact List.
             *
             * One of:
             *
             * - `"UNTAGGED"`
             * - `"HOME"`
             * - `"WORK"`
             * - `"BILLING"`
             * - `"SHIPPING"`
             */
            tag: string;
            /**
             * Street address.
             */
            address: Contacts.AddressDetails;
        };
        /**
         * Coordinates of the physical address.
         */
        type AddressLocation = {
            /**
             * Address's latitude.
             */
            latitude?: number;
            /**
             * Address's longitude.
             */
            longitude?: number;
        };
        type ContactIdentification = {
            /**
             * ID of the contact that was found or created.
             */
            contactId: string;
            /**
             * Identity type of the returned contact.
             *
             * One of:
             *
             * - `"CONTACT"`: The returned contact ID belongs to a new or existing contact.
             * - `"MEMBER"`: The returned contact ID belongs to the currently logged-in site member.
             * - `"NOT_AUTHENTICATED_MEMBER"`: The returned contact ID belongs to a site member who is not currently logged in.
             */
            identityType: string;
        };
        /**
         * Contact's information.
         */
        type ContactInfo = {
            /**
             * Contact's first and last name.
             */
            name?: Contacts.Name;
            /**
             * Contact's company name.
             */
            company?: string;
            /**
             * Contact's job title.
             *  Corresponds to the **Position** field in the Dashboard.
             */
            jobTitle?: string;
            /**
             * Contact's locale, formatted as an
             *  [IETF BCP 47 language tag](https://tools.ietf.org/html/rfc5646).
             *  Typically, this is a lowercase 2-letter language code,
             *  followed by a hyphen,
             *  followed by an uppercase 2-letter country code.
             *
             *  For example, German from Germany is formatted as `de-DE`,
             *  and U.S. English is formatted as `en-US`.
             */
            locale?: string;
            /**
             * Contact's birthdate, formatted as `"YYYY-MM-DD"`.
             *
             *  Example: `"2020-03-15"` for March 15, 2020.
             */
            birthdate?: string;
            /**
             * **Deprecated.** Use `profilePicture` instead.
             */
            picture?: Contacts.Picture;
            /**
             * Contact's profile picture URL.
             */
            profilePicture?: string;
            /**
             * List of up to 50 email addresses.
             */
            emails?: Contacts.EmailInfo[];
            /**
             * List of up to 50 phone numbers.
             */
            phones?: Contacts.PhoneInfo[];
            /**
             * List of up to 50 addresses.
             */
            addresses?: Contacts.AddressInfo[];
            /**
             * List of contact label keys.
             * [Contact labels](https://support.wix.com/en/article/adding-labels-to-contacts-in-your-contact-list)
             * help categorize contacts.
             *
             * Label keys must exist to be added to the contact.
             * Contact labels can be created or retrieved with
             * [`findOrCreateLabel()`](wix-crm-backend/contacts/findorcreatelabel)
             * or
             * [`queryLabels()`](wix-crm-backend/contacts/queryLabels).
             */
            labelKeys?: string[];
            /**
             * Set of key-value pairs.
             *
             * Contact's
             * [extended fields](wix-crm-backend/contacts/introduction#about-extended-fields),
             * which allow you to store additional information about your contacts.
             *
             * To view or create extended fields, use
             * [`findOrCreateExtendedField()`](wix-crm-backend/contacts/findorcreateextendedfield),
             * [`getExtendedField()`](wix-crm-backend/contacts/getextendedfield), or
             * [`queryExtendedFields()`](wix-crm-backend/contacts/queryextendedfields).
             */
            extendedFields?: any;
        };
        /**
         * Contact's profile picture.
         */
        type ContactPicture = {
            /**
             * Image source. Can be either a Media Manager URL or external URL.
             */
            image: string;
            /**
             * Indicates whether the image is retrieved from Wix Media
             * or an external provider.
             *
             * One of:
             *
             * - `"EXTERNAL"`: The image is retrieved from an external provider.
             * - `"WIX_MEDIA"`: The image is retrieved from Wix Media.
             */
            imageProvider: string;
        };
        type Email = {
            /**
             * Email ID.
             */
            _id: string;
            /**
             * Email type.
             *
             * `"UNTAGGED"` is shown as "Other" in the Contact List.
             *
             * One of:
             *
             * - `"UNTAGGED"`
             * - `"MAIN"`
             * - `"HOME"`
             * - `"WORK"`
             */
            tag: string;
            /**
             * Email address.
             */
            email: string;
            /**
             * Indicates whether this is the contact's primary email address.
             *  When changing `primary` to `true` for an email,
             *  the contact's other emails become `false`.
             */
            primary: boolean;
        };
        type EmailInfo = {
            /**
             * Email type.
             *
             * `"UNTAGGED"` is shown as "Other" in the Contact List.
             *
             * One of:
             *
             * - `"UNTAGGED"`
             * - `"MAIN"`
             * - `"HOME"`
             * - `"WORK"`
             */
            tag?: string;
            /**
             * Email address.
             */
            email?: string;
            /**
             * Indicates whether this is the contact's primary email address.
             *  When changing `primary` to `true` for an email,
             *  the contact's other emails become `false`.
             */
            primary?: boolean;
        };
        /**
         * Extended field that was found or created.
         */
        type ExtendedField = {
            /**
             * Extended field key.
             *
             * When accessing contact data,
             * extended field data is available at `extendedFields[key]`.
             * For example, if the key is "custom.notes",
             * the value can be accessed at `extendedFields["custom.notes"]`.
             *
             * `key` is generated when the extended field is created
             * and cannot be modified, even if `displayName` changes.
             */
            key: string;
            /**
             * Extended field display name shown in the Contact List.
             */
            displayName: string;
            /**
             * Type of data the field holds.
             *
             * One of:
             *
             * - `"TEXT"`: Accepts strings.
             * - `"URL"`: Accepts web addresses. Prepends `https://` if no protocol is included.
             * - `"DATE"`: Accepts dates formatted as `"YYYY-MM-DD"`.
             * - `"NUMBER"`: Accepts floats.
             */
            dataType: string;
            /**
             * Indicates whether the extended field is a
             * [system field or custom field](wix-crm-backend/contacts/introduction#about-extended-fields).
             *
             * One of:
             *
             * - `"SYSTEM"`: The field is a system field managed by Wix. System fields cannot be modified by 3rd-party apps or site contributors.
             * - `"USER_DEFINED"`: The field is a custom field and can be modified by 3rd-party apps or site contributors.
             */
            fieldType: string;
            /**
             * Date and time the field was created.
             */
            _createdDate: Date;
            /**
             * Date and time the field was last updated.
             */
            _updatedDate: Date;
            /**
             * Extended field [namespace](wix-crm-backend/contacts/introduction#the-namespace-and-key-properties-in-labels-and-extended-fields).
             *
             * Extended fields created by site contributors or 3rd-party apps
             * are automatically assigned to the `custom` namespace.
             */
            namespace: string;
            /**
             * Field description, if the field is a system field.
             */
            description: string;
        };
        /**
         * Contact's details.
         */
        type Info = {
            /**
             * Contact's first and last name.
             */
            name?: Contacts.Name;
            /**
             * Contact's company name.
             */
            company?: string;
            /**
             * Contact's job title.
             *  Corresponds to the **Position** field in the Dashboard.
             */
            jobTitle?: string;
            /**
             * Contact's locale, formatted as an
             *  [IETF BCP 47 language tag](https://tools.ietf.org/html/rfc5646).
             *  Typically, this is a lowercase 2-letter language code,
             *  followed by a hyphen,
             *  followed by an uppercase 2-letter country code.
             *
             *  For example, German from Germany is formatted as `de-DE`,
             *  and U.S. English is formatted as `en-US`.
             */
            locale?: string;
            /**
             * Contact's birthdate, formatted as `"YYYY-MM-DD"`.
             *
             *  Example: `"2020-03-15"` for March 15, 2020.
             */
            birthdate?: string;
            /**
             * **Deprecated.** Use `profilePicture` instead.
             */
            picture: Contacts.Picture;
            /**
             * Contact's profile picture URL.
             */
            profilePicture?: string;
            /**
             * List of up to 50 email addresses.
             */
            emails?: Contacts.Email[];
            /**
             * List of up to 50 phone numbers.
             */
            phones?: Contacts.Phone[];
            /**
             * List of up to 50 addresses.
             */
            addresses?: Contacts.Address[];
            /**
             * List of contact label keys.
             * [Contact labels](https://support.wix.com/en/article/adding-labels-to-contacts-in-your-contact-list)
             * help categorize contacts.
             *
             * Label keys must exist to be added to the contact.
             * Contact labels can be created or retrieved with
             * [`findOrCreateLabel()`](wix-crm-backend/contacts/findorcreatelabel)
             * or
             * [`queryLabels()`](wix-crm-backend/contacts/queryLabels).
             */
            labelKeys?: string[];
            /**
             * Set of key-value pairs.
             *
             * Contact's
             * [extended fields](wix-crm-backend/contacts/introduction#about-extended-fields),
             * which allow you to store additional information about your contacts.
             *
             * To view or create extended fields, use
             * [`findOrCreateExtendedField()`](wix-crm-backend/contacts/findorcreateextendedfield),
             * [`getExtendedField()`](wix-crm-backend/contacts/getextendedfield), or
             * [`queryExtendedFields()`](wix-crm-backend/contacts/queryextendedfields).
             */
            extendedFields: any;
        };
        /**
         * Label that was found or created.
         */
        type Label = {
            /**
             * Label key.
             *
             * `key` is generated when the label is created
             * and cannot be modified, even if `displayName` changes.
             */
            key: string;
            /**
             * Label display name shown in the Dashboard.
             */
            displayName: string;
            /**
             * Label type.
             *
             * One of:
             *
             * - `"SYSTEM"`: The label is a predefined system label for the Contact List.
             * - `"USER_DEFINED"`: The label was created by a site contributor or app.
             * - `"WIX_APP_DEFINED"`: The label was created by a Wix app.
             */
            labelType: string;
            /**
             * Date and time the label was created.
             */
            _createdDate: Date;
            /**
             * Date and time the label was last updated.
             */
            _updatedDate: Date;
            /**
             * Label [namespace](wix-crm-backend/contacts/introduction#the-namespace-and-key-properties-in-labels-and-extended-fields).
             *
             * Labels created by site contributors or 3rd-party apps
             * are automatically assigned to the `custom` namespace.
             */
            namespace: string;
        };
        /**
         * Details about the contact's last action in the site.
         */
        type LastActivity = {
            /**
             * Date and time of the last action.
             */
            activityDate: Date;
            /**
             * Contact's last action in the site.
             *
             * Some possible values:
             * `"GENERAL"`, `"CONTACT_CREATED"`, `"MEMBER_LOGIN"`, `"MEMBER_REGISTER"`,
             * `"MEMBER_STATUS_CHANGED"`, `"FORM_SUBMITTED"`, `"INBOX_FORM_SUBMITTED"`,
             * `"INBOX_PAYMENT_REQUEST_PAID"`, `"INBOX_MESSAGE_TO_CUSTOMER"`,
             * `"INBOX_MESSAGE_FROM_CUSTOMER"`, `"NEWSLETTER_SUBSCRIPTION_FORM_SUBMITTED"`,
             * `"NEWSLETTER_SUBSCRIPTION_UNSUBSCRIBE"`, `"ECOM_PURCHASE"`,
             * `"ECOM_CART_ABANDON"`, `"ECOM_CHECKOUT_BUYER"`, `"BOOKINGS_APPOINTMENT"`,
             * `"HOTELS_RESERVATION"`, `"HOTELS_PURCHASE"`, `"HOTELS_CONFIRMATION"`,
             * `"HOTELS_CANCEL"`, `"VIDEO_PURCHASE"`, `"VIDEO_RENT"`,
             * `"CASHIER_BUTTON_PURCHASE"`, `"ARENA_NEW_LEAD"`, `"EVENTS_RSVP"`,
             * `"INVOICE_PAY"`, `"INVOICE_OVERDUE"`, `"PRICE_QUOTE_ACCEPT"`,
             * `"PRICE_QUOTE_EXPIRE"`, `"RESTAURANTS_ORDER"`, `"RESTAURANTS_RESERVATION"`,
             * `"SHOUTOUT_OPEN"`, `"SHOUTOUT_CLICK"`, `"CONTACT_MERGED"`.
             */
            activityType: string;
        };
        /**
         * Contact's first and last name.
         */
        type Name = {
            /**
             * Contact's first name.
             */
            first?: string;
            /**
             * Contact's last name.
             */
            last?: string;
        };
        type Phone = {
            /**
             * Phone ID.
             */
            _id: string;
            /**
             * Phone type.
             *
             * `"UNTAGGED"` is shown as "Other" in the Contact List.
             *
             * One of:
             *
             * - `"UNTAGGED"`
             * - `"MAIN"`
             * - `"HOME"`
             * - `"MOBILE"`
             * - `"WORK"`
             * - `"FAX"`
             */
            tag: string;
            /**
             * [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.
             */
            countryCode?: string;
            /**
             * Phone number.
             */
            phone: string;
            /**
             * [ITU E.164-formatted](https://www.itu.int/rec/T-REC-E.164/)
             *  phone number.
             *  Automatically generated using `phone` and `countryCode`,
             *  as long as both of those values are valid.
             */
            e164Phone?: string;
            /**
             * Whether this is the contact's primary phone number.
             *  When changing `primary` to `true` for a phone,
             *  the contact's other phones become `false`.
             */
            primary: boolean;
        };
        type PhoneInfo = {
            /**
             * Phone type.
             *
             * `"UNTAGGED"` is shown as "Other" in the Contact List.
             *
             * One of:
             *
             * - `"UNTAGGED"`
             * - `"MAIN"`
             * - `"HOME"`
             * - `"MOBILE"`
             * - `"WORK"`
             * - `"FAX"`
             */
            tag?: string;
            /**
             * [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.
             */
            countryCode?: string;
            /**
             * Phone number.
             */
            phone?: string;
            /**
             * Whether this is the contact's primary phone number.
             *  When changing `primary` to `true` for a phone,
             *  the contact's other phones become `false`.
             */
            primary?: boolean;
        };
        /**
         * todo
         */
        type Picture = {
            /**
             * **Deprecated.** Use `profilePicture` instead.
             */
            image?: string;
            /**
             * **Deprecated.**
             */
            imageProvider?: string;
        };
        /**
         * Contact's primary phone and email.
         */
        type PrimaryInfo = {
            /**
             * Primary email address.
             *
             * This property reflects the email address in `contactInfo.emails`
             * where `primary` is `true`.
             */
            email?: string;
            /**
             * Primary phone number.
             *
             * This property reflects the phone number in `contactInfo.phones`
             * where `primary` is `true`.
             */
            phone?: string;
        };
        /**
         * Details about the contact's source.
         */
        type Source = {
            /**
             * Source type.
             *
             * Some possible values:
             * `"OTHER"`, `"ADMIN"`, `"WIX_APP"`, `"IMPORT"`, `"THIRD_PARTY"`,
             * `"WIX_BOOKINGS"`, `"WIX_CHAT"`, `"WIX_EMAIL_MARKETING"`, `"WIX_EVENTS"`,
             * `"WIX_FORMS"`, `"WIX_GROUPS"`, `"WIX_HOTELS"`, `"WIX_MARKET_PLACE"`,
             * `"WIX_MUSIC"`, `"WIX_RESTAURANTS"`, `"WIX_SITE_MEMBERS"`, `"WIX_STORES"`.
             */
            sourceType: string;
            /**
             * App ID, if the contact was created by an app.
             */
            appId: string;
        };
        /**
         * Street address object, with number and name in separate fields.
         */
        type StreetAddress = {
            /**
             * Street number.
             */
            number: string;
            /**
             * Street name.
             */
            name: string;
        };
        /**
         * Street address object, with number and name in separate fields.
         */
        type StreetAddressInfo = {
            /**
             * Street number.
             */
            number?: string;
            /**
             * Street name.
             */
            name?: string;
        };
    }
    /**
     * The Triggered Emails API is used to send triggered emails to your site's contacts and members.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm.TriggeredEmails.html#)
     */
    namespace TriggeredEmails {
        type TriggeredEmailOptions = {
            /**
             * An object with `key:value` pairs. Each
             *  `key` is a variable in the email template created in Triggered Emails, and its
             *  corresponding `value` is the value to insert into the template in place of the
             *  variable. The values must be strings.
             *
             * Example: `{ firstName: 'John', lastName: 'Doe' }`
             */
            variables: any;
        };
    }
}

// /types/common/wix-bookings.d.ts
/**
 * The wix-bookings module contains functionality for working with
 *  bookings from client-side code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings.html#)
 */
declare module 'wix-bookings' {
    /**
     * Books a service and processes payment for the service.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings.html#checkoutBooking)
     */
    function checkoutBooking(bookingInfo: BookingInfo, options?: PaymentOptions): Promise<BookingResult>;
    /**
     * Gets the valid checkout options for a service's slot.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings.html#getCheckoutOptions)
     */
    function getCheckoutOptions(checkoutOptionOptions: CheckoutOptionOptions): Promise<CheckoutOption[]>;
    /**
     * Gets the available slots for a specific service.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings.html#getServiceAvailability)
     */
    function getServiceAvailability(serviceId: string, options?: AvailabilityOptions): Promise<ServiceAvailability>;
    /**
     * An object that contains address information.
     */
    type Address = {
        /**
         * Full text address comprised of street name and number, city, subdivision, country, and postal code.
         */
        formatted: string;
        /**
         * Address coordinates.
         */
        location: AddressCoordinates;
        /**
         * Address street address.
         */
        streetAddress: StreetAddress;
        /**
         * Address city.
         */
        city: string;
        /**
         * Address subdivision, state, prefecture, or province.
         */
        subdivision: string;
        /**
         * Address country.
         */
        country: string;
        /**
         * Address postal code.
         */
        postalCode: string;
    };
    /**
     * An object that contains the geographic coordinates of the address.
     */
    type AddressCoordinates = {
        /**
         * Address latitude.
         */
        latitude: number;
        /**
         * Address longitude.
         */
        longitude: number;
    };
    /**
     * An object used when calling [`getServiceAvailability()`](#getServiceAvailability)
     *  containing options for which slots should be returned.
     */
    type AvailabilityOptions = {
        /**
         * Start date and time of the slots
         *  to be returned. Defaults to the current date and time.
         */
        startDateTime?: Date;
        /**
         * End date and time of the slots to
         *  be returned. Defaults to one week from `startDateTime`, which is one week
         *  from the current date and time if `startDateTime` is also omitted.
         */
        endDateTime?: Date;
    };
    /**
     * An object used when calling [`checkoutBooking()`](#checkoutBooking)
     *  containing information about the slot to be booked.
     */
    type BookingInfo = {
        /**
         * The slot to be booked.
         */
        slot: Slot;
        /**
         * List of form field values required to book the session.
         */
        formFields: FormField[];
        /**
         * Number of spots to book. Defaults to `1`.
         */
        numberOfSpots?: number;
    };
    /**
     * An object representing the result of a call to [`checkoutBooking()`](#checkoutBooking).
     */
    type BookingResult = {
        /**
         * ID of the booking that was checked out.
         */
        bookingId: string;
        /**
         * Status of the booking that was checked out.
         *  One of:
         *
         *  + `"Confirmed"`: Payment was successful or payment is to be done offline.
         *  + `"Pending Payment"`: Payment is pending.
         *  + `"Terminated"`: Payment failed or was cancelled.
         */
        status: string;
    };
    /**
     * An object describing the business location.
     */
    type BusinessLocation = {
        /**
         * Business location ID.
         */
        id: string;
        /**
         * Business location name.
         */
        name: string;
        /**
         * Business location description.
         */
        description: string;
        /**
         * An object describing the address.
         */
        address: Address;
    };
    /**
     * An object returned after calling [`getCheckoutOptions()`](#getCheckoutOptions)
     *  containing information about the available payment options for the service and the logged-in user.
     */
    type CheckoutOption = {
        /**
         * Type of the available payment option. Valid options are:
         *
         *  + `"wixPay_Online"` for online collections
         *  + `"wixPay_Offline"` for offline collections
         *  + `"package"` for a package-type pricing plan
         *  + `"membership"` for a membership-type pricing plan
         */
        type: string;
        /**
         * Name of the plan package or membership. For booking with pricing plans only.
         */
        planName?: string;
        /**
         * Order ID of the plan package or membership. For booking with pricing plans only.
         */
        planOrderId?: string;
        /**
         * ID of the benefit provided by the plan package. For booking with package-type pricing plans only.
         */
        benefitId?: string;
        /**
         * Number of sessions remaining in the plan package. For booking with package-type pricing plans only.
         */
        remainingCredits?: number;
        /**
         * Number of sessions initially provided with the plan package.  For booking with package-type pricing plans only.
         */
        totalCredits?: number;
        /**
         * Date by which the plan package or membership expires. For booking with pricing plans only.
         */
        planExpiration?: Date;
    };
    /**
     * An object used to request checkout options for the service. Currently, you can request the checkout options using the ID of a slot.
     */
    type CheckoutOptionOptions = {
        /**
         * Unique slot identifier.
         */
        slotId: string;
        /**
         * User ID for the customer making the booking. Used for retrieving valid payment plans for the customer for the selected slot.
         */
        userId: string;
    };
    /**
     * An object that defines a booking window for limiting when a member can book a slot. For example,
     *  you can prevent members from booking a service too far in advance, because perhaps the service might
     *  be discontinued by then. Or, you can prevent members from booking a service right before it starts, as
     *  this would make it hard to schedule resources.
     */
    type Constraints = {
        /**
         * Date from which a member is allowed to book a slot.
         */
        bookableFrom: Date;
        /**
         * Date until which a member is allowed to book a slot.
         */
        bookableUntil: Date;
    };
    /**
     * An object used when calling [`checkoutBooking()`](#checkoutBooking)
     *  containing values for form fields required to book the session.
     */
    type FormField = {
        /**
         * ID of the form field from the **form** property in the **Booking/Services** collection.
         */
        _id: string;
        /**
         * Form field value.
         */
        value: string;
    };
    /**
     * The location where a service is offered.
     */
    type Location = {
        /**
         * Location type. Valid options are:
         * - `"OWNER_BUSINESS"` The business address set by the owner. This type is set when choosing **Business Address** in the Service Details page of the dashboard, and populates the businessLocation object.
         * - `"OWNER_CUSTOM"` A custom address set by the owner. This type is set when choosing **Custom Location** in the Service Details page of the dashboard, and populates the `locationText` property.
         * - `"CUSTOM"` An address set for the individual booking, usually chosen by the customer and entered in the booking form.
         */
        type: string;
        /**
         * Text describing the location.
         */
        locationText: string;
        /**
         * An object describing the business location.
         */
        businessLocation: BusinessLocation;
    };
    /**
     * An object used when calling [`checkoutBooking()`](#checkoutBooking)
     *  containing information about the payment options.
     */
    type PaymentOptions = {
        /**
         * A coupon code to be used with the payment.
         */
        couponCode?: string;
        /**
         * Type of payment. Valid options are:
         *
         *   + `"wixPay_Online"` for online collections
         *   + `"wixPay_Offline"` for offline collections
         *   + `"package"` for a package-type pricing plan
         *   + `"membership"` for a membership-type pricing plan
         */
        paymentType: string;
    };
    /**
     * An object returned from [`getServiceAvailability()`](#getServiceAvailability)
     *  containing the available bookings slots.
     */
    type ServiceAvailability = {
        /**
         * List of available slots.
         */
        slots: Slot[];
    };
    /**
     * An object representing a booking slot.
     */
    type Slot = {
        /**
         * Unique slot identifier.
         */
        _id: string;
        /**
         * Starting date and time of the slot.
         */
        startDateTime: Date;
        /**
         * Ending date and time of the slot.
         */
        endDateTime: Date;
        /**
         * ID of the service that the slot belongs to.
         */
        serviceId: string;
        /**
         * Maximum number of participants that can book the service for this slot.
         */
        capacity: number;
        /**
         * Number of remaining spots that can be booked for the slot.
         */
        remainingSpots: number;
        /**
         * ID of the slot's staff member.
         */
        staffMemberId: string;
        /**
         * Whether the slot can be booked right now, meaning today's date is within the booking window defined by `constraints`.
         */
        bookable: boolean;
        /**
         * The dates between which the slot can be booked. The constraints define the booking window. The booking window prevents site members from booking way in advance or just right before the slot starts.
         */
        constraints: Constraints;
        /**
         * The location where this slot is offered.
         */
        location: Location;
    };
    /**
     * An object representing information about the street name and street number of an address.
     */
    type StreetAddress = {
        /**
         * Address street name.
         */
        name: string;
        /**
         * Address street number.
         */
        number: string;
    };
}

// /types/common/wix-animations.d.ts
/**
 * The wix-animations module contains functionality for working with
 *  animations.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-animations.html#)
 */
declare module 'wix-animations' {
    /**
     * Creates a new animation timeline.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-animations.html#timeline)
     */
    function timeline(timelineOptions?: TimeLineOptions): TimeLine;
    /**
     * An object containing options for creating a timeline.
     */
    type TimeLineOptions = {
        /**
         * Number of times the timeline repeats after it
         *  finishes playing all the animations in the timeline once.
         *
         *  For example, if `repeat` is `2`, the timeline plays a total of 3 times,
         *  the initial play plus 2 repetitions.
         *
         *  To repeat infinitely, pass a `repeat` value of `-1`.
         *
         *  Defaults to `0`, meaning the timeline plays only once.
         */
        repeat?: number;
        /**
         * Number of milliseconds to wait between
         *  repetitions.
         *
         *  For example, if `repeat` is `2` and `repeatDelay` is `1000`, the timeline plays
         *  the initial play, then waits for 1 second before it plays again, and then waits
         *  1 second again before the final play.
         *
         *  Defaults to `0`, meaning the each repetition plays immediately after the one
         *  that preceded it.
         */
        repeatDelay?: number;
        /**
         * Whether to reverse the animation play for each successive
         *  repetition.
         *
         *  For example, if `repeat` is `2` and the timeline contains the animations **A**,
         *  **B**, and **C** to be played one after the other, the animations will play in
         *  the following order:
         *
         *  + If `yoyo` is `false`:
         *
         *    **A** -> **B** -> **C** -> **A** -> **B** -> **C** -> **A** -> **B** -> **C**
         *  + If `yoyo` is `true`:
         *
         *    **A** -> **B** -> **C** -> **C** -> **B** -> **A** -> **A** -> **B** -> **C**
         *
         *
         *  Defaults to `false`.
         */
        yoyo?: boolean;
    };
    /**
     * An animation timeline.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-animations.TimeLine.html#)
     */
    interface TimeLine {
        /**
         * Adds an animation to a timeline.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-animations.TimeLine.html#add)
         */
        add(target: $w.Element | $w.Element[], animation: TimeLine.AnimationAttributes | TimeLine.AnimationAttributes[], offset?: number | string): TimeLine;
        /**
         * Sets an event handler that runs when the timeline completes playing.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-animations.TimeLine.html#onComplete)
         */
        onComplete(handler: Function): TimeLine;
        /**
         * Sets an event handler that runs when a the timeline repeats.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-animations.TimeLine.html#onRepeat)
         */
        onRepeat(handler: Function): TimeLine;
        /**
         * Sets an event handler that runs when the timeline completes playing
         *  in the reverse direction.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-animations.TimeLine.html#onReverseComplete)
         */
        onReverseComplete(handler: Function): TimeLine;
        /**
         * Sets an event handler that runs when the timeline starts playing.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-animations.TimeLine.html#onStart)
         */
        onStart(handler: Function): TimeLine;
        /**
         * Pauses a timeline.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-animations.TimeLine.html#pause)
         */
        pause(): TimeLine;
        /**
         * Plays a timeline forwards.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-animations.TimeLine.html#play)
         */
        play(): TimeLine;
        /**
         * Replays a timeline.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-animations.TimeLine.html#replay)
         */
        replay(): TimeLine;
        /**
         * Plays a timeline in reverse.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-animations.TimeLine.html#reverse)
         */
        reverse(): TimeLine;
    }
    /**
     * An animation timeline.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-animations.TimeLine.html#)
     */
    namespace TimeLine {
        /**
         * An object representing the attributes of an animation in an timeline.
         */
        type AnimationAttributes = {
            /**
             * Animation duration in milliseconds.
             */
            duration: number;
            /**
             * Number of milliseconds to delay before beginning the animation.
             */
            delay?: number;
            /**
             * Target opacity of the animated element or elements, from 0.0 to 1.0.
             */
            opacity?: number;
            /**
             * The target degree to rotate to, where a complete rotation
             *  is 360 degrees.
             *
             *  Note that the starting orientation of each element is determined by the rotation set in the
             *  Editor. If you did not rotate the element in the Editor, it begins at 0 degrees.
             *
             *  The direction of the rotation is determined by the current orientation of the animated
             *  element or elements, the target degree specified by the `rotate` attribute, and, optionally,
             *  the specified `rotateDirection` attribute.
             *
             *  + If the target degree is greater than the current rotation degree, the animation
             *    rotates clockwise.
             *
             *    For example, if an element starts at 0 degrees and `rotate` is `540`, it rotates clockwise
             *    one and a half rotations. Similarly, if an element starts at -540 degrees and `rotate` is `0`,
             *    it also rotates clockwise one and a half rotations.
             *  + If the target degree is less than the current rotation degree, the animation
             *    rotates counterclockwise.
             *
             *    For example, if an element starts at 0 degrees and `rotate` is `-540`, it rotates counterclockwise
             *    one and a half rotations. Similarly, if an element starts a 540 degrees and `rotate` is `0`,
             *    it also rotates counterclockwise one and a half rotations.
             *  + If a `rotateDirection` value is specified, that direction overrides the rules listed
             *    above.
             *
             *
             *  The `rotate` value is specified using one of the following formats:
             *
             *  + A number to specify the target degree to rotate to.
             *  + A `"+=X"` expression to specify a target degree is `X` number of degrees greater
             *    than the current orientation.
             *
             *    For example, if the current orientation is 540 degrees and `rotate` is `"+=90"`,
             *    the target degree is 630 and the rotation will be a quarter turn clockwise,
             *    unless the direction is overridden by specifying a `rotateDirection` value.
             *  + A `"-=X"` expression to specify a target degree is `X` number of degrees less
             *    than the current orientation.
             *
             *    For example, if the current orientation is 540 degrees and `rotate` is `"-=90"`,
             *    the target degree is 450 and the rotation will be a quarter turn counterclockwise,
             *    unless the direction is overridden by specifying a `rotateDirection` value.
             */
            rotate?: number | string;
            /**
             * Direction in which to rotate. Overrides the
             *  default rotation direction as explained in the `rotate` property.
             *
             *  Either `"cw"` to rotate clockwise or `"ccw"` to rotate counterclockwise.
             */
            rotateDirection?: string;
            /**
             * Target scale of the animated element or elements, where
             *  `1` is the original size.
             *
             *  For example, if `scale` is `.5`, the animated element or elements will shrink to
             *  half their original sizes and if `scale` is `2`, the animated element or elements
             *  will grow to double their original sizes.
             */
            scale?: number;
            /**
             * Target horizontal scale of the animated element or elements.
             *
             *  If a `scale` value is set, also setting a `scaleX` value overrides the horizontal
             *  scaling set use `scale`.
             */
            scaleX?: number;
            /**
             * Target vertical scale of the animated element or elements.
             *
             *  If a `scale` value is set, also setting a `scaleY` value overrides the vertical
             *  scaling set use `scale`.
             */
            scaleY?: number;
            /**
             * Horizontal pixel target to move the element or elements
             *  to horizontally.
             *
             *  One of the following formats:
             *
             *  + A positive number to specify a target pixel to the right, relative to the
             *    original position.
             *  + A negative number to specify a target pixel to the left, relative to the
             *    original position.
             *  + A `"+="` expression to specify a target pixel to the right, relative to the
             *    last animated position. For example, `"+=100"` moves 100 pixels to the right
             *    of wherever the element or elements are positioned when this specific animation
             *    begins.
             *  + A `"-="` expression to specify a target pixel to the left, relative to the
             *    last animated position. For example, `"-=100"` moves 100 pixels to the left
             *    of wherever the element or elements are positioned when this specific animation
             *    begins.
             */
            x?: number | string;
            /**
             * Vertical pixel target to move the element or elements
             *  to vertically.
             *
             *  One of the following formats:
             *
             *  + A positive number to specify a target pixel down, relative to the
             *    original position.
             *  + A negative number to specify a target pixel up, relative to the
             *    original position.
             *  + A `"+="` expression to specify a target pixel down, relative to the
             *    last animated position. For example, `"+=100"` moves 100 pixels down
             *    from wherever the element or elements are positioned when this specific animation
             *    begins.
             *  + A `"-="` expression to specify a target pixel up, relative to the
             *    last animated position.For example, `"-=100"` moves 100 pixels up
             *    from wherever the element or elements are positioned when this specific animation
             *    begins.
             */
            y?: number | string;
            /**
             * The animation motion acceleration or deceleration. Specifies
             * the rate of change of the animation attributes over time.
             *
             * One of:
             *
             *
             * | Ease In | Ease Out | Ease In-Out |
             * |---|---|---|
             * | `"easeInSine"` ![Ease In Sine](images/easeInSine.png "Ease In Sine") | `"easeOutSine"` ![Ease Out Sine](images/easeOutSine.png "Ease Out Sine") | `"easeInOutSine"` ![Ease In Sine](images/easeInOutSine.png "Ease In-Out Sine") |
             * | `"easeInQuad"` ![Ease In Quad](images/easeInQuad.png "Ease In Quad") | `"easeOutQuad"` ![Ease Out Quad](images/easeOutQuad.png "Ease Out Quad") | `"easeInOutQuad"` ![Ease In-Out Quad](images/easeInOutQuad.png "Ease In-Out Quad") |
             * | `"easeInCubic"` ![Ease In Cubic](images/easeInCubic.png "Ease In Cubic") | `"easeOutCubic"` ![Ease Out Cubic](images/easeOutCubic.png "Ease Out Cubic") | `"easeInOutCubic"` ![Ease In-Out Cubic](images/easeInOutCubic.png "Ease In-Out Cubic") |
             * | `"easeInQuart"` ![Ease In Quart](images/easeInQuart.png "Ease In Quart") | `"easeOutQuart"` ![Ease Out Quart](images/easeOutQuart.png "Ease Out Quart") | `"easeInOutQuart"` ![Ease In-Out Quart](images/easeInOutQuart.png "Ease In-Out Quart") |
             * | `"easeInQuint"` ![Ease In Quint](images/easeInQuint.png "Ease In Quint") | `"easeOutQuint"` ![Ease Out Quint](images/easeOutQuint.png "Ease Out Quint") | `"easeInOutQuint"` ![Ease In-Out Quint](images/easeInOutQuint.png "Ease In-Out Quint") |
             * | `"easeInExpo"` ![Ease In Expo](images/easeInExpo.png "Ease In Expo") | `"easeOutExpo"` ![Ease Out Expo](images/easeOutExpo.png "Ease Out Expo") | `"easeInOutExpo"` ![Ease In-Out Expo](images/easeInOutExpo.png "Ease In-Out Expo") |
             * | `"easeInCirc"` ![Ease In Circ](images/easeInCirc.png "Ease In Circ") | `"easeOutCirc"` ![Ease Out Circ](images/easeOutCirc.png "Ease Out Circ") | `"easeInOutCirc"` ![Ease In-Out Circ](images/easeInOutCirc.png "Ease In-Out Circ") |
             * | `"easeInBack"` ![Ease In Back](images/easeInBack.png "Ease In Back") | `"easeOutBack"` ![Ease Out Back](images/easeOutBack.png "Ease Out Back") | `"easeInOutBack"` ![Ease In-Out Back](images/easeInOutBack.png "Ease In-Out Back") |
             * | `"easeInElastic"` ![Ease In Elastic](images/easeInElastic.png "Ease In Elastic") | `"easeOutElastic"` ![Ease Out Elastic](images/easeOutElastic.png "Ease Out Elastic") | `"easeInOutElastic"` ![Ease In-Out Elastic](images/easeInOutElastic.png "Ease In-Out Elastic") |
             * | `"easeInBounce"` ![Ease In Bounce](images/easeInBounce.png "Ease In Bounce") | `"easeOutBounce"` ![Ease Out Bounce](images/easeOutBounce.png "Ease Out Bounce") | `"easeInOutBounce"` ![Ease In-Out Bounce](images/easeInOutBounce.png "Ease In-Out Bounce") |
             * | `"easeLinear"` ![Ease Linear](images/easeLinear.png "Ease Linear") | | |
             *
             *
             * Defaults to `"easeInSine"`.
             */
            easing?: string;
        };
    }
}

// /types/common/wix-users-backend.d.ts
/**
 * **Deprecated.**
 * The wix-users-backend module will continue to work, but a newer version is available at
 * [wix-members-backend](https://www.wix.com/velo/reference/wix-members-backend).
 * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.html#)
 */
declare module 'wix-users-backend' {
    /**
     * **Deprecated.**
     * This code will continue to work, but a newer version is available at
     * [wix-members-backend.badges](https://www.wix.com/velo/reference/wix-members-backend/badges).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.html#badges)
     */
    const badges: Badges;
    /**
     * **Deprecated.**
     * This object will continue to work, but a newer version is available at
     * [wix-members-backend.currentMember.getMember()](https://www.wix.com/velo/reference/wix-members-backend/currentmember/getmember).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.html#currentUser)
     */
    const currentUser: User;
    /**
     * **Deprecated.**
     * This code will continue to work, but a newer version is available at
     * [wix-members-backend.authorization](https://www.wix.com/velo/reference/wix-members-backend/authorization).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.html#roles)
     */
    const roles: Roles;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-members-backend.authentication.approveByEmail()](https://www.wix.com/velo/reference/wix-members-backend/authentication/approvebyemail).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.html#approveByEmail)
     */
    function approveByEmail(email: string): Promise<string>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-members-backend.authentication.approveByToken()](https://www.wix.com/velo/reference/wix-members-backend/authentication/approvebytoken).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.html#approveByToken)
     */
    function approveByToken(token: string): Promise<string>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-members-backend.authentication.blockByEmail()](https://www.wix.com/velo/reference/wix-members-backend/authentication/blockbyemail).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.html#blockByEmail)
     */
    function blockByEmail(email: string): Promise<void>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-members-backend.members.deleteMember()](https://www.wix.com/velo/reference/wix-members-backend/members/deletemember).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.html#deleteUser)
     */
    function deleteUser(userId: string): Promise<void>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-crm-backend.triggeredEmails.emailMember()](https://www.wix.com/velo/reference/wix-crm-backend/triggeredemails/emailmember).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.html#emailUser)
     */
    function emailUser(emailId: string, toUser: string, options?: TriggeredEmailOptions): Promise<void>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-members-backend.authentication.generateSessionToken()](https://www.wix.com/velo/reference/wix-members-backend/authentication/generatesessiontoken).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.html#generateSessionToken)
     */
    function generateSessionToken(email: string): Promise<string>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-members-backend.members.getMember()](https://www.wix.com/velo/reference/wix-members-backend/members/getmember).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.html#getUser)
     */
    function getUser(userId: string): Promise<RetrievedUser>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-members-backend.authentication.login()](https://www.wix.com/velo/reference/wix-members-backend/authentication/login).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.html#login)
     */
    function login(email: string, password: string): Promise<string>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-members-backend.authentication.register()](https://www.wix.com/velo/reference/wix-members-backend/authentication/register).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.html#register)
     */
    function register(email: string, password: string, options?: RegistrationOptions): Promise<RegistrationResult>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-members-backend.members.updateMember()](https://www.wix.com/velo/reference/wix-members-backend/members/updatemember).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.html#updateUserFields)
     */
    function updateUserFields(userId: string, userInfo: UserInfo): Promise<void>;
    /**
     * An object that contains information about a site member's address.
     */
    type Address = {
        /**
         * Address street address.
         */
        street: string;
        /**
         * Address city.
         */
        city: string;
        /**
         * Address country.
         */
        country: string;
        /**
         * Address postal code.
         */
        postalCode: string;
    };
    /**
     * An object that contains information about a site contact.
     */
    type ContactInfo = {
        /**
         * Contact's first name.
         */
        firstName?: string;
        /**
         * Contact's last name.
         */
        lastName?: string;
        /**
         * Contact's image source.
         */
        picture?: string;
        /**
         * List of contact's email addresses.
         *  When creating a contact, if no phone number is
         *  provided, at least one email address must be provided.
         */
        emails?: string[];
        /**
         * Email address the contact who is also
         *  a member uses to log into the system.
         */
        loginEmail?: string;
        /**
         * List of contact's phone numbers.
         *  When creating a contact, if no email is
         *  provided, at least one phone number must be provided.
         */
        phones?: string[];
        /**
         * List of contact's labels. [Labels](https://support.wix.com/en/article/creating-contact-labels)
         *  are used to organize contacts. When setting the `labels` property, you can
         *  only list labels that already exist in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).
         */
        labels?: string[];
        /**
         * Any
         *  number of custom fields. [Customs fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)
         *  are used to store additional information about your site's contacts. When
         *  setting a custom field, use key:value pairs where the key matches the names
         *  defined in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).
         *  You can only set values for custom fields that already exist in the Contacts
         *  application.
         */
        customFields?: string | number | Date;
    };
    /**
     * An object that contains information about a site member's picture.
     */
    type Picture = {
        /**
         * Member's image URL.
         */
        url: string;
    };
    /**
     * An object that contains information about a site registration.
     */
    type RegistrationOptions = {
        /**
         * Contact information.
         */
        contactInfo?: ContactInfo;
        /**
         * Sets the [privacy status](https://support.wix.com/en/article/member-privacy-settings-for-groups) of a new member upon registration.
         * One of:
         *
         *  + `"PUBLIC"`: Sets the new member status to public. A member whose status is public is a member of the site's community.
         *  + `"PRIVATE"`: Sets the new member status to private. A member whose status is private is not a member of the site's community. The default is set to private.
         */
        privacyStatus?: string;
    };
    /**
     * An object that contains information about the results of a site registration.
     */
    type RegistrationResult = {
        /**
         * Registration status. Either "Pending" or "Active".
         */
        status: string;
        /**
         * A token used to log in the current
         *  user as a site member. Pass the token from your backend code to client-side
         *  code and use it when calling the [applySessionToken()](wix-users.html#applySessionToken)
         *  function. The token is only available when `status` is "Active".
         */
        sessionToken?: string;
        /**
         * A token for approving the user as
         *  a site member using the [approveByToken()](wix-users-backend.html#approveByToken)
         *  function. The token is safe to pass via email or from client-side code to
         *  backend code. The token is only available when `status` is "Pending". The token
         *  expires 30 hours after it is created.
         */
        approvalToken?: string;
        /**
         * The user that has been registered.
         */
        user: User;
    };
    /**
     * An object that contains information about a site member.
     */
    type RetrievedUser = {
        /**
         * Member's unique id.
         */
        id: string;
        /**
         * The member's full name. This information is concatenated from the `firstName` and `lastName` properties. This field will not be returned if the member registered with an email but without a name.
         */
        memberName?: string;
        /**
         * Member's first name.
         */
        firstName: string;
        /**
         * Member's last name.
         */
        lastName: string;
        /**
         * The email address the member uses to log in to your site. This is the address they supplied when they signed up.
         */
        loginEmail: string;
        /**
         * The name the member specified on their profile.
         */
        nickname: string;
        /**
         * The member's URL-friendly name that is unique across your site. Typically this is made up of the member's email prefix.
         */
        slug: string;
        /**
         * The member's locale based on their last login.
         */
        language: string;
        /**
         * Indicates the member's current status, between `Applicant`, `Active`, `Blocked`.
         */
        status: string;
        /**
         * The date and time the member registered to the site.
         */
        creationDate: Date;
        /**
         * The last date and time the member's details were updated.
         */
        lastUpdateDate: Date;
        /**
         * The date and time when the member last logged in.
         */
        lastLoginDate: Date;
        /**
         * List of the member's email addresses.
         */
        emails: string[];
        /**
         * List of the member's phone numbers.
         */
        phones: string[];
        /**
         * List of the member's labels. [Labels](https://support.wix.com/en/article/creating-contact-labels)
         *  are used to organize contacts. When setting the `labels` property, you can
         *  only list labels that already exist in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).
         */
        labels: string[];
        /**
         * Member's picture.
         */
        picture: Picture;
        /**
         * Any
         *  number of custom fields. [Custom fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)
         *  are used to store additional information about your site's contacts. When
         *  setting a custom field, use key:value pairs where the key matches the display names
         *  in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).
         *  You can only set values for custom fields that already exist in the Contacts
         *  application.
         */
        customFields: string | number | Date;
    };
    /**
     * An object used when sending a Triggered Email.
     */
    type TriggeredEmailOptions = {
        /**
         * An object with `key:value` pairs where each
         *  `key` is a variable in the email template created in Triggered Emails and its
         *  corresponding `value` is the value to insert into the template in place of
         *  variable. The values must be strings.
         */
        variables: any;
    };
    /**
     * An object that contains information about a site member.
     */
    type UserInfo = {
        /**
         * Member's first name.
         */
        firstName?: string;
        /**
         * Member's last name.
         */
        lastName?: string;
        /**
         * The name the member specified on their profile.
         */
        nickname?: string;
        /**
         * The member's URL-friendly name that is unique across your site. Typically this is made up of the member's email prefix.
         */
        slug?: string;
        /**
         * List of the member's email addresses.
         */
        emails?: string[];
        /**
         * List of the member's phone numbers.
         */
        phones?: string[];
        /**
         * List of the member's labels. [Labels](https://support.wix.com/en/article/creating-contact-labels)
         *  are used to organize contacts. When setting the `labels` property, you can
         *  only list labels that already exist in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).
         */
        labels?: string[];
        /**
         * Member's picture.
         */
        picture?: Picture;
        /**
         * Any
         *  number of custom fields. [Custom fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)
         *  are used to store additional information about your site's contacts. When
         *  setting a custom field, use key:value pairs where the key matches the display names
         *  in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).
         *  You can only set values for custom fields that already exist in the Contacts
         *  application.
         */
        customFields?: string | number | Date;
    };
    /**
     * **Deprecated.**
     * This code will continue to work, but a newer version is available at
     * [wix-members-backend.badges](https://www.wix.com/velo/reference/wix-members-backend/badges).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.Badges.html#)
     */
    interface Badges {
        /**
         * **Deprecated.**
         * This function will continue to work, but a newer version is available at
         * [wix-members-backend.badges.assignMembers()](https://www.wix.com/velo/reference/wix-members-backend/badges/assignmembers).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.Badges.html#assignMembers)
         */
        assignMembers(badgeId: string, memberIds: string[]): Promise<string[]>;
        /**
         * **Deprecated.**
         * This function will continue to work, but a newer version is available at
         * [wix-members-backend.badges.createBadge()](https://www.wix.com/velo/reference/wix-members-backend/badges/createbadge).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.Badges.html#createBadge)
         */
        createBadge(badgeInfo: Badges.BadgeInfo): Promise<Badges.Badge>;
        /**
         * **Deprecated.**
         * This function will continue to work, but a newer version is available at
         * [wix-members-backend.badges.deleteBadge()](https://www.wix.com/velo/reference/wix-members-backend/badges/deletebadge).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.Badges.html#deleteBadge)
         */
        deleteBadge(badgeId: string): Promise<void>;
        /**
         * **Deprecated.**
         * This function will continue to work, but a newer version is available at
         * [wix-members-backend.badges.listMemberBadges()](https://www.wix.com/velo/reference/wix-members-backend/badges/listmemberbadges).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.Badges.html#listMemberBadges)
         */
        listMemberBadges(memberIds: string[]): Promise<Badges.MemberBadges[]>;
        /**
         * **Deprecated.**
         * This function will continue to work, but a newer version is available at
         * [wix-members-backend.badges.listMembers()](https://www.wix.com/velo/reference/wix-members-backend/badges/listmembers).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.Badges.html#listMembers)
         */
        listMembers(badgeId: string): Promise<string[]>;
        /**
         * **Deprecated.**
         * This function will continue to work, but a newer version is available at
         * [wix-members-backend.badges.removeMembers()](https://www.wix.com/velo/reference/wix-members-backend/badges/removemembers).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.Badges.html#removeMembers)
         */
        removeMembers(badgeId: string, memberIds: string[]): Promise<void>;
        /**
         * **Deprecated.**
         * This function will continue to work, but a newer version is available at
         * [wix-members-backend.badges.updateBadge()](https://www.wix.com/velo/reference/wix-members-backend/badges/updatebadge).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.Badges.html#updateBadge)
         */
        updateBadge(badgeId: string, badgeInfo: Badges.BadgeInfo): Promise<Badges.Badge>;
    }
    /**
     * **Deprecated.**
     * This code will continue to work, but a newer version is available at
     * [wix-members-backend.authorization](https://www.wix.com/velo/reference/wix-members-backend/authorization).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.Roles.html#)
     */
    interface Roles {
        /**
         * **Deprecated.**
         * This function will continue to work, but a newer version is available at
         * [wix-members-backend.authorization.assignRole()](https://www.wix.com/velo/reference/wix-members-backend/authorization/assignrole).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.Roles.html#assignRole)
         */
        assignRole(roleId: string, memberId: string, options?: Roles.WixRolesOptions): Promise<void>;
        /**
         * **Deprecated.**
         * This function will continue to work, but a newer version is available at
         * [wix-members-backend.authorization.removeRole()](https://www.wix.com/velo/reference/wix-members-backend/authorization/removerole).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.Roles.html#removeRole)
         */
        removeRole(roleId: string, memberId: string, options?: Roles.WixRolesOptions): Promise<void>;
    }
    /**
     * A site member.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.User.html#)
     */
    interface User {
        /**
         * **Deprecated.**
         * This property will continue to work, but a newer version is available at
         * [wix-members-backend.currentMember.getMember()](https://www.wix.com/velo/reference/wix-members-backend/currentmember/getmember).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.User.html#id)
         */
        readonly id: string;
        /**
         * **Deprecated.**
         * This property will continue to work, but a newer version is available at
         * [wix-members-backend.currentMember.getMember()](https://www.wix.com/velo/reference/wix-members-backend/currentmember/getmember).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.User.html#loggedIn)
         */
        readonly loggedIn: boolean;
        /**
         * **Deprecated.**
         * This function will continue to work, but a newer version is available at
         * [wix-members-backend.currentMember.getRoles()](https://www.wix.com/velo/reference/wix-members-backend/currentmember/getroles).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.User.html#role)
         */
        readonly role: string;
        /**
         * **Deprecated.**
         * This function will continue to work, but a newer version is available at
         * [wix-members-backend.currentMember.getMember()](https://www.wix.com/velo/reference/wix-members-backend/currentmember/getmember).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.User.html#getEmail)
         */
        getEmail(): Promise<string>;
        /**
         * Gets the current member's pricing plan.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.User.html#getPricingPlans)
         */
        getPricingPlans(): Promise<User.PricingPlan[]>;
        /**
         * **Deprecated.**
         * This function will continue to work, but a newer version is available at
         * [wix-members-backend.currentMember.getRoles()](https://www.wix.com/velo/reference/wix-members-backend/currentmember/getroles).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.User.html#getRoles)
         */
        getRoles(): Promise<User.UserRole[]>;
    }
    /**
     * **Deprecated.**
     * This code will continue to work, but a newer version is available at
     * [wix-members-backend.badges](https://www.wix.com/velo/reference/wix-members-backend/badges).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.Badges.html#)
     */
    namespace Badges {
        /**
         * An object representing a member badge.
         */
        type Badge = {
            /**
             * Badge ID.
             */
            id: string;
            /**
             * Badge title.
             */
            title: string;
            /**
             * Badge description.
             */
            description: string;
            /**
             * Background color of the badge as a hexadecimal rgb color value. The default color is `#796EFF` (purple).
             */
            backgroundColor: string;
            /**
             * Text color of the badge as a hexadecimal rgb color value. The default color is `#FFFFFF` (white).
             */
            textColor: string;
            /**
             * Badge icon as an SVG image. One of the following:
             *
             *   + An external web URL in the following format: `http(s)://`.
             *   + The [source URL](wix-media-backend.mediaManager.html#getFileUrl) for a Wix Media Manager file. Wix Media Manager file names in a `wix:image://...` format are not supported.
             */
            icon: string;
            /**
             * ID of the role that badge members are assigned to.
             */
            roleId: string;
            /**
             * Badge's unique URL as used in a dynamic page.
             */
            slug: string;
            /**
             * Date and time the badge was created.
             */
            createdDate: Date;
            /**
             * Date and time the badge was last updated.
             */
            updatedDate: Date;
        };
        /**
         * Information to use when creating or updating a badge.
         */
        type BadgeInfo = {
            /**
             * Badge title.
             */
            title: string;
            /**
             * Badge description.
             */
            description?: string;
            /**
             * Background color of the badge as a hexadecimal rgb color value. The default color is `#796EFF` (purple).
             */
            backgroundColor?: string;
            /**
             * Text color of the badge as a hexadecimal rgb color value. The default color is `#FFFFFF` (white).
             */
            textColor?: string;
            /**
             * Badge icon as an SVG image. One of the following:
             *
             *   + An external web URL in the following format: `http(s)://`.
             *   + The [source URL](wix-media-backend.mediaManager.html#getFileUrl) for a Wix Media Manager file. Wix Media Manager file names in a `wix:image://...` format are not supported.
             */
            icon?: string;
        };
        /**
         * An object representing the badges associated with a member.
         */
        type MemberBadges = {
            /**
             * Member ID.
             */
            memberId: string;
            /**
             * IDs of all badges assigned to the specified member.
             */
            badgeIds: string[];
        };
    }
    /**
     * **Deprecated.**
     * This code will continue to work, but a newer version is available at
     * [wix-members-backend.authorization](https://www.wix.com/velo/reference/wix-members-backend/authorization).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.Roles.html#)
     */
    namespace Roles {
        /**
         * An object that you pass as the `options` parameter that modifies how an operation is performed.
         */
        type WixRolesOptions = {
            /**
             * Prevents permission checks from running for the operation. Defaults to `false`.
             */
            suppressAuth: boolean;
        };
    }
    /**
     * A site member.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-users-backend.User.html#)
     */
    namespace User {
        /**
         * An object returned by the `getPricingPlans()` function representing a user's [pricing plans](https://support.wix.com/en/article/adding-and-setting-up-the-paid-plans-app).
         */
        type PricingPlan = {
            /**
             * The pricing plan's name.
             */
            name: string;
            /**
             * The pricing plan's start date.
             */
            startDate?: Date;
            /**
             * The pricing plan's expiry date.
             */
            expiryDate?: Date;
        };
        /**
         * An object returned by the `getRoles()` function representing a user's [roles](https://support.wix.com/en/article/creating-member-roles-6943237).
         */
        type UserRole = {
            /**
             * Role name as defined in the site's dashboard or one of "Admin" or "Member".
             */
            name: string;
            /**
             * Role description, if defined in the site's dashboard.
             */
            description?: string;
        };
    }
}

// /types/common/wix-stores-backend.d.ts
/**
 * The wix-stores-backend module contains functionality for working with your
 *  site's store from backend code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#)
 */
declare module 'wix-stores-backend' {
    /**
     * Adds media items by ID to a product.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#addProductMedia)
     */
    function addProductMedia(productId: string, media: Media[]): Promise<void>;
    /**
     * Adds media items by ID to product options.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#addProductMediaToChoices)
     */
    function addProductMediaToChoices(productId: string, mediaChoices: MediaChoice[]): Promise<void>;
    /**
     * Adds products by ID to a product collection.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#addProductsToCollection)
     */
    function addProductsToCollection(collectionId: string, productIds: string[]): Promise<void>;
    /**
     * Creates a new fulfillment in an order.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#createFulfillment)
     */
    function createFulfillment(orderId: string, fulfillment: FulfillmentInfo): Promise<NewFulfillmentAndOrder>;
    /**
     * Creates a new order.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#createOrder)
     */
    function createOrder(orderInfo: OrderInfo): Promise<Order>;
    /**
     * Creates a new product.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#createProduct)
     */
    function createProduct(productInfo: ProductInfo): Promise<Product>;
    /**
     * Subtracts a set number of items from inventory.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#decrementInventory)
     */
    function decrementInventory(items: DecrementInfo[]): Promise<void>;
    /**
     * Deletes a fulfillment from an order.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#deleteFulfillment)
     */
    function deleteFulfillment(orderId: string, fulfillmentId: string): Promise<Order>;
    /**
     * Deletes an existing product.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#deleteProduct)
     */
    function deleteProduct(productId: string): Promise<void>;
    /**
     * Deletes all options for an existing product.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#deleteProductOptions)
     */
    function deleteProductOptions(productId: string): Promise<void>;
    /**
     * Gets the specified abandoned shopping cart.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#getAbandonedCart)
     */
    function getAbandonedCart(cartId: string): Promise<AbandonedCart>;
    /**
     * Gets the current site visitor's shopping cart.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#getCurrentCart)
     */
    function getCurrentCart(): Promise<Cart>;
    /**
     * Generates a link to a PDF file containing information about one or more specified orders, up to 1000 orders.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#getOrdersLink)
     */
    function getOrdersLink(orderIds: string[]): Promise<LinkToPdf>;
    /**
     * Generates a link to a PDF file containing an order's packing slip.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#getPackingSlipLink)
     */
    function getPackingSlipLink(orderId: string): Promise<LinkToPdf>;
    /**
     * Gets the availability of a product based on the specified option choices.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#getProductOptionsAvailability)
     */
    function getProductOptionsAvailability(productId: string, choices: ProductChoices): Promise<ProductOptionsAvailability>;
    /**
     * Gets a product's available variants based on the specified product ID and either option choices or variant IDs.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#getProductVariants)
     */
    function getProductVariants(productId: string, options?: ProductVariantOptions): Promise<VariantItem[]>;
    /**
     * Adds a set number of items from inventory.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#incrementInventory)
     */
    function incrementInventory(items: IncrementInfo[]): Promise<void>;
    /**
     * Removes media items by ID from a product.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#removeProductMedia)
     */
    function removeProductMedia(productId: string, media: Media[]): Promise<void>;
    /**
     * Removes media items by ID from a product's options.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#removeProductMediaFromChoices)
     */
    function removeProductMediaFromChoices(productId: string, mediaChoices: MediaChoice[]): Promise<void>;
    /**
     * Removes products by ID from a collection.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#removeProductsFromCollection)
     */
    function removeProductsFromCollection(collectionId: string, productIds: string[]): Promise<void>;
    /**
     * Resets the data (such as the price and the weight) of all variants for a given product to their default values.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#resetVariantData)
     */
    function resetVariantData(productId: string): Promise<void>;
    /**
     * Sends a fulfillment email to a specified custom fulfiller of a line item in a given order.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#sendFulfillmentEmail)
     */
    function sendFulfillmentEmail(orderId: string, fulfillerId: string): Promise<void>;
    /**
     * Updates an existing fulfillment in an order.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#updateFulfillment)
     */
    function updateFulfillment(orderId: string, fulfillmentId: string, trackingInfo: TrackingInfo): Promise<Order>;
    /**
     * Updates an existing inventory item's variants by inventory ID.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#updateInventoryVariantFields)
     */
    function updateInventoryVariantFields(inventoryId: string, inventoryInfo: InventoryItemVariantInfo): Promise<void>;
    /**
     * Updates an existing inventory item's variants by product ID.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#updateInventoryVariantFieldsByProductId)
     */
    function updateInventoryVariantFieldsByProductId(productId: string, inventoryInfo: InventoryItemVariantInfo): Promise<void>;
    /**
     * Updates an existing product by ID.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#updateProductFields)
     */
    function updateProductFields(productId: string, productInfo: UpdateProductInfo): Promise<Product>;
    /**
     * Updates the data (such as the price and the weight) of an existing product variant in the store.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.html#updateVariantData)
     */
    function updateVariantData(productId: string, variantInfo: VariantInfo[]): Promise<VariantItem>;
    /**
     * An object representing an abandoned shopping cart.
     */
    type AbandonedCart = {
        /**
         * Unique identifier of the shopping cart.
         */
        _id: string;
        /**
         * Date and time the shopping cart was abandoned.
         */
        abandonTime: string;
        /**
         * Total price of all items in the cart.
         */
        total: string;
        /**
         * The buyer's information.
         */
        buyerInfo: BuyerInfo;
        /**
         * Log of updates related to the cart.
         */
        activities: Activity;
        /**
         * Status of the abandoned cart. Either `"ABANDONED"` or `"RECOVERED"`.
         */
        status: string;
    };
    /**
     * An array of objects representing a log of updates related to the order.
     */
    type Activities = {
        /**
         * Activity type.
         * One of:
         *
         *
         *  - `"MERCHANT_COMMENT"`
         *  - `"ORDER_PLACED"`
         *  - `"ORDER_PAID"`
         *  - `"ORDER_FULFILLED"`
         *  - `"ORDER_NOT_FULFILLED"`
         *  - `"DOWNLOAD_LINK_SENT"`
         *  - `"PICKUP_READY_EMAIL_SENT"`
         *  - `"TRACKING_NUMBER_ADDED"`
         *  - `"TRACKING_NUMBER_EDITED"`
         *  - `"TRACKING_LINK_WAS_SET"`
         *  - `"SHIPPING_CONFIRMATION_EMAIL_SENT"`
         *  - `"INVOICE_WAS_SET"`
         *  - `"INVOICE_WAS_REMOVED"`
         *  - `"INVOICE_WAS_SENT"`
         */
        type: string;
        /**
         * Who made the update (activity) to the order item.
         */
        author: string;
        /**
         * Comment added to the activity.
         */
        message: string;
        /**
         * The time the update (activity) occurred.
         */
        timestamp: string;
    };
    /**
     * An object representing a shopping cart activity.
     */
    type Activity = {
        /**
         * One of:
         *
         *  + `"CUSTOM_ACTIVITY"`
         *  + `"EMAIL_NOT_SENT"`
         *  + `"EMAIL_SENT"`
         *  + `"NOTIFICATION_SENT"`
         *  + `"SCHEDULED"`
         *  + `"TASK_CREATED"`
         *  + `"UNRECOGNIZED_TYPE"`
         */
        activityType: string;
        /**
         * Activity message.
         */
        message: string;
        /**
         * Time activity occurred.
         */
        timestamp: string;
        /**
         * Custom activity data.
         */
        customData: CustomData;
    };
    /**
     * An object representing address information.
     */
    type Address = {
        /**
         * Address in readable format.
         */
        formatted?: string;
        /**
         * City.
         */
        city: string;
        /**
         * Country.
         */
        country: string;
        /**
         * Main address information.
         */
        addressLine: string;
        /**
         * Additional address information (apt, floor, etc.), if used.
         */
        addressLine2?: string;
        /**
         * Alternative property for street name and number.
         */
        streetAddress?: StreetAddress;
        /**
         * Postal/zip code.
         */
        postalCode: string;
        /**
         * Subdivision of a country, such as a state or province.
         */
        subdivision: string;
    };
    /**
     * An object representing a coupon applied to the order.
     */
    type AppliedCoupon = {
        /**
         * Coupon ID.
         */
        couponId: string;
        /**
         * Coupon name.
         */
        name: string;
        /**
         * Coupon code (used by a buyer to apply the coupon).
         */
        code: string;
    };
    /**
     * An object representing an order's billing info.
     */
    type BillingInfo = {
        /**
         * Billing address.
         */
        address?: Address;
        /**
         * Last name.
         */
        lastName?: string;
        /**
         * First name.
         */
        firstName?: string;
        /**
         * Email address.
         */
        email?: string;
        /**
         * Phone number.
         */
        phone?: string;
        /**
         * Company name.
         */
        company?: string;
        /**
         * VAT information.
         */
        vatId?: VatId;
        /**
         * Deprecated: replaced with paymentProviderTransactionId.
         */
        externalTransactionId?: string;
        /**
         * Date and time the payment was made.
         */
        paidDate?: string;
        /**
         * Payment method.
         */
        paymentMethod?: string;
        /**
         * Unique transaction ID for the payment gateway.
         */
        paymentGatewayTransactionId?: string;
        /**
         * Unique ID for the payment provider.
         */
        paymentProviderTransactionId?: string;
    };
    /**
     * An object representing information about the buyer.
     */
    type BuyerInfo = {
        /**
         * Unique buyer's ID.
         */
        id: string;
        /**
         * Buyer's email address.
         */
        email: string;
        /**
         * Buyer's first name.
         */
        firstName: string;
        /**
         * Buyer's last name.
         */
        lastName: string;
        /**
         * Buyer's identity.
         * One of:
         *
         *  + `"MEMBER"`: A logged-in site member.
         *  + `"CONTACT"`: A Wix contact.
         *  + `"ADMIN"`: Buyer is the site owner.
         *  + `"VISITOR"`: Buyer is not logged in.
         */
        identityType: string;
        /**
         * Buyer's phone number.
         */
        phone?: string;
    };
    /**
     * An object representing a shopping cart.
     */
    type Cart = {
        /**
         * Unique identifier of the shopping cart.
         */
        _id: string;
        /**
         * Coupon applied in the shopping cart.
         */
        appliedCoupon: CartAppliedCoupon;
        /**
         * Cart billing address.
         */
        billingAddress: CartAddress;
        /**
         * The buyer's information.
         */
        buyerInfo: CartBuyerInfo;
        /**
         * Cart status. Either `"INCOMPLETE"` or `"COMPLETE"`.
         */
        status: string;
        /**
         * Currency of the shopping cart.
         */
        currency: Currency;
        /**
         * The shopping cart's shipping information.
         */
        shippingInfo: CartShippingInfo;
        /**
         * Items in the shopping cart.
         */
        lineItems: CartLineItem[];
        /**
         * The shopping cart's totals.
         */
        totals: OrderTotals;
        /**
         * The order's units of weight. One of: `"KG"`, `"LB"`, or `"UNSPECIFIED_WEIGHT_UNIT"`.
         */
        weightUnit: string;
    };
    /**
     * An object representing an address.
     */
    type CartAddress = {
        /**
         * First name.
         */
        firstName: string;
        /**
         * Last name.
         */
        lastName: string;
        /**
         * Email address.
         */
        email: string;
        /**
         * Phone number.
         */
        phone: string;
        /**
         * Address.
         */
        address: string;
    };
    /**
     * An object representing a coupon applied in a shopping cart.
     */
    type CartAppliedCoupon = {
        /**
         * Coupon code.
         */
        code: string;
        /**
         * Coupon unique identifier.
         */
        couponId: string;
        /**
         * Coupon name.
         */
        name: string;
        /**
         * Type of coupon.
         *  One of:
         *
         *  + `"BuyXGetY"`
         *  + `"FixedPriceAmount"`
         *  + `"FreeShipping"`
         *  + `"MoneyOffAmount"`
         *  + `"PercentOffRate"`
         */
        couponType: string;
        /**
         * Value of the coupon discount.
         */
        discountValue: string;
    };
    /**
     * An object representing a visitor who abandoned a shopping cart.
     */
    type CartBuyerInfo = {
        /**
         * Buyer's unique ID.
         */
        id: string;
        /**
         * Buyer's email address.
         */
        email: string;
        /**
         * Buyer's first name.
         */
        firstName: string;
        /**
         * Buyer's last name.
         */
        lastName: string;
        /**
         * Buyer's identity.
         *  One of:
         *
         *  + `"ADMIN"`: Buyer is the site owner.
         *  + `"MEMBER"`: Buyer is a logged-in site member.
         *  + `"VISITOR"`: Buyer is not logged in.
         *  + `"CONTACT"`: A contact has been created for the buyer.
         */
        identityType: string;
        /**
         * Buyer's phone number.
         */
        phone: string;
    };
    /**
     * An object representing a custom text field.
     */
    type CartCustomTextField = {
        /**
         * Field title.
         */
        title: string;
        /**
         * Field value.
         */
        value: string;
    };
    /**
     * An object representing a line item in a shopping cart.
     */
    type CartLineItem = {
        /**
         * Name of the line item.
         */
        name: string;
        /**
         * Notes about the line item.
         */
        notes: string;
        /**
         * Line item price.
         */
        price: string;
        /**
         * Line item product ID.
         */
        productId: string;
        /**
         * Line item quantity.
         */
        quantity: number;
        /**
         * Line item stock keeping unit.
         */
        sku: string;
        /**
         * Total price charged to the customer for all line items after any applicable discounts.
         */
        totalPrice: string;
        /**
         * Line item weight.
         */
        weight: string;
        /**
         * Type of the line item.
         *  One of:
         *
         *  + `"DIGITAL"`: Digital item.
         *  + `"PHYSICAL"`: Physical item.
         *  + `"CUSTOM_AMOUNT_ITEM"`: Item with a custom price.
         *  + `"UNSPECIFIED"`: Type can't be classified due to an error.
         */
        lineItemType: string;
        /**
         * Line item options.
         */
        options: Option[];
        /**
         * Media item.
         */
        mediaItem: CartMediaItem;
        /**
         * Custom text.
         */
        customTextFields: CartCustomTextField[];
        /**
         * Cart line item ID.
         */
        id: number;
    };
    /**
     * An object representing a line item's primary media.
     */
    type CartMediaItem = {
        /**
         * Media item source for media uploaded to Wix (wix:image, wix:video or external URL).
         */
        src: string;
        /**
         * Media item type. Currently only `"IMAGE"` type supported.
         */
        type: string;
    };
    /**
     * An object representing shipping information.
     */
    type CartShippingInfo = {
        /**
         * Shipment address.
         */
        shippingAddress?: CartAddress;
        /**
         * Pickup address.
         */
        pickupInfo?: CartAddress;
    };
    /**
     * An object representing information about the sales channel that submitted this order.
     */
    type ChannelInfo = {
        /**
         * Order ID from an external system (such as eBay or Amazon).
         */
        externalOrderId?: string;
        /**
         * URL to the order in the external system (such as eBay or Amazon).
         */
        externalOrderUrl?: string;
        /**
         * Sales channel that submitted the order.
         * One of:
         *
         *
         *  + `"WEB"`: Wix online store.
         *  + `"POS"`: Point of sale.
         *  + `"EBAY"`: eBay.
         *  + `"OTHER_PLATFORM"`: Order imported from another system (such as Cart2Cart).
         *  + `"WIX_APP_STORE"`: Order created via the Wix mobile app.
         */
        type: string;
    };
    /**
     * An object representing the choice for a product variant.
     */
    type Choice = {
        /**
         * Product options to use when creating or updating the
         *  product. The object contains key:value pairs where the key is the
         *  option name and the value is the chosen option value.
         */
        choices: any;
    };
    /**
     * An object representing the choice for a product variant.
     */
    type Choices = {
        /**
         * Option name.
         */
        option: string;
        /**
         * Choice name.
         */
        choice: string;
    };
    /**
     * An object representing billing information for creating an order.
     */
    type CreateOrderBillingInfo = {
        /**
         * Billing address.
         */
        address: Address;
        /**
         * Last name.
         */
        lastName?: string;
        /**
         * First name.
         */
        firstName?: string;
        /**
         * Email address.
         */
        email?: string;
        /**
         * Phone number.
         */
        phone?: string;
        /**
         * Company name.
         */
        company?: string;
        /**
         * VAT information.
         */
        vatId?: VatId;
        /**
         * Payment method.
         */
        paymentMethod?: string;
        /**
         * Unique transaction ID for the payment gateway.
         */
        paymentGatewayTransactionId?: string;
        /**
         * Unique ID for the payment provider.
         */
        paymentProviderTransactionId?: string;
    };
    /**
     * An object representing buyer information for creating an order.
     */
    type CreateOrderBuyerInfo = {
        /**
         * Unique buyer's ID.
         */
        id: string;
        /**
         * Buyer's identity.
         * One of:
         *
         *  + `"MEMBER"`: A logged-in site member.
         *  + `"CONTACT"`: A Wix contact.
         */
        identityType: string;
    };
    /**
     * An object representing a line item for creating an order.
     */
    type CreateOrderLineItem = {
        /**
         * Custom text.
         */
        customTextFields?: CustomTextField[];
        /**
         * Line item product ID.
         */
        productId?: string;
        /**
         * Type of line item.
         *  One of:
         *
         *
         *  - `"DIGITAL"`: Digital item.
         *  - `"PHYSICAL"`: Physical item.
         *  - `"CUSTOM_AMOUNT_ITEM"`: Item with a custom price.
         */
        lineItemType?: string;
        /**
         * Line item's primary media item.
         */
        mediaItem?: CreateOrderMediaItem;
        /**
         * Name of the line item.
         */
        name: string;
        /**
         * Notes about the line item.
         */
        notes?: string;
        /**
         * Line item options.
         */
        options?: Option[];
        /**
         * Line item quantity.
         */
        quantity: number;
        /**
         * Line item stock keeping unit.
         */
        sku?: string;
        /**
         * Line item weight.
         */
        weight?: number;
        /**
         * Line item's name, translated into the customer's language.
         */
        translatedName?: string;
        /**
         * Line item's discount amount.
         */
        discount?: number;
        /**
         * Line item's total amount of tax applied.
         */
        tax?: number;
        /**
         * Price information.
         */
        priceData: CreateOrderLineItemPriceData;
        /**
         * Tax group ID.
         */
        taxGroupId?: string;
        /**
         * Line item's fulfiller ID.
         */
        fulfillerId?: string;
        /**
         * Line item's variant ID.
         */
        variantId?: string;
    };
    /**
     * An object representing an line item's price information for creating an order.
     */
    type CreateOrderLineItemPriceData = {
        /**
         * Price of the item.
         */
        price: number;
        /**
         * Whether the price includes tax.
         */
        taxIncludedInPrice?: boolean;
    };
    /**
     * An object representing a line item's primary media item for creating an order.
     */
    type CreateOrderMediaItem = {
        /**
         * Image description for accessibility purposes.
         */
        altText?: string;
        /**
         * Media item source (wix:image or external URL).
         */
        src?: string;
    };
    /**
     * An object representing an order's totals for creating an order.
     */
    type CreateOrderTotals = {
        /**
         * Total calculated discount amount.
         */
        discount?: number;
        /**
         * Total shipping price, including tax.
         */
        shipping?: number;
        /**
         * Subtotal of all the order's line items, excluding tax.
         */
        subtotal: number;
        /**
         * Total amount of tax.
         */
        tax?: number;
        /**
         * Total price.
         */
        total: number;
    };
    /**
     * An object representing a currency.
     */
    type Currency = {
        /**
         * The currency code.
         */
        currency: string;
        /**
         * The currency symbol.
         */
        symbol: string;
    };
    /**
     * An object representing custom activity data.
     */
    type CustomData = {
        /**
         * Activity namespace.
         */
        namespace: string;
        /**
         * JSON object containing custom data.
         */
        customValue: any;
    };
    /**
     * An object representing a custom field added by the customer during the checkout process.
     */
    type CustomField = {
        /**
         * Custom field's title.
         */
        title: string;
        /**
         * Title translated into the buyer's language.
         */
        translatedTitle: string;
        /**
         * Custom field's text.
         */
        value: string;
    };
    /**
     * An object representing a custom text field.
     */
    type CustomTextField = {
        /**
         * Field title.
         */
        title: string;
        /**
         * Field value.
         */
        value: string;
    };
    type DecrementInfo = {
        /**
         * Variant ID.
         */
        variantId: string;
        /**
         * Number to decrement inventory by.
         */
        decrementBy: number;
        /**
         * Product ID. If `inventoryId` is not passed, this field is required.
         */
        productId: string;
        /**
         * Inventory item ID. If `productId` is not passed, this field is required.
         */
        inventoryId: string;
    };
    /**
     * An object representing a discount applied to the order.
     */
    type Discount = {
        /**
         * Information about an applied coupon.
         */
        appliedCoupon: AppliedCoupon;
    };
    /**
     * An object representing information about the identity of the order initiator.
     * Occasionally, the person that completes the order isn't the buyer. For example, this occurs when an order is created using a point of sale terminal.
     */
    type EnteredBy = {
        /**
         * ID of the order initiator.
         */
        id: string;
        /**
         * Order was created by one of the following:
         *
         *
         *   + `"USER"`: Wix user who performed a POS transaction on behalf of the buyer.
         *   + `"MEMBER"`: Logged-in site member.
         *   + `"CONTACT"`: A Wix contact.
         */
        identityType: string;
    };
    /**
     * An object representing order fulfillment details.
     */
    type Fulfillment = {
        /**
         * Unique ID automatically generated upon fulfillment.
         */
        id: string;
        /**
         * Date and time of fulfillment.
         */
        dateCreated: string;
        /**
         * Information about the line items in the fulfilled order.
         */
        lineItems: FulfillmentLineItem[];
        /**
         * Tracking information for a fulfilled order.
         */
        trackingInfo?: TrackingInfo;
    };
    /**
     * An object representing new fulfillment details.
     */
    type FulfillmentInfo = {
        /**
         * Information about the line items in the fulfilled order.
         */
        lineItems: FulfillmentLineItem[];
        /**
         * Tracking information for a fulfilled order.
         */
        trackingInfo?: TrackingInfo;
    };
    /**
     * An object representing information about a fulfillment's line items.
     */
    type FulfillmentLineItem = {
        /**
         * Line item's position in the list of line items.
         */
        index: number;
        /**
         * Number of units of this line item. On creation, if this field is left empty, the new fulfillment will automatically include all items of this line item that have not already been linked to a fulfillment.
         *
         * If the order does not have the requested quantity of line items available to add to this fulfillment, the fulfillment will not be created and an error will be returned. This property will always have a value when returned.
         */
        quantity?: number;
    };
    type IncrementInfo = {
        /**
         * Variant ID.
         */
        variantId: string;
        /**
         * Number to increment inventory by.
         */
        incrementBy: number;
        /**
         * Product ID. If `inventoryId` is not passed, this field is required.
         */
        productId: string;
        /**
         * Inventory item ID. If `productId` is not passed, this field is required.
         */
        inventoryId: string;
    };
    /**
     * An object representing an inventory item for a product variant in a store.
     */
    type InventoryItem = {
        /**
         * Unique identifier for the inventory item.
         */
        _id: string;
        /**
         * Deprecated: use productId.
         */
        externalId: string;
        /**
         * Product ID.
         */
        productId: string;
        /**
         * Indicates whether the on-hand inventory quantity is tracked for the inventory item's variants. If true, you can update the actual number of variants available. If false, you can indicate if a variant is in stock.
         */
        trackQuantity: boolean;
        /**
         * Inventory item's variants.
         */
        variants: InventoryItemVariantItem[];
        /**
         * Date the inventory item was last updated.
         */
        _updatedDate: string;
    };
    type InventoryItemVariantInfo = {
        /**
         * Indicates whether the on-hand inventory quantity is tracked for the inventory item's variants. If true, you can update the actual number of variants available. If false, you can indicate if a variant is in stock.
         */
        trackQuantity: boolean;
        /**
         * Inventory item variants.
         */
        variants: InventoryItemVariantItem[];
    };
    /**
     * An object representing an inventory item's variant.
     */
    type InventoryItemVariantItem = {
        /**
         * Unique inventory item's variant ID.
         */
        variantId: string;
        /**
         * Whether the variant is in stock at the store. Used when `trackQuantity` is false. If `trackQuantity` is true, `inStock` is based on the actual tracked `quantity`.
         */
        inStock: boolean;
        /**
         * In-stock quantity at the store. Used when `trackQuantity` is true. If `trackQuantity` is false, undefined.
         */
        quantity: number;
    };
    /**
     * An object representing an line item's price information.
     */
    type LineItemPriceData = {
        /**
         * Price of the item.
         */
        price: number;
        /**
         * Total price charged to the customer (per line item) after calculation of quantity and discount.
         */
        totalPrice: number;
        /**
         * Whether the price includes tax.
         */
        taxIncludedInPrice: boolean;
    };
    /**
     * An object with the link to a PDF file.
     */
    type LinkToPdf = {
        /**
         * URL to a PDF file.
         */
        link: string;
    };
    /**
     * An object representing the media item for a product.
     */
    type Media = {
        /**
         * Deprecated.
         */
        mediaId: string;
        /**
         * Deprecated.
         */
        url: string;
        /**
         * Media item source for media uploaded to Wix (wix:image, wix:video or external URL).
         */
        src: string;
        /**
         * A choice of the product variant.
         */
        choice: Choice;
    };
    /**
     * An object representing the media item for a product's choices.
     */
    type MediaChoice = {
        /**
         * Deprecated. See `mediaSources`.
         */
        mediaIds: string[];
        /**
         * Media item source for media uploaded to Wix (wix:image or wix:video).
         */
        mediaSources: string[];
        /**
         * Option name.
         */
        option: string;
        /**
         * Choice name.
         */
        choice: string;
    };
    /**
     * An object representing a media item.
     */
    type MediaItem = {
        /**
         * Media item title.
         */
        title: string;
        /**
         * Media item description.
         */
        description: string;
        /**
         * Media items type. Currently only `IMAGE` type supported.
         */
        type: string;
        /**
         * Media item source for media uploaded to Wix (wix:image, wix:video or external URL).
         */
        src: string;
        /**
         * Thumbnail URL for videos only.
         */
        thumbnail?: string;
    };
    /**
     * An object representing order fulfillment details.
     */
    type NewFulfillmentAndOrder = {
        /**
         * ID for the newly created fulfillment.
         */
        id: string;
        /**
         * Updated order.
         */
        order: Order;
    };
    /**
     * An object representing a line item option.
     */
    type Option = {
        /**
         * Name of the product option.
         */
        option: string;
        /**
         * Selected option.
         */
        selection: string;
    };
    /**
     * An object representing an order.
     */
    type Order = {
        /**
         * Unique order ID.
         */
        _id: string;
        /**
         * Date and time the order was updated.
         */
        _updatedDate: string;
        /**
         * The site's displayed language.
         */
        buyerLanguage: string;
        /**
         * Shopping cart ID.
         */
        cartId?: string;
        /**
         * Channel information.
         */
        channelInfo: ChannelInfo;
        /**
         * Identity of the order's initiator.
         */
        enteredBy: EnteredBy;
        /**
         * Billing information.
         */
        billingInfo?: BillingInfo;
        /**
         * Buyer information.
         */
        buyerInfo: BuyerInfo;
        /**
         * A note added by the buyer.
         */
        buyerNote?: string;
        /**
         * Date and time the order was created.
         */
        _dateCreated: string;
        /**
         * Order currency.
         */
        currency: string;
        /**
         * The order's current fulfillment status (whether the order received a tracking number or was delivered/picked up).
         * One of:
         *
         *  + `"NOT_FULFILLED"`: Order is not yet fulfilled.
         *  + `"FULFILLED"`: Order was fulfilled successfully.
         *  + `"CANCELED"`: Order was canceled.
         *  + `"PARTIALLY_FULFILLED"`: Order was partially fulfilled. For example, when only some of the order's items were fulfilled.
         */
        fulfillmentStatus: string;
        /**
         * Whether or not the order was archived.
         */
        archived: boolean;
        /**
         * Log of updates related to the order.
         */
        activities: Activities[];
        /**
         * Running order number.
         */
        number: number;
        /**
         * Current status of the payment.
         * One of:
         *
         *  + `"NOT_PAID"`: Payment was not made.
         *  + `"PAID"`: Order was successfully paid for.
         *  + `"PARTIALLY_REFUNDED"`: Order was partially refunded.
         *  + `"FULLY_REFUNDED"`: Order was refunded in full.
         */
        paymentStatus: string;
        /**
         * Shipping information.
         */
        shippingInfo?: OrderShippingInfo;
        /**
         * Order items.
         */
        lineItems: OrderLineItem[];
        /**
         * Order totals.
         */
        totals: Totals;
        /**
         * The unit in which the order's weight is measured. Either `"KG"` or `"LB"`. If not provided, the site's default weight unit is used.
         */
        weightUnit?: string;
        /**
         * Custom field information.
         */
        customField?: CustomField;
        /**
         * Order fulfillment information.
         */
        fulfillments: Fulfillment[];
        /**
         * Discount information.
         */
        discount?: Discount;
        /**
         * Refund information.
         */
        refunds?: Refund[];
        /**
         * Subscription information. Omitted unless the order is a subscription.
         * Learn more about [selling product subscriptions](https://support.wix.com/en/article/wix-stores-selling-product-subscriptions).
         */
        subscriptionInfo?: SubscriptionInfo;
    };
    /**
     * An object representing information for creating an order.
     */
    type OrderInfo = {
        /**
         * Shopping cart ID.
         */
        cartId?: string;
        /**
         * The language displayed to the buyer. If not provided, the site's default language is used.
         */
        buyerLanguage?: string;
        /**
         * Channel information.
         */
        channelInfo: ChannelInfo;
        /**
         * Billing information.
         */
        billingInfo: CreateOrderBillingInfo;
        /**
         * Buyer information. Only pass these fields if you want to override the buyer identity e.g. when creating an order on behalf of a contact or member.
         */
        buyerInfo?: CreateOrderBuyerInfo;
        /**
         * A note added by the buyer.
         */
        buyerNote?: string;
        /**
         * Order currency. If not provided, the site's default currency is used.
         */
        currency?: string;
        /**
         * Current status of the payment.
         * One of:
         *
         *  + `"NOT_PAID"`: Payment was not made.
         *  + `"PAID"`: Order was successfully paid for.
         */
        paymentStatus: string;
        /**
         * Shipping information.
         */
        shippingInfo: OrderShippingInfo;
        /**
         * Order items.
         */
        lineItems: CreateOrderLineItem[];
        /**
         * Order totals.
         */
        totals: CreateOrderTotals;
        /**
         * The unit in which the order's weight is measured. Either `"KG"` or `"LB"`. If not provided, the site's default weight unit is used.
         */
        weightUnit?: string;
        /**
         * Information about a custom field.
         */
        customField?: CustomField;
        /**
         * Discount information.
         */
        discount?: Discount;
    };
    /**
     * An object representing a line item in an order.
     */
    type OrderLineItem = {
        /**
         * Custom text.
         */
        customTextFields?: CustomTextField[];
        /**
         * Line item product ID.
         */
        productId?: string;
        /**
         * Type of line item.
         *  One of:
         *
         *
         *  - `"DIGITAL"`: Digital item.
         *  - `"PHYSICAL"`: Physical item.
         *  - `"CUSTOM_AMOUNT_ITEM"`: Item with a custom price.
         */
        lineItemType?: string;
        /**
         * Information about the line item's primary media item.
         */
        mediaItem: OrderMediaItem;
        /**
         * Name of the line item.
         */
        name: string;
        /**
         * Notes about the line item.
         */
        notes?: string;
        /**
         * Line item options.
         */
        options?: Option[];
        /**
         * Deprecated: see priceData.
         */
        price: number;
        /**
         * Line item quantity.
         */
        quantity: number;
        /**
         * Line item stock keeping unit.
         */
        sku?: string;
        /**
         * Deprecated: see priceData.
         */
        totalPrice: number;
        /**
         * Line item weight.
         */
        weight?: number;
        /**
         * Line item index.
         */
        index?: number;
        /**
         * Line item's name, translated into the customer's language.
         */
        translatedName?: string;
        /**
         * Line item's discount amount.
         */
        discount?: number;
        /**
         * Line item's total amount of tax applied.
         */
        tax?: number;
        /**
         * Price information.
         */
        priceData: LineItemPriceData;
        /**
         * Tax group ID.
         */
        taxGroupId?: string;
        /**
         * Line item's fulfiller ID.
         */
        fulfillerId?: string;
        /**
         * Line item's variant ID.
         */
        variantId?: string;
    };
    /**
     * An object representing a line item's primary media item.
     */
    type OrderMediaItem = {
        /**
         * Image description for accessibility purposes.
         */
        altText?: string;
        /**
         * Media item source (wix:image or external URL).
         */
        src: string;
        /**
         * Media item type. Currently only `IMAGE` type supported.
         */
        type: string;
    };
    /**
     * An object representing an order's shipping information.
     */
    type OrderShippingInfo = {
        /**
         * Expected date of delivery.
         */
        deliverByDate?: string;
        /**
         * Delivery option name.
         */
        deliveryOption?: string;
        /**
         * Estimated time until delivery.
         */
        estimatedDeliveryTime?: string;
        /**
         * Shipment details (empty if order was designated for pickup).
         */
        shipmentDetails: ShipmentDetails;
        /**
         * Pickup details (empty if order was designated for delivery).
         */
        pickupDetails?: PickupDetails;
        /**
         * Shipping region.
         */
        shippingRegion?: string;
    };
    /**
     * An object representing an order's totals.
     */
    type OrderTotals = {
        /**
         * The subtotal of all the order's line items, excluding tax.
         */
        subtotal: number;
        /**
         * The total shipping price, including tax.
         */
        shipping: number;
        /**
         * The total amount of tax.
         */
        tax: string;
        /**
         * The total calculated discount amount.
         */
        discount: number;
        /**
         * The total price.
         */
        total: number;
        /**
         * The total weight of the order's items.
         */
        weight: number;
        /**
         * The total quantity of the the order's line items.
         */
        quantity: number;
    };
    /**
     * An object representing paging options.
     */
    type PagingOptions = {
        /**
         * Maximum number of variants to retrieve. Defaults to 300.
         */
        limit: number;
        /**
         * Number of variants to skip before the retrieved variants. Defaults to 0.
         */
        skip: number;
    };
    /**
     * An object representing an order's pickup details.
     */
    type PickupDetails = {
        /**
         * Pickup instructions.
         */
        pickupInstructions?: string;
        /**
         * Pickup address.
         */
        pickupAddress?: Address;
        /**
         * First name.
         */
        firstName?: string;
        /**
         * Last name.
         */
        lastName?: string;
        /**
         * Email address.
         */
        email?: string;
        /**
         * Phone number.
         */
        phone?: string;
    };
    /**
     * An object representing a product in a store.
     */
    type Product = {
        /**
         * Product ID.
         */
        _id: string;
        /**
         * Date product was last updated.
         */
        _updatedDate: string;
        /**
         * Product name.
         */
        name: string;
        /**
         * Product description.
         */
        description: string;
        /**
         * Main product media item URL (wix:image or https).
         */
        mainMedia: string;
        /**
         * List of product media items.
         */
        mediaItems: MediaItem[];
        /**
         * Product stock keeping unit value. Must be unique.
         */
        sku: string;
        /**
         * Deprecated. Use `ribbon` instead.
         */
        ribbons: ProductRibbon[];
        /**
         * Product currency.
         */
        currency: string;
        /**
         * Product price.
         *  The price must be greater than its discount.
         *  The product price is propagated to the product's newly-created variants. Product variants whose prices have been updated directly are not affected by changes to the product price.
         */
        price: number;
        /**
         * Discounted product price.
         */
        discountedPrice: number;
        /**
         * Product price formatted with the currency.
         */
        formattedPrice: string;
        /**
         * Discounted product price formatted with currency symbol.
         */
        formattedDiscountedPrice: string;
        /**
         * ID for the inventory item.
         */
        inventoryItemId: string;
        /**
         * Product discount.
         */
        discount: ProductDiscount;
        /**
         * Indicates whether inventory is tracked for the product.
         */
        trackInventory: boolean;
        /**
         * Indicates whether the product is in stock.
         */
        inStock: boolean;
        /**
         * Number of units currently in stock.
         */
        quantityInStock: number;
        /**
         * Additional product information sections.
         */
        additionalInfoSections: ProductAdditionalInfoSection[];
        /**
         * All the available options for a store product.
         */
        productOptions: ProductOptions;
        /**
         * Product page relative URL.
         */
        productPageUrl: string;
        /**
         * Indicates whether product variants are managed. Can be set to true only if the product has options. Once set to true, can be reset to false only if no variants exist. Use [`getProductVariants()`](wix-stores.html#getProductVariants) to check if variants exist. You cannot set `manageVariants` to true if more than 300 variants are defined.
         */
        manageVariants: boolean;
        /**
         * List of product customization fields.
         */
        customTextFields: ProductCustomTextFields[];
        /**
         * Product type.
         */
        productType: string;
        /**
         * Product slug.
         */
        slug: string;
        /**
         * Product weight.
         */
        weight: string;
        /**
         * Whether the product is visible to site visitors and appears in Content Manager collections.
         */
        visible: boolean;
        /**
         * Product variants.
         */
        variants: VariantItem[];
        /**
         * Custom SEO data for the product. Learn more [about SEO](https://support.wix.com/en/search?term=seo).
         */
        seoData: SeoData;
        /**
         * Details of the product's price per unit.
         */
        pricePerUnitData: pricePerUnitData;
        /**
         * Price per unit.
         */
        pricePerUnit: number;
        /**
         * Price per unit formatted with currency symbol.
         */
        formattedPricePerUnit: string;
        /**
         * Product ribbon. Used to highlight relevant information about a product. For example, `"Sale"`, `"New Arrival"`, `"Sold Out"`.
         */
        ribbon: string;
        /**
         * Product brand. Including a brand name can help improve your site’s [visibility on search engines](https://support.wix.com/en/article/adding-brand-names-to-boost-product-page-seo-in-wix-stores).
         */
        brand: string;
    };
    /**
     * An object representing an additional info section for a store product.
     */
    type ProductAdditionalInfoSection = {
        /**
         * Section title.
         */
        title: string;
        /**
         * Section description.
         */
        description: string;
    };
    /**
     * An object representing a product variant's option choices.
     */
    type ProductChoices = {
        /**
         * Value of the choice. This key name is dependent on the product option. For example, if a product has a size option, this
         *  key value will be something like `"Size"` and its value will be something like
         *  `"Large"`.
         *
         *  `optionKey` is not case-sensitive. Therefore the values for the option keys `"Size"`, `"SIZE"`, and `"size"` are combined.
         */
        optionKey: string;
    };
    /**
     * An object representing a custom text field for a store product.
     */
    type ProductCustomTextFields = {
        /**
         * Product customization field title.
         */
        title: string;
        /**
         * Maximum length of product customization field in characters.
         */
        maxLength: string;
    };
    /**
     * An object representing a product discount.
     */
    type ProductDiscount = {
        /**
         * Discount type. Required.
         *
         *
         *
         *  One of:
         *
         *
         *
         *  - `"AMOUNT"`
         *
         *  - `"PERCENT"`
         *
         *  - `"NONE"`
         */
        type: string;
        /**
         * Discount value. The discount value cannot be greater than the price of the product or the variant.
         */
        value: string;
    };
    /**
     * An object representing information for creating or updating a product in a store.
     */
    type ProductInfo = {
        /**
         * Product name. Limited to 80 characters.
         */
        name: string;
        /**
         * Product description.
         */
        description?: string;
        /**
         * Product stock keeping unit value. Must be unique.
         */
        sku?: string;
        /**
         * Product price.
         *  The price must be greater than its discount.
         *  The product price is propagated to the product's newly-created variants. Product variants whose prices have been updated directly are not affected by changes to the product price.
         */
        price: number;
        /**
         * An object representing a product discount.
         */
        discount?: ProductDiscount;
        /**
         * An object representing all the available options for a store product.
         */
        productOptions?: ProductOptionsInfo;
        /**
         * Indicates whether product variants can be managed. Can be set to true only if the product has options. Once set to true, can be reset to false only if no variants exist. Use [`getProductVariants()`](wix-stores.html#getProductVariants) to check if variants exist.  You cannot set `manageVariants` to true if more than 300 variants are defined.
         */
        manageVariants?: boolean;
        /**
         * Product type. Currently, only creating physical products (`"productType": "physical"`) is supported via the API.
         */
        productType?: string;
        /**
         * Product weight.
         */
        weight?: number;
        /**
         * Whether the product is visible to site visitors. Setting this to false removes the product from Content Manager collections.
         */
        visible?: boolean;
        /**
         * Custom SEO data for the product. Learn more [about SEO](https://support.wix.com/en/search?term=seo).
         */
        seoData?: SeoData;
        /**
         * Details for the product's price per unit. If one of the `pricePerUnitData` fields is provided, all must be provided.
         */
        pricePerUnitData?: pricePerUnitData;
        /**
         * Product ribbon. Used to highlight relevant information about a product.
         * For example, `"Sale"`, `"New Arrival"`, `"Sold Out"`. Limited to 30 characters.
         */
        ribbon?: string;
        /**
         * Product brand.
         * Including a brand name can help improve your site’s [visibility on search engines](https://support.wix.com/en/article/adding-brand-names-to-boost-product-page-seo-in-wix-stores).
         * Limited to 50 characters.
         */
        brand?: string;
    };
    /**
     * An object representing an option for a store product.
     */
    type ProductOption = {
        /**
         * Option type. Either `"color"` or `"drop_down"`.
         */
        optionType: string;
        /**
         * Option name.
         */
        name: string;
        /**
         * Option choices.
         *  Each option can contain between one and thirty choices.
         */
        choices: ProductOptionsChoice[];
    };
    /**
     * An object representing an option for a store product.
     */
    type ProductOptionInfo = {
        /**
         * Option name.
         */
        name: string;
        /**
         * Option choices.
         *  Each option can contain between one and thirty choices.
         */
        choices: ProductOptionsChoiceInfo[];
    };
    /**
     * An object representing all the available options for a store product, such as "Size" or "Color."
     */
    type ProductOptions = {
        /**
         * Name of the option. This key name
         *  is dependent on the options added to the product. For example, if a product has a size
         *  option, this key will be something like `"Size"`.
         *
         *  `optionKey` is not case-sensitive. Therefore the values for the option keys `"Size"`, `"SIZE"`,
         *  and `"size"` are combined.
         *
         *  An option cannot be changed if it has choices and variants. To change an option, reset its variants
         *  with [`resetVariantData()`](wix-stores-backend.html#resetVariantData).
         *  For each option, you can define a maximum of six choices.
         */
        optionKey: ProductOption;
    };
    /**
     * An object returned by the `getProductOptionsAvailability()` function representing the availability of a product.
     */
    type ProductOptionsAvailability = {
        /**
         * Whether the product with the specified option choices is available for purchase.
         */
        availableForPurchase: boolean;
        /**
         * An object representing all the available options for a store product.
         */
        productOptions: ProductOptions;
        /**
         * Main product media item (image or video) URL.
         */
        mainMedia: string;
        /**
         * List of product media items.
         */
        mediaItems: MediaItem[];
        /**
         * The variant of the product selected using the specified option choices if there is one.
         */
        selectedVariant: ProductOptionsAvailabilitySelectedVariant;
    };
    /**
     * An object representing the product variant selected using the `getProductOptionsAvailability()` function.
     */
    type ProductOptionsAvailabilitySelectedVariant = {
        /**
         * Product variant stock keeping unit value.
         */
        sku: string;
        /**
         * Product variant currency.
         */
        currency: string;
        /**
         * Product variant price. The variant price must be greater than its discount.
         */
        price: number;
        /**
         * Discounted product variant price.
         */
        discountedPrice: number;
        /**
         * Product variant price formatted with the currency.
         */
        formattedPrice: string;
        /**
         * Discounted product variant price formatted with the currency.
         */
        formattedDiscountedPrice: string;
        /**
         * Whether the product variant is visible to site visitors and appears in Content Manager collections.
         */
        visible: boolean;
        /**
         * Whether the product variant is in stock.
         */
        inStock: boolean;
        /**
         * Product variant weight.
         */
        weight: number;
    };
    /**
     * An object representing an options choice for a store product, such as choice "Small" for the option "Size."
     */
    type ProductOptionsChoice = {
        /**
         * Choice value.
         */
        value: number;
        /**
         * Choice description.
         */
        description: number;
        /**
         * Whether the product with this choice is in stock.
         */
        inStock: boolean;
        /**
         * Whether the product with this option is visible.
         */
        visible: boolean;
    };
    type ProductOptionsChoiceInfo = {
        /**
         * Choice value.
         */
        value: number;
        /**
         * Choice description.
         */
        description: number;
    };
    /**
     * An object representing all the available options for a store product.
     */
    type ProductOptionsInfo = {
        /**
         * Name of the option. This key name is dependent on the options added to the product. For example, if a product has a color or size option, this key will be something like `"Color"` or `"Size"`.
         *
         *  `optionKey` is not case-sensitive. Therefore the values for the option keys `"Size"`, `"SIZE"`, and `"size"` are combined.
         */
        optionKey: ProductOptionInfo;
    };
    /**
     * An object representing a ribbon for a store product.
     */
    type ProductRibbon = {
        /**
         * Ribbon text.
         */
        text: string;
    };
    /**
     * An object representing the selection of specific variants of a product. Use only one of
     *  `choices` or `variantIds`.
     */
    type ProductVariantOptions = {
        /**
         * The choices the retrieved variants will have.
         */
        choices?: ProductChoices;
        /**
         * IDs of variants to retrieve.
         */
        variantIds?: string[];
    };
    /**
     * An object representing order refund information.
     */
    type Refund = {
        /**
         * Refund ID.
         */
        id: string;
        /**
         * Date and time the refund was issued.
         */
        dateCreated: string;
        /**
         * Refund amount.
         */
        amount: string;
        /**
         * Reason for refund.
         */
        reason?: string;
        /**
         * Whether the refund was made externally.
         * An external refund refers to refunds processed by the payment provider and reported to the Wix orders system.
         * When the value is false, the refund was reported to the Wix orders system, but was not processed by the payment provider.
         */
        externalRefund: boolean;
        /**
         * Payment provider transaction ID.
         */
        paymentProviderTransactionId?: string;
    };
    /**
     * An object representing custom SEO data for the product.
     */
    type SeoData = {
        /**
         * SEO tag details.
         */
        tags: SeoTag[];
    };
    /**
     * An object representing the product's custom SEO tags.
     */
    type SeoTag = {
        /**
         * SEO tag type.
         * Supported values:
         *
         *  + `"title"`
         *  + `"meta"`
         *  + `"script"`
         *  + `"link"`
         */
        type: string;
        /**
         * The props property holds an object of `{"key": "value"}` pairs where the key is one of the SEO tag's properties (name, content, rel, href, etc.)
         * and the value is the value for that property. `{"name": "description", "content": "The description itself."}`.
         */
        props: object;
        /**
         * Tag metadata. For example, `{"height": 300, "width": 240}`.
         */
        meta: object;
        /**
         * Tag inner content. For example, ` inner content `.
         */
        children: string;
        /**
         * Whether the tag is a custom tag.
         */
        custom: boolean;
        /**
         * Whether the tag is disabled.
         */
        disabled: boolean;
    };
    /**
     * An object representing an order's shipping details.
     */
    type ShipmentDetails = {
        /**
         * Shipping address.
         */
        address?: Address;
        /**
         * Last name.
         */
        lastName?: string;
        /**
         * First name.
         */
        firstName?: string;
        /**
         * Email address.
         */
        email?: string;
        /**
         * Phone number.
         */
        phone?: string;
        /**
         * Company name.
         */
        company?: string;
        /**
         * VAT information.
         */
        vatId?: VatId;
        /**
         * Deprecated: see priceData.
         */
        tax?: number;
        /**
         * Deprecated: see priceData.
         */
        discount?: number;
        /**
         * Shipment price information.
         */
        priceData?: ShipmentPriceData;
    };
    /**
     * An object representing shipment price information.
     */
    type ShipmentPriceData = {
        /**
         * Price of the item.
         */
        price: number;
        /**
         * Whether the price includes tax.
         */
        taxIncludedInPrice: boolean;
    };
    /**
     * An object representing information about the street name and street number of an address.
     */
    type StreetAddress = {
        /**
         * Address street name.
         */
        name: string;
        /**
         * Address street number.
         */
        number: string;
    };
    type SubscriptionInfo = {
        /**
         * ID of the current subscription's cycle.
         */
        id: string;
        /**
         * Current billing cycle number. For example, if the subscription is in the 3rd month of a 4-month subscription, the value is   `3`.
         */
        cycleNumber: number;
        /**
         * Subscription settings.
         */
        subscriptionSettings: SubscriptionSettings;
        /**
         * Subscription option information.
         */
        subscriptionOptionInfo: SubscriptionOptionInfo;
    };
    type SubscriptionOptionInfo = {
        /**
         * Subscription option ID.
         */
        id: string;
        /**
         * Subscription option title. For example, "Coffee of the week".
         */
        title: string;
        /**
         * Subscription option description. For example, "Subscribe and get 15% off".
         */
        description: string;
    };
    type SubscriptionSettings = {
        /**
         * Frequency of recurring payment.
         * Supported values:
         *
         *  + `"DAY"`
         *  + `"WEEK"`
         *  + `"MONTH"`
         *  + `"YEAR"`
         */
        frequency: string;
        /**
         * Whether subscription is renewed automatically at the end of each period.
         * If the value is `true`, then `billingCycles` is ignored.
         */
        autoRenewal: boolean;
        /**
         * Number of billing cycles before subscription ends. Ignored if `autoRenewal: false`.
         */
        billingCycles: number;
    };
    /**
     * An object representing an order's totals.
     */
    type Totals = {
        /**
         * Total calculated discount amount.
         */
        discount?: number;
        /**
         * Total quantity of the the order's line items.
         */
        quantity: number;
        /**
         * Total shipping price, including tax.
         */
        shipping?: number;
        /**
         * Subtotal of all the order's line items, excluding tax.
         */
        subtotal: number;
        /**
         * Total amount of tax.
         */
        tax?: number;
        /**
         * Total price.
         */
        total: number;
        /**
         * Total weight of the order's items.
         */
        weight: number;
    };
    /**
     * An object representing tracking information for a fulfilled order.
     */
    type TrackingInfo = {
        /**
         * Tracking number.
         */
        trackingNumber: string;
        /**
         * Shipping provider.
         */
        shippingProvider: string;
        /**
         * Link to the tracking summary of the fulfilled order.
         */
        trackingLink: string;
    };
    /**
     * An object representing information for creating or updating a product in a store.
     */
    type UpdateProductInfo = {
        /**
         * Product name. Limited to 80 characters.
         */
        name?: string;
        /**
         * Product description.
         */
        description?: string;
        /**
         * Product stock keeping unit value. Must be unique.
         */
        sku?: string;
        /**
         * Product price.
         *  The price must be greater than its discount.
         *  The product price is propagated to the product's newly-created variants. Product variants whose prices have been updated directly are not affected by changes to the product price.
         */
        price?: number;
        /**
         * Details for the product's price per unit. If one of the `pricePerUnitData` fields is provided, all must be provided.
         */
        pricePerUnitData?: pricePerUnitData;
        /**
         * An object representing a product discount.
         */
        discount?: ProductDiscount;
        /**
         * An object representing all the available options for a store product.
         */
        productOptions?: ProductOptionsInfo;
        /**
         * Indicates whether product variants can be managed. Can be set to true only if the product has options. Once set to true, can be reset to false only if no variants exist. Use [`getProductVariants()`](wix-stores.html#getProductVariants) to check if variants exist.  You cannot set `manageVariants` to true if more than 300 variants are defined.
         */
        manageVariants?: boolean;
        /**
         * Product type.
         */
        productType?: string;
        /**
         * Product weight.
         */
        weight?: number;
        /**
         * Whether the product is visible to site visitors. Setting this to false removes the product from Content Manager collections.
         */
        visible?: boolean;
        /**
         * Custom SEO data for the product. Learn more [about SEO](https://support.wix.com/en/search?term=seo).
         */
        seoData?: SeoData;
        /**
         * Product ribbon. Used to highlight relevant information about a product.
         * For example, `"Sale"`, `"New Arrival"`, `"Sold Out"`. Limited to 30 characters.
         */
        ribbon?: string;
        /**
         * Product brand.
         * Including a brand name can help improve your site’s [visibility on search engines](https://support.wix.com/en/article/adding-brand-names-to-boost-product-page-seo-in-wix-stores).
         * Limited to 50 characters.
         */
        brand?: string;
    };
    /**
     * An object containing variant information.
     */
    type VariantData = {
        /**
         * Variant currency.
         */
        currency: string;
        /**
         * Variant price. The variant price must be greater than its discount.
         */
        price: number;
        /**
         * Discounted variant price.
         */
        discountedPrice: number;
        /**
         * Price per unit.
         */
        pricePerUnit: number;
        /**
         * Price per unit formatted with currency symbol.
         */
        formattedPricePerUnit: string;
        /**
         * Variant weight.
         */
        weight: number;
        /**
         * Variant stock keeping unit value.
         */
        sku: string;
        /**
         * Whether the variant is visible to site visitors and appears in Content Manager collections.
         */
        visible: boolean;
    };
    /**
     * An object containing variant information for update.
     */
    type VariantInfo = {
        /**
         * Variant currency.
         */
        currency: string;
        /**
         * Variant price. The variant price must be greater than its discount.
         */
        price: number;
        /**
         * Discounted variant price.
         */
        discountedPrice: number;
        /**
         * Variant weight.
         */
        weight: number;
        /**
         * Variant stock keeping unit value.
         */
        sku: string;
        /**
         * Whether the variant is visible to site visitors and appears in Content Manager collections.
         */
        visible: boolean;
        /**
         * Specific product options to update.
         *  The `choices` object contains key:value pairs where the key is the
         *  option name and the value is the chosen option value.
         *  For example, to update the blue t-shirt in size large, you would pass something like this: `{"Color": "Blue", "Size": "Large"}`.
         */
        choices: any;
    };
    /**
     * An object representing a product variant item.
     */
    type VariantItem = {
        /**
         * Unique variant ID.
         */
        _id: string;
        /**
         * The choices of the retrieved variant.
         */
        choices: ProductChoices;
        /**
         * Variant information.
         */
        variant: VariantData;
    };
    /**
     * An object representing product variants.
     */
    type Variants = {
        /**
         * List of variant items that match the specified choices or variant IDs.
         */
        items: VariantItem[];
        /**
         * Number of items in the current results page.
         */
        length: number;
        /**
         * Total number of variants with the specified choices.
         */
        totalCount: number;
    };
    /**
     * An object representing value added tax (VAT) information.
     */
    type VatId = {
        /**
         * VAT number.
         */
        number: string;
        /**
         * VAT type. Either `"CPF"` or `"CNPJ"`.
         */
        type: string;
    };
    /**
     * An object representing a product's price per unit data.
     */
    type pricePerUnitData = {
        /**
         * Product’s total weight, volume, or area. For example, if your product weighs 1 kilogram, the `totalQuantity` is `1`.
         */
        totalQuantity: number;
        /**
         * Total measurement unit of weight, volume, or area. For example, if your product weighs 1 kilogram, the `totalMeasurementUnit` is `"KG"`.
         *
         * Make sure the measurement system (metric or imperial) matches the one in your site's [Regional Settings](https://support.wix.com/en/article/changing-your-sites-regional-settings).
         *
         * Supported metric values:
         * `"ML"`, `"CL"`, `"L"`, `"CBM"`, `"MG"`, `"G"`, `"KG"`, `"MM"`, `"CM"`, `"M"`, `"SQM"`.
         *
         * Supported imperial values:
         * `"OZ"`, `"LB"`, `"FLOZ"`, `"PT"`, `"QT"`, `"GAL"`, `"IN"`, `"FT"`, `"YD"`, `"SQFT"`.
         */
        totalMeasurementUnit: string;
        /**
         * Product’s base weight, volume, or area. For example, for a product weighing 1 kilogram, the `baseQuantity` could be `100` (grams).
         */
        baseQuantity: number;
        /**
         * Base measurement unit of weight, volume, or area. For example, if your product weighs 1 kilogram, and the `baseQuantity` is `100` grams, `baseMeasurementUnit` is `"G"`.
         *
         * Make sure the measurement system (metric or imperial) matches the one in your site's [Regional Settings](https://support.wix.com/en/article/changing-your-sites-regional-settings).
         *
         * Supported metric values:
         * `"ML"`, `"CL"`, `"L"`, `"CBM"`, `"MG"`, `"G"`, `"KG"`, `"MM"`, `"CM"`, `"M"`, `"SQM"`.
         *
         * Supported imperial values:
         * `"OZ"`, `"LB"`, `"FLOZ"`, `"PT"`, `"QT"`, `"GAL"`, `"IN"`, `"FT"`, `"YD"`, `"SQFT"`.
         */
        baseMeasurementUnit: string;
    };
    /**
     * Events that are fired from a Wix Store.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#)
     */
    interface Events {
        /**
         * An event that fires when a visitor abandons a shopping cart.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onCartAbandoned)
         */
        onCartAbandoned(event: Events.CartAbandonedEvent): void;
        /**
         * An event that fires when a visitor completes a purchase from a shopping cart.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onCartCompleted)
         */
        onCartCompleted(event: Events.CartCompletedEvent): void;
        /**
         * An event that fires when a cart is created.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onCartCreated)
         */
        onCartCreated(event: Events.CartCreatedEvent): void;
        /**
         * An event that fires when a visitor completes a purchase from an abandoned shopping cart.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onCartRecovered)
         */
        onCartRecovered(event: Events.CartRecoveredEvent): void;
        /**
         * An event that fires when a product collection is created.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onCollectionCreated)
         */
        onCollectionCreated(event: Events.CollectionCreatedEvent): void;
        /**
         * An event that fires when a product collection is deleted.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onCollectionDeleted)
         */
        onCollectionDeleted(event: Events.CollectionDeletedEvent): void;
        /**
         * An event that fires when a product collection is updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onCollectionUpdated)
         */
        onCollectionUpdated(event: Events.CollectionUpdatedEvent): void;
        /**
         * An event that fires when an order fulfillment is created.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onFulfillmentCreated)
         */
        onFulfillmentCreated(event: Events.FulfillmentCreatedEvent): void;
        /**
         * An event that fires when an order fulfillment is deleted.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onFulfillmentDeleted)
         */
        onFulfillmentDeleted(event: Events.FulfillmentDeletedEvent): void;
        /**
         * An event that fires when an order fulfillment is updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onFulfillmentUpdated)
         */
        onFulfillmentUpdated(event: Events.FulfillmentUpdatedEvent): void;
        /**
         * An event that fires when an inventory item's information is updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onInventoryItemUpdated)
         */
        onInventoryItemUpdated(event: Events.InventoryItemUpdatedEvent): void;
        /**
         * An event that fires when the inventory information of a product variant is updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onInventoryVariantUpdated)
         */
        onInventoryVariantUpdated(event: Events.InventoryVariantUpdatedEvent): void;
        /**
         * An event that fires when a new order is placed.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onNewOrder)
         */
        onNewOrder(event: Events.NewOrderEvent): void;
        /**
         * An event that fires when an order is canceled.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onOrderCanceled)
         */
        onOrderCanceled(event: Events.OrderCanceledEvent): void;
        /**
         * An event that fires when an order is marked as paid.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onOrderPaid)
         */
        onOrderPaid(event: Order): void;
        /**
         * An event that fires when an order is refunded.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onOrderRefunded)
         */
        onOrderRefunded(event: Events.OrderRefundedEvent): void;
        /**
         * An event that fires when a product is created.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onProductCreated)
         */
        onProductCreated(event: Events.ProductCreatedEvent): void;
        /**
         * An event that fires when a product is deleted.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onProductDeleted)
         */
        onProductDeleted(event: Events.ProductDeletedEvent): void;
        /**
         * An event that fires when a product is updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onProductUpdated)
         */
        onProductUpdated(event: Events.ProductUpdatedEvent): void;
        /**
         * An event that fires when variant information for a product is updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#onVariantsUpdated)
         */
        onVariantsUpdated(event: Events.VariantsUpdatedEvent): void;
    }
    /**
     * Events that are fired from a Wix Store.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-stores-backend.Events.html#)
     */
    namespace Events {
        /**
         * An object representing a shopping cart that was abandoned.
         */
        type CartAbandonedEvent = {
            /**
             * Time the abandoned cart was abandoned.
             */
            abandonTime: string;
            /**
             * Information about the visitor who abandoned the shopping cart.
             */
            buyerInfo: BuyerInfo;
            /**
             * ID of the shopping cart that was abandoned.
             */
            cartId: string;
            /**
             * URL of the abandoned cart's checkout page.
             */
            checkoutUrl: string;
            /**
             * ID of coupon used in the abandoned cart.
             */
            couponId: string;
            /**
             * Time the abandoned cart was created.
             */
            creationTime: string;
            /**
             * Number of items in the abandoned cart.
             */
            itemsCount: number;
            /**
             * Abandoned cart totals.
             */
            totals: Events.CartTotals;
        };
        /**
         * An object representing a shopping cart that was completed.
         */
        type CartCompletedEvent = {
            /**
             * ID of the shopping cart that was completed.
             */
            cartId: string;
            /**
             * Time the shopping cart was completed.
             */
            completedTime: string;
            /**
             * The buyer's information.
             */
            buyerInfo: BuyerInfo;
            /**
             * Message from the buyer.
             */
            buyerNote: string;
            /**
             * Coupon applied in the shopping cart.
             */
            appliedCoupon: CartAppliedCoupon;
            /**
             * Billing address.
             */
            billingAddress: Address;
            /**
             * Currency of the shopping cart.
             */
            currency: Currency;
            /**
             * The order's units of weight. One of: `"KG"`, `"LB"`, or `"UNSPECIFIED_WEIGHT_UNIT"`.
             */
            weightUnit: string;
            /**
             * The shopping cart's totals.
             */
            totals: OrderTotals;
            /**
             * The shopping cart's shipping information.
             */
            shippingInfo: CartShippingInfo;
        };
        /**
         * An object representing a shopping cart that was created.
         */
        type CartCreatedEvent = {
            /**
             * ID of the shopping cart that was created.
             */
            cartId: string;
            /**
             * Time the shopping cart was created.
             */
            creationTime: string;
            /**
             * The buyer's information.
             */
            buyerInfo: BuyerInfo;
            /**
             * The order's units of weight. One of: `"KG"`, `"LB"`, or `"UNSPECIFIED_WEIGHT_UNIT"`.
             */
            weightUnit: string;
            /**
             * Currency of the shopping cart.
             */
            currency: Currency;
            /**
             * The shopping cart's totals.
             */
            totals: OrderTotals;
        };
        /**
         * An object representing a shopping cart that was recovered.
         */
        type CartRecoveredEvent = {
            /**
             * Time the recovered cart was abandoned.
             */
            abandonedTime: string;
            /**
             * ID of the shopping cart that was abandoned.
             */
            cartId: string;
            /**
             * Time the recovered cart was originally created.
             */
            creationTime: string;
            /**
             * Time the cart was recovered.
             */
            recoveredTime: string;
        };
        /**
         * An object representing the totals of a shopping cart.
         */
        type CartTotals = {
            /**
             * Subtotal of all the line items in the abandoned cart, not including shipping and tax.
             */
            subtotal: number;
            /**
             * Total of all the line items in the abandoned cart, including shipping and tax.
             */
            total: number;
            /**
             * Total formatted with currency symbol.
             */
            formattedTotal: string;
        };
        /**
         * An object representing a product collection that was created.
         */
        type CollectionCreatedEvent = {
            /**
             * ID of the created collection.
             */
            _id: string;
            /**
             * Collection name.
             */
            name: string;
            /**
             * Main product media item (image) URL.
             */
            mainMedia: string;
        };
        /**
         * An object representing a product collection that was deleted.
         */
        type CollectionDeletedEvent = {
            /**
             * ID of the delete collection.
             */
            collectionId: string;
        };
        /**
         * An object representing a product collection that was updated.
         */
        type CollectionUpdatedEvent = {
            /**
             * ID of the updated collection.
             */
            collectionId: string;
            /**
             * Names of the collection fields that were updated.
             */
            updatedFields: string[];
        };
        /**
         * An object representing fulfillment information that was created.
         */
        type FulfillmentCreatedEvent = {
            /**
             * ID of the order the fulfillment was created for.
             */
            orderId: string;
            /**
             * ID of the fulfillment that was created.
             */
            fulfillmentId: string;
            /**
             * Date and time the fulfillment was created.
             */
            dateCreated: string;
            /**
             * Information about the order's buyer.
             */
            buyerInfo: BuyerInfo;
            /**
             * Tracking information.
             */
            trackingInfo: TrackingInfo;
            /**
             * The order's current fulfillment status.
             * One of:
             *
             *  + `"NOT_FULFILLED"`: Order is not yet fulfilled.
             *  + `"FULFILLED"`: Order was fulfilled successfully.
             *  + `"CANCELED"`: Order was canceled.
             *  + `"PARTIALLY_FULFILLED"`: Order was partially fulfilled. For example, when only some of the order's items were fulfilled.
             */
            fulfillmentStatus: string;
        };
        /**
         * An object representing fulfillment information that was deleted.
         */
        type FulfillmentDeletedEvent = {
            /**
             * ID of the order the fulfillment was deleted from.
             */
            orderId: string;
            /**
             * ID of the fulfillment that was deleted.
             */
            fulfillmentId: string;
            /**
             * The order's current fulfillment status.
             * One of:
             *
             *  + `"NOT_FULFILLED"`: Order is not yet fulfilled.
             *  + `"FULFILLED"`: Order was fulfilled successfully.
             *  + `"CANCELED"`: Order was canceled.
             *  + `"PARTIALLY_FULFILLED"`: Order was partially fulfilled. For example, when only some of the order's items were fulfilled.
             */
            fulfillmentStatus: string;
        };
        /**
         * An object representing fulfillment information that was updated.
         */
        type FulfillmentUpdatedEvent = {
            /**
             * ID of the order the fulfillment was updated for.
             */
            orderId: string;
            /**
             * ID of the fulfillment that was updated.
             */
            fulfillmentId: string;
            /**
             * Tracking information.
             */
            trackingInfo: TrackingInfo;
        };
        /**
         * An object representing an inventory item that was updated.
         */
        type InventoryItemUpdatedEvent = {
            /**
             * ID of the inventory item.
             */
            inventoryItemId: string;
            /**
             * External ID of the inventory item. For example, the product ID for inventory items which are store products.
             */
            externalId: string;
            /**
             * Whether the item's inventory is tracked.
             */
            trackInventory: boolean;
        };
        /**
         * An object representing product variant information that was updated.
         */
        type InventoryVariantUpdatedEvent = {
            /**
             * ID of the inventory item.
             */
            inventoryItemId: string;
            /**
             * External ID of the inventory item. For example, the product ID for inventory items which are store products.
             */
            externalId: string;
            /**
             * List of variants that were updated.
             */
            variants: Events.UpdatedVariantInventory[];
        };
        /**
         * An object representing a new order from a store.
         */
        type NewOrderEvent = {
            /**
             * The ID of the order, auto-generated when an order is created an unique within all Wix Stores.
             */
            orderId: string;
            /**
             * Running order number unique to the current store.
             */
            number: string;
            /**
             * The date the order was created.
             */
            dateCreated: string;
            /**
             * The buyer's information.
             */
            buyerInfo: BuyerInfo;
            /**
             * The currency code for all of the order's prices.
             */
            currency: string;
            /**
             * The order's units of weight. One of: `"KG"`, `"LB"`, or `"UNSPECIFIED_WEIGHT_UNIT"`.
             */
            weightUnit: string;
            /**
             * The order's totals.
             */
            totals: OrderTotals;
            /**
             * The order's payment status. One of: `"PAID"` or `"NOT_PAID"`.
             */
            paymentStatus: string;
            /**
             * The order's fulfillment status. One of: `"FULFILLED"` or `"NOT_FULFILLED"`.
             */
            fulfillmentStatus: string;
            /**
             * Subscription information. Omitted unless the order is a subscription.
             * Learn more about [selling product subscriptions](https://support.wix.com/en/article/wix-stores-selling-product-subscriptions).
             */
            subscriptionInfo?: SubscriptionInfo;
            /**
             * Billing information.
             */
            billingInfo: BillingInfo;
        };
        /**
         * An object representing information about a canceled order.
         */
        type OrderCanceledEvent = {
            /**
             * Information about the canceled order.
             */
            order: Order;
        };
        /**
         * An object representing information about a refunded order.
         */
        type OrderRefundedEvent = {
            /**
             * Order refund ID.
             */
            refundId: string;
            /**
             * Information about the refunded order.
             */
            order: Order;
        };
        /**
         * An object representing the specific choices from the product's options.
         */
        type ProductChoices = {
            /**
             * Value of the option. This key name is
             *  dependent on the option changed in the product. For example, if a product
             *  has a size option, this key value will be something like "Size" and its value
             *  will be something like "Large".
             *
             *  `optionKey` is not case-sensitive. Therefore the values for the option keys `"Size"` `"SIZE"` and `"size"` are combined.
             */
            optionKey: string;
        };
        /**
         * An object representing a product that was created.
         */
        type ProductCreatedEvent = {
            /**
             * Product ID.
             */
            _id: string;
            /**
             * Product name.
             */
            name: string;
            /**
             * Product stock keeping unit.
             */
            sku: string;
            /**
             * Discounted product price formatted with the currency.
             */
            formattedDiscountedPrice: string;
            /**
             * Whether the product is shown in the store.
             */
            visible: boolean;
            /**
             * Main product media item (image or video) URL.
             */
            mainMedia: string;
            /**
             * Discounted product price.
             */
            discountedPrice: number;
            /**
             * Product price formatted with the currency.
             */
            formattedPrice: string;
            /**
             * Product price.
             */
            price: number;
            /**
             * Product media items.
             */
            mediaItems: MediaItem[] | $w.Gallery.VideoItem[];
            /**
             * Product currency.
             */
            currency: string;
            /**
             * URL to the product's page.
             */
            productPageUrl: string;
            /**
             * Price per unit.
             */
            pricePerUnit: number;
            /**
             * Price per unit formatted with currency symbol.
             */
            formattedPricePerUnit: string;
        };
        /**
         * An object representing a product that was deleted.
         */
        type ProductDeletedEvent = {
            /**
             * ID of the deleted product.
             */
            productId: string;
        };
        /**
         * An object representing a product that was updated.
         */
        type ProductUpdatedEvent = {
            /**
             * ID of the updated product.
             */
            productId: string;
            /**
             * Names of the product fields that were updated.
             */
            updatedFields: string[];
        };
        /**
         * An object representing a product variants that was updated.
         */
        type UpdatedVariant = {
            /**
             * ID of the variant that was updated.
             */
            variantId: string;
            /**
             * Names of the product variant fields that were updated.
             */
            updatedFields: string[];
            /**
             * Placeholder text.
             */
            choices: Events.ProductChoices;
        };
        /**
         * An object representing product variant that was updated.
         */
        type UpdatedVariantInventory = {
            /**
             * ID of the productVariant that was updated.
             */
            id: string;
            /**
             * Old variant value.
             */
            oldValue: Events.VariantInventoryValue;
            /**
             * Updated variant value.
             */
            newValue: Events.VariantInventoryValue;
        };
        /**
         * An object representing a product variant value.
         */
        type VariantInventoryValue = {
            /**
             * Whether the variant is in stock.
             */
            inStock: boolean;
            /**
             * Number of items in stock.
             */
            quantity: number;
        };
        /**
         * An object representing product variants that were updated.
         */
        type VariantsUpdatedEvent = {
            /**
             * ID of the product in which variants were updated.
             */
            productId: string;
            /**
             * Variants that were updated.
             */
            variants: Events.UpdatedVariant[];
        };
    }
}

// /types/common/wix-site-backend.d.ts
/**
 * The wix-site-backend module contains functionality for working with
 *  your site and its pages from backend code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.html#)
 */
declare module 'wix-site-backend' {
    /**
     * The generalInfo API contains functionality for getting
     *  [the information about your business](https://support.wix.com/en/article/adding-your-sites-business-info) that
     *  has been entered in the **General Info** section of your site's [**Dashboard**](https://support.wix.com/en/article/wix-dashboard-overview).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.html#generalInfo)
     */
    const generalInfo: GeneralInfo;
    /**
     * Invalidates the cache for a site.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.html#invalidateCache)
     */
    function invalidateCache(): Promise<void>;
    /**
     * The generalInfo API contains functionality for getting
     *  [the information about your business](https://support.wix.com/en/article/adding-your-sites-business-info) that
     *  has been entered in the **General Info** section of your site's [**Dashboard**](https://support.wix.com/en/article/wix-dashboard-overview).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.GeneralInfo.html#)
     */
    interface GeneralInfo {
        /**
         * Gets the physical address of the site's business.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.GeneralInfo.html#getAddress)
         */
        getAddress(): Promise<GeneralInfo.GeneralInfoAddress>;
        /**
         * Gets the site business name.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.GeneralInfo.html#getBusinessName)
         */
        getBusinessName(): Promise<string>;
        /**
         * Gets the business hours of the site's business.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.GeneralInfo.html#getBusinessSchedule)
         */
        getBusinessSchedule(): Promise<GeneralInfo.GeneralInfoSchedule>;
        /**
         * Gets the site category information.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.GeneralInfo.html#getCategories)
         */
        getCategories(): Promise<GeneralInfo.GeneralInfoCategories>;
        /**
         * Gets the site description.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.GeneralInfo.html#getDescription)
         */
        getDescription(): Promise<string>;
        /**
         * Gets the email address used for notifications of activities on your site.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.GeneralInfo.html#getEmail)
         */
        getEmail(): Promise<string>;
        /**
         * Gets the fax number used for notifications of activities on your site.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.GeneralInfo.html#getFax)
         */
        getFax(): Promise<string>;
        /**
         * Gets site language information.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.GeneralInfo.html#getLanguage)
         */
        getLanguage(): Promise<string>;
        /**
         * Gets site locale information.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.GeneralInfo.html#getLocale)
         */
        getLocale(): Promise<GeneralInfo.GeneralInfoLocale>;
        /**
         * Gets the site logo file name.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.GeneralInfo.html#getLogo)
         */
        getLogo(): Promise<string>;
        /**
         * Gets site multilingual information.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.GeneralInfo.html#getMultilingual)
         */
        getMultilingual(): Promise<GeneralInfo.GeneralInfoLanguages>;
        /**
         * Gets site payment currency information.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.GeneralInfo.html#getPaymentCurrency)
         */
        getPaymentCurrency(): Promise<string>;
        /**
         * Gets the phone number used for notifications of activities on your site.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.GeneralInfo.html#getPhone)
         */
        getPhone(): Promise<string>;
        /**
         * Gets the site display name.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.GeneralInfo.html#getSiteDisplayName)
         */
        getSiteDisplayName(): Promise<string>;
        /**
         * Gets site time zone information.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.GeneralInfo.html#getTimeZone)
         */
        getTimeZone(): Promise<string>;
    }
    /**
     * The generalInfo API contains functionality for getting
     *  [the information about your business](https://support.wix.com/en/article/adding-your-sites-business-info) that
     *  has been entered in the **General Info** section of your site's [**Dashboard**](https://support.wix.com/en/article/wix-dashboard-overview).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-site-backend.GeneralInfo.html#)
     */
    namespace GeneralInfo {
        /**
         * An object representing a site's corresponding physical address.
         */
        type GeneralInfoAddress = {
            /**
             * Address street.
             */
            street: string;
            /**
             * Address city.
             */
            city: string;
            /**
             * Address country.
             */
            country: string;
            /**
             * Address state.
             */
            state: string;
            /**
             * Address zip code.
             */
            zip: string;
            /**
             * Address description.
             */
            hint: GeneralInfo.GeneralInfoAddressHint;
            /**
             * Whether the business has a physical address.
             */
            isPhysical: boolean;
            /**
             * Address as formatted by Google.
             */
            googleFormattedAddress: string;
            /**
             * Address street number.
             */
            streetNumber: string;
            /**
             * Address apartment number.
             */
            apartmentNumber: string;
            /**
             * Address coordinates.
             */
            coordinates: GeneralInfo.GeneralInfoAddressCoordinates;
        };
        /**
         * An object representing the coordinates of the site address.
         */
        type GeneralInfoAddressCoordinates = {
            /**
             * Address latitude.
             */
            latitude: string;
            /**
             * Address longitude.
             */
            longitude: string;
        };
        /**
         * An object representing a description of a site's address.
         */
        type GeneralInfoAddressHint = {
            /**
             * Address description.
             */
            text: string;
            /**
             * Whether description is shown before, after, or instead of the actual address.
             */
            placement: string;
        };
        /**
         * An object representing the categories that describe your site's business.
         */
        type GeneralInfoCategories = {
            /**
             * Primary site category.
             */
            primary: string;
            /**
             * List of secondary site categories.
             */
            secondary: string[];
        };
        /**
         * An object representing the site's languages.
         */
        type GeneralInfoLanguages = {
            /**
             * List supported languages.
             */
            supportedLanguages: GeneralInfo.GeneralInfoLanguagesSupported[];
            /**
             * Whether to automatically redirect users based on their browser's settings.
             */
            autoRedirect: boolean;
        };
        /**
         * An object representing the site's supported languages.
         */
        type GeneralInfoLanguagesSupported = {
            /**
             * Language code.
             */
            languageCode: string;
            /**
             * Language locale.
             */
            locale: GeneralInfo.GeneralInfoLocale;
            /**
             * Country Code for the Language icon.
             */
            countryCode: string;
            /**
             * Whether the language is the primary language.
             */
            isPrimary: boolean;
        };
        /**
         * An object representing a site's locale.
         */
        type GeneralInfoLocale = {
            /**
             * Site country.
             */
            country: string;
            /**
             * Site language code.
             */
            languageCode: string;
        };
        /**
         * An object representing business hours.
         */
        type GeneralInfoSchedule = {
            /**
             * List of opening and closing days and times.
             */
            periods: GeneralInfo.GeneralInfoSchedulePeriods[];
            /**
             * Special hours.
             */
            specialHourPeriod: GeneralInfo.GeneralInfoScheduleSpecial[];
        };
        /**
         * An object representing business opened and closed hours.
         */
        type GeneralInfoSchedulePeriods = {
            /**
             * Business opening day.
             */
            openDay: string;
            /**
             * Business opening time.
             */
            openTime: string;
            /**
             * Business closing day.
             */
            closeDay: string;
            /**
             * Business closing time.
             */
            closeTime: string;
        };
        /**
         * An object representing special business hours.
         */
        type GeneralInfoScheduleSpecial = {
            /**
             * Special hours start date.
             */
            startDate: string;
            /**
             * Special hours end date.
             */
            endDate: string;
            /**
             * Whether the business is closed.
             */
            isClosed: boolean;
            /**
             * Special hours comment.
             */
            comment: string;
        };
    }
}

// /types/common/wix-secrets-backend.d.ts
/**
 * The wix-secrets-backend module contains functionality for
 * managing secrets you safely store in your site's [Secrets Manager](https://support.wix.com/en/article/velo-about-the-secrets-manager).
 * 	[Read more](https://www.wix.com/corvid/reference/wix-secrets-backend.html#)
 */
declare module 'wix-secrets-backend' {
    /**
     * Creates a new secret.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-secrets-backend.html#createSecret)
     */
    function createSecret(secret: Secret): Promise<string>;
    /**
     * Deletes an existing secret by ID.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-secrets-backend.html#deleteSecret)
     */
    function deleteSecret(id: string): Promise<void>;
    /**
     * Gets a secret by name.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-secrets-backend.html#getSecret)
     */
    function getSecret(name: string): Promise<string>;
    /**
     * Gets a list of objects containing information about all secrets stored in the Secrets Manager.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-secrets-backend.html#listSecretInfo)
     */
    function listSecretInfo(): Promise<SecretInfo[]>;
    /**
     * Updates the specified fields of an existing secret by ID.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-secrets-backend.html#updateSecret)
     */
    function updateSecret(id: string, secret: Secret): Promise<void>;
    /**
     * An object representing information for creating or updating a secret.
     */
    type Secret = {
        /**
         * A unique, meaningful name used for retrieving the secret at runtime using [`getSecret()`](wix-secrets-backend.html#getSecret). You can use alphanumeric characters and the following special characters: `_+=-#@$#`. Spaces are not supported.
         */
        name: string;
        /**
         * The confidential value to protect, such as an API key.
         */
        value: string;
        /**
         * An optional text describing the secret's purpose or any other notes.
         */
        description?: string;
    };
    /**
     * Information about a secret, not including the protected `value`.
     */
    type SecretInfo = {
        /**
         * The secret's ID.
         */
        id: string;
        /**
         * A unique, meaningful name used for retrieving the secret at runtime using [`getSecret()`](wix-secrets-backend.html#getSecret).
         */
        name: string;
        /**
         * An optional text describing the secret's purpose or any other notes about it.
         */
        description: string;
        /**
         * The date and time the secret was created.
         */
        createdDate: Date;
        /**
         * The date and time the secret was last updated.
         */
        updatedDate: Date;
    };
}

// /types/common/wix-router.d.ts
/**
 * This module contains the APIs for code routers and data binding router hooks.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-router.html#)
 */
declare module 'wix-router' {
    import wixData from 'wix-data';
    /**
     * [Read more](https://www.wix.com/corvid/reference/wix-router.html#wixRouterSitemapEntry)
     */
    const wixRouterSitemapEntry: WixRouterSitemapEntry;
    /**
     * Registers a hook that is called after a router.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-router.html#afterRouter)
     */
    function afterRouter(request: WixRouterRequest, response: WixRouterResponse): Promise<WixRouterResponse>;
    /**
     * Registers a hook that is called after a sitemap is created.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-router.html#afterSitemap)
     */
    function afterSitemap(request: WixRouterSitemapRequest, sitemapEntries: WixRouterSitemapEntry[]): Promise<WixRouterSitemapEntry[]>;
    /**
     * Registers a hook that is called before a router.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-router.html#beforeRouter)
     */
    function beforeRouter(request: WixRouterRequest): Promise<WixRouterResponse>;
    /**
     * Registers a hook that is called after a route is resolved by the data binding router, but before the wix-data query is executed.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-router.html#customizeQuery)
     */
    function customizeQuery(request: WixRouterRequest, route: string, query: wixData.WixDataQuery): wixData.WixDataQuery;
    /**
     * Returns a response with a status code 403 (Forbidden) and instructs the router to show a 403 page.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-router.html#forbidden)
     */
    function forbidden(message?: string): Promise<WixRouterResponse>;
    /**
     * Returns a response that instructs the router to continue.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-router.html#next)
     */
    function next(): Promise<WixRouterResponse>;
    /**
     * Returns a response with a status code 404 (Not Found) and instructs the router to show a 404 page.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-router.html#notFound)
     */
    function notFound(message?: string): Promise<WixRouterResponse>;
    /**
     * Returns a response with a status code 200 (OK) and instructs the router to show the selected page.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-router.html#ok)
     */
    function ok(Page: string | string[], routerReturnedData?: any, head?: WixRouterResponse.HeadOptions): Promise<WixRouterResponse>;
    /**
     * Returns a response with a status code of 301 (Moved Permanently) or 302 (Found) and instructs the router to redirect to the given URL.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-router.html#redirect)
     */
    function redirect(url: string, statusCode?: string): Promise<WixRouterResponse>;
    /**
     * Function containing routing logic for a given URL prefix.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-router.html#router)
     */
    function router(request: WixRouterRequest): Promise<WixRouterResponse>;
    /**
     * Returns a response with the specified HTTP status code with an optional message.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-router.html#sendStatus)
     */
    function sendStatus(statusCode: string, message?: string): Promise<WixRouterResponse>;
    /**
     * Function containing sitemap logic for a given URL prefix.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-router.html#sitemap)
     */
    function sitemap(request: WixRouterSitemapRequest): Promise<WixRouterSitemapEntry[]>;
    /**
     * An object representing an incoming page request received by a router.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterRequest.html#)
     */
    interface WixRouterRequest {
        /**
         * Returns the base URL of the router request.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterRequest.html#baseUrl)
         */
        readonly baseUrl: string;
        /**
         * Returns the current environment the router rendering process is running in.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterRequest.html#env)
         */
        readonly env: string;
        /**
         * Returns the form factor of the device used to make the router request.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterRequest.html#formFactor)
         */
        readonly formFactor: string;
        /**
         * Returns the remote IP address of the router request.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterRequest.html#ip)
         */
        readonly ip: string;
        /**
         * Returns the names of the pages associated with this router.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterRequest.html#pages)
         */
        readonly pages: string[];
        /**
         * Returns the path of the router request URL.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterRequest.html#path)
         */
        readonly path: string[];
        /**
         * Returns the router prefix of the router request URL.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterRequest.html#prefix)
         */
        readonly prefix: string;
        /**
         * Returns the protocol of the router request URL.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterRequest.html#protocol)
         */
        readonly protocol: string;
        /**
         * Returns the query fields and values of the request URL.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterRequest.html#query)
         */
        readonly query: any;
        /**
         * Returns the `referrer` header from the router request.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterRequest.html#referrer)
         */
        readonly referrer: string;
        /**
         * Returns the full URL of the router request.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterRequest.html#url)
         */
        readonly url: string;
        /**
         * Returns the details of the current site user who is logged in.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterRequest.html#user)
         */
        readonly user: WixRouterUser;
        /**
         * Returns the `user-agent` header as sent from the device used to make the router request.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterRequest.html#userAgent)
         */
        readonly userAgent: string;
    }
    /**
     * An object representing a response to a request received by a router.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterResponse.html#)
     */
    interface WixRouterResponse {
        /**
         * Sets or gets the data to pass with the response.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterResponse.html#data)
         */
        data: any;
        /**
         * Sets or gets the members to be written to the HTML head of the page.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterResponse.html#head)
         */
        head: WixRouterResponse.HeadOptions;
        /**
         * Sets or gets the response message to be used when responding with status codes 4xx and 5xx.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterResponse.html#message)
         */
        message: string;
        /**
         * Sets or gets the page to route to.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterResponse.html#page)
         */
        page: string;
        /**
         * Sets or gets the url to redirect to when responding with status codes 301 and 302.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterResponse.html#redirectUrl)
         */
        redirectUrl: string;
        /**
         * Sets or gets the response's HTTP status code.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterResponse.html#status)
         */
        status: number;
    }
    /**
     * An object representing a single entry in a sitemap.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterSitemapEntry.html#)
     */
    interface WixRouterSitemapEntry {
        /**
         * Sets or gets how frequently the page is likely to change.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterSitemapEntry.html#changeFrequency)
         */
        changeFrequency: string;
        /**
         * Sets or gets when was the page data last modified.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterSitemapEntry.html#lastModified)
         */
        lastModified: Date;
        /**
         * Sets or gets the page name.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterSitemapEntry.html#pageName)
         */
        pageName: string;
        /**
         * Sets or gets the priority of this URL relative to other URLs on your site.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterSitemapEntry.html#priority)
         */
        priority: number;
        /**
         * Sets or gets the page title.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterSitemapEntry.html#title)
         */
        title: string;
        /**
         * Sets or gets the relative url of the page.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterSitemapEntry.html#url)
         */
        url: string;
    }
    /**
     * An object representing a request for a sitemap.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterSitemapRequest.html#)
     */
    interface WixRouterSitemapRequest {
        /**
         * Returns the base URL of the request.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterSitemapRequest.html#baseUrl)
         */
        readonly baseUrl: string;
        /**
         * Sets or gets the page name.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterSitemapRequest.html#pageName)
         */
        readonly pageName: string;
        /**
         * Returns the names of the pages associated with this router.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterSitemapRequest.html#pages)
         */
        readonly pages: string[];
        /**
         * Returns the router prefix of the request.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterSitemapRequest.html#prefix)
         */
        readonly prefix: string;
        /**
         * Returns the details of the current site user who is logged in.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterSitemapRequest.html#user)
         */
        readonly user: WixRouterUser;
    }
    /**
     * An object that contains information about the current site visitor who is logged in.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterUser.html#)
     */
    interface WixRouterUser {
        /**
         * Gets the user's ID.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterUser.html#id)
         */
        readonly id: string;
        /**
         * Gets the user's role.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterUser.html#role)
         */
        readonly role: string;
    }
    /**
     * An object representing a response to a request received by a router.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-router.WixRouterResponse.html#)
     */
    namespace WixRouterResponse {
        /**
         * Members of the HTML head.
         */
        type HeadOptions = {
            /**
             * The page title. Written to the `` tag.
             */
            title?: string;
            /**
             * **Deprecated: Use the new `metaTags` format instead.**
             *
             * The page description.
             */
            description?: string;
            /**
             * **Deprecated: Use the new `metaTags` format instead.**
             *
             *  The page keywords.
             */
            keywords?: string;
            /**
             * **Deprecated: Use the new `metaTags` format instead.**
             *
             *  Indicates whether to add a meta tag that prevents search engines from indexing the
             *  page.
             */
            noIndex?: boolean;
            /**
             * The page's SEO-related meta tags.
             *
             *  The keys in the object represent the keys in the tag and the values in the
             *  object represent the values in the tag.
             *
             *  For example:
             *
             *  ```javascript
             *  {
             *    "property": "og:image",
             *    "content": "https://.../Wix+logo.jpg"
             *  }
             *  ```
             *
             * Produces:
             *
             *  ```html
             *
             *  ```
             *
             *  When setting `og:image` meta tags, the `content` can be an external image URL
             *  or a Media Manager image URL as described [here]($w.Image.html#src).
             *
             *  **Deprecated format:** An object with key:value pairs where the key is the meta tag name
             *  and the value is the content.
             */
            metaTags?: WixRouterResponse.MetaTag[];
            /**
             * The page's SEO-related link tags,
             *  which provide additional SEO information about the page. For example, you can set a
             *  link to a canonical or alternate version of the page.
             */
            links?: WixRouterResponse.Link[];
            /**
             * The page's structured data, which helps search engines
             *  understand more about the page and your business so they can display a richer snippet of the
             *  page in search results.
             */
            structuredData?: any[];
        };
        /**
         * An object representing a link tag.
         */
        type Link = {
            /**
             * The relationship of the linked resource to the current page.
             */
            rel?: string;
            /**
             * The URL of the linked resource.
             */
            href?: string;
        };
        /**
         * An object representing a meta tag.
         */
        type MetaTag = {
            /**
             * Name of the meta tag. Either `name` or `property` is required.
             */
            name?: string;
            /**
             * Name of the meta tag property. Either `property` or `name` is required.
             */
            property?: string;
            /**
             * HTTP header that corresponds to the `content`.
             */
            "http-equiv"?: string;
            /**
             * Meta tag value. For `og:image` meta tags, the `content` can
             *  be an external image URL or a Media Manager image URL as described [here]($w.Image.html#src).
             */
            content: string;
        };
    }
}

// /types/common/wix-realtime-backend.d.ts
/**
 * The wix-realtime module contains functionality for publishing messages
 *  on channels that site visitors can subscribe to and for managing channel permissions.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-realtime-backend.html#)
 */
declare module 'wix-realtime-backend' {
    /**
     * Returns the realtime permissions router.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-realtime-backend.html#permissionsRouter)
     */
    const permissionsRouter: PermissionsRouter;
    /**
     * Publishes a message to a channel or channel resource.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-realtime-backend.html#publish)
     */
    function publish(channel: Channel, payload: any, options?: PublishOptions): Promise<void> & void;
    /**
     * Checks permissions for a subscriber on a channel or channel resource.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-realtime-backend.html#realtime_check_permission)
     */
    function realtime_check_permission(channel: Channel, subscriber: Subscriber): Promise<ChannelPermissions> & ChannelPermissions;
    /**
     * An object representing a channel or channel resource.
     *  Site visitors can subscribe to a channel or channel resource to receive the
     *  messages that are published on it. When site visitors subscribe to a channel, they do not
     *  receive messages published to a resource on that same channel. Similarly,
     *  when site visitors subscribe to a channel resource, they do not
     *  receive messages published to that same channel without a specified resource.
     *  Channel resources inherit their parent channel's permissions, unless specified
     *  otherwise.
     */
    type Channel = {
        /**
         * Channel name. Cannot exceed 140 characters. Cannot include spaces or special characters.
         */
        name: string;
        /**
         * ID of a specific channel resource.
         */
        resourceId?: string;
    };
    /**
     * An object containing permission settings for a channel.
     */
    type ChannelPermissions = {
        /**
         * Whether the subscriber has read permissions. Defaults to `true`.
         */
        read?: boolean;
    };
    /**
     * An object containing options for publishing.
     */
    type PublishOptions = {
        /**
         * User IDs of specific users to publish to.
         */
        users?: string[];
        /**
         * Whether to include information about the message publisher.
         *  Defaults to `false`.
         */
        includePublisher?: boolean;
    };
    /**
     * An object representing a channel subscriber.
     */
    type Subscriber = {
        /**
         * The subscriber's user ID.
         */
        id: string;
        /**
         * The type of subscriber.
         *
         *  One of:
         *
         *  + `"Admin"`: Subscriber is the site owner.
         *  + `"Member"`: Subscriber is a logged-in site member.
         *  + `"Visitor"`: Subscriber in not logged in.
         */
        type: string;
    };
    /**
     * A router for defining and checking permissions.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-realtime-backend.PermissionsRouter.html#)
     */
    interface PermissionsRouter {
        /**
         * Sets a permissions handler for a specific channel or channel resource.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-realtime-backend.PermissionsRouter.html#add)
         */
        add(channel: Channel, handler: PermissionsRouter.PermissionsHandler): Promise<void> & void;
        /**
         * Checks the permissions for a subscriber on a channel or channel resource.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-realtime-backend.PermissionsRouter.html#check)
         */
        check(channel: Channel, subscriber: Subscriber): Promise<ChannelPermissions> & ChannelPermissions;
        /**
         * Sets a permissions handler for default permissions.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-realtime-backend.PermissionsRouter.html#default)
         */
        default(handler: PermissionsRouter.PermissionsHandler): void;
    }
    /**
     * A router for defining and checking permissions.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-realtime-backend.PermissionsRouter.html#)
     */
    namespace PermissionsRouter {
        type PermissionsHandler = (channel: Channel, subscriber: Subscriber) => Promise<ChannelPermissions>;
    }
}

// /types/common/wix-pricing-plans-backend.d.ts
/**
 * The wix-pricing-plans-backend module contains functionality for managing your
 *  site's pricing plans from backend code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.html#)
 */
declare module 'wix-pricing-plans-backend' {
    /**
     * [Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.html#events)
     */
    const events: Events;
    /**
     * Archives a single pricing plan.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.html#archivePlan)
     */
    function archivePlan(id: string): Promise<Plan>;
    /**
     * Changes the display order of the pricing plans on the site page and in the Dashboard.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.html#arrangePlans)
     */
    function arrangePlans(ids: string[]): Promise<void>;
    /**
     * Sets all pricing plans as not primary.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.html#clearPrimary)
     */
    function clearPrimary(): Promise<void>;
    /**
     * Creates a pricing plan.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.html#createPlan)
     */
    function createPlan(planInfo: CreatePlanInfo): Promise<Plan>;
    /**
     * Gets an existing pricing plan by ID.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.html#getPlan)
     */
    function getPlan(id: string): Promise<Plan>;
    /**
     * Gets statistics about the pricing plans.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.html#getPlanStats)
     */
    function getPlanStats(): Promise<PlansStats>;
    /**
     * Lists public pricing plans.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.html#listPublicPlans)
     */
    function listPublicPlans(planIds?: string[], options?: ListPublicPlanOptions): Promise<PublicPlans[]>;
    /**
     * Marks a pricing plan as the primary pricing plan.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.html#makePlanPrimary)
     */
    function makePlanPrimary(id: string): Promise<Plan>;
    /**
     * Creates a query to retrieve a list of public pricing plans.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.html#queryPublicPlans)
     */
    function queryPublicPlans(): Promise<PublicPlansQueryBuilder>;
    /**
     * Sets visibility for non-archived pricing plans. Public plans are plans that are set to visible.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.html#setPlanVisibility)
     */
    function setPlanVisibility(id: string, visible: boolean): Promise<Plan>;
    /**
     * Updates a pricing plan.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.html#updatePlan)
     */
    function updatePlan(planInfo: UpdatePlanInfo): Promise<Plan>;
    type CreatePlanInfo = {
        /**
         * Plan name.
         */
        name: string;
        /**
         * Plan price, payment schedule, and expiration.
         */
        pricing: PricingInfo;
        /**
         * Plan description.
         */
        description?: string;
        /**
         * List of text strings that promote the pricing plan (for example, "Plenty of parking" or "Free gift on your birthday").
         */
        perks?: string[];
        /**
         * Whether the plan is public (visible to site visitors). Defaults to `true`.
         */
        public?: boolean;
        /**
         * Whether the same buyer can purchase the plan multiple times. `1` means the buyer can only purchase the plan once. An empty value or `0` means no limitation. Defaults to empty.
         */
        maxPurchasesPerBuyer?: number;
        /**
         * Whether the buyer can start the plan at a later date. Defaults to `false`.
         */
        allowFutureStartDate?: boolean;
        /**
         * Whether the buyer is allowed to cancel their plan. Defaults to `true`.  If `true`, calling the [`cancelOrder()`](wix-paid-plans/cancelOrder) function returns an error.
         */
        buyerCanCancel?: boolean;
        /**
         * Any terms and conditions that apply to the plan. This information is displayed during checkout.
         */
        termsAndConditions?: string;
    };
    /**
     * Length of one payment cycle, for example, 3 months to have quarterly payments.
     */
    type Duration = {
        /**
         * Number of days, months, weeks, or years.
         */
        count: number;
        /**
         * Days, months, weeks, or years.
         * One of:
         *  + `"DAY"`
         *  + `"WEEK"`
         *  + `"MONTH"`
         *  + `"YEAR"`
         */
        unit: string;
    };
    /**
     * Length of one payment cycle, for example, 3 months to have quarterly payments.
     */
    type DurationInfo = {
        /**
         * Number of days, months, weeks, or years.
         */
        count?: number;
        /**
         * Days, months, weeks, or years.
         * One of:
         *  + `"DAY"`
         *  + `"WEEK"`
         *  + `"MONTH"`
         *  + `"YEAR"`
         */
        unit?: string;
    };
    type ListPublicPlanOptions = {
        /**
         * Number of public pricing plans to list. Defaults to 50.
         */
        limit?: number;
        /**
         * Number of public pricing plans to skip. Defaults to 0.
         */
        skip?: number;
    };
    /**
     * Amount for a single payment. For subscriptions, this is the amount to pay for each single payment cycle and it is required. Otherwise, the single payment for the entire plan.
     */
    type Money = {
        /**
         * Monetary amount. Decimal string with a period as a decimal separator (for example, 3.99). Cannot be negative.
         */
        value: string;
        /**
         * Currency code. Must be a valid [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code (for example, USD).
         */
        currency: string;
    };
    /**
     * Amount for a single payment. For subscriptions, this is the amount to pay for each single payment cycle and it is required. Otherwise, the single payment for the entire plan.
     */
    type MoneyInfo = {
        /**
         * Monetary amount. Decimal string with a period as a decimal separator (for example, 3.99). Cannot be negative.
         */
        value?: string;
        /**
         * Currency code. Must be a valid [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code (for example, USD).
         */
        currency?: string;
    };
    /**
     * A text string promoting the pricing plan (for example, "Plenty of parking" or "Free gift on your birthday").
     */
    type Perk = {
        /**
         * Text listing one perk of this plan.
         */
        value: string;
    };
    /**
     * List of text strings that promote the pricing plan (for example, "Plenty of parking" or "Free gift on your birthday").
     */
    type Perks = {
        /**
         * A list of strings promoting the pricing plan.
         */
        value?: Perk[];
    };
    type Plan = {
        /**
         * Plan ID.
         */
        _id: string;
        /**
         * Plan name.
         */
        name: string;
        /**
         * Plan description.
         */
        description: string;
        /**
         * List of text strings that promote the pricing plan (for example, "Plenty of parking" or "Free gift on your birthday").
         */
        perks: string[];
        /**
         * Plan price, payment schedule, and expiration.
         */
        pricing: Pricing;
        /**
         * Whether the plan is public (visible to site visitors).
         */
        public: boolean;
        /**
         * Whether the plan is archived. Archived plans are not visible and can't be purchased anymore, but existing purchases remain in effect.
         */
        archived: boolean;
        /**
         * Whether the plan is marked as primary. If `true`, the plan is highlighted on the site with a custom ribbon. Defaults to `false`.
         */
        primary: boolean;
        /**
         * Whether the plan has any orders (including pending and unpaid orders).
         */
        hasOrders: boolean;
        /**
         * Date plan was created.
         */
        _createdDate: Date;
        /**
         * Date plan was last updated.
         */
        _updatedDate: Date;
        /**
         * URL-friendly version of the plan name. Unique across all plans in the same site.
         */
        slug: string;
        /**
         * Whether the buyer can start the plan at a later date.
         */
        allowFutureStartDate: boolean;
        /**
         * Whether the buyer is allowed to cancel their plan. If `false`, calling the [`cancelOrder()`](wix-paid-plans/cancelOrder) function returns an error.
         */
        buyerCanCancel: boolean;
        /**
         * Whether the same buyer can purchase the plan multiple times. `1` means the buyer can only purchase the plan once. An empty value or `0` means no limitation.
         */
        maxPurchasesPerBuyer?: number;
        /**
         * Any terms and conditions that apply to the plan. This information is displayed during checkout.
         */
        termsAndConditions?: string;
    };
    type Plans = {
        /**
         * List of public and hidden pricing plans.
         */
        plans: Plan[];
    };
    type PlansStats = {
        /**
         * Total number of plans created, including active plans (both public and hidden) and archived plans.
         */
        total: number;
    };
    /**
     * Pricing plan's pricing details, such as the plan price, payment schedule, and expiration. The payment schedule and expiration are based on one of three [pricing models](wix-pricing-plans-backend/introduction): `subscription`, `singlePaymentForDuration`, or `singlePaymentUnlimited`. Only one pricing model can be specified per plan.
     */
    type Pricing = {
        /**
         * Pricing model indicating that the plan has recurring payments. This type of subscription is not a "Wix subscription," which encompasses various types of subscriptions, such as Wix Stores subscriptions, Wix invoice subscriptions, and *all* pricing plan models.
         */
        subscription?: Recurrence;
        /**
         * Pricing model indicating that the plan is paid with a single payment per cycle and what the length of the cycle is. The cycle is the duration of the plan, not a payment cycle.
         */
        singlePaymentForDuration?: Duration;
        /**
         * Pricing model indicating that the plan is paid in one single payment and that the plan is valid until canceled.
         */
        singlePaymentUnlimited?: boolean;
        /**
         * Amount for a single payment. For subscriptions, this is the amount to pay for each single payment cycle and it is required. Otherwise, the single payment for the entire plan.
         */
        price: Money;
        /**
         * Free trial period for the plan in days. Available only for recurring plans, meaning plans whose pricing model is `subscription`.
         */
        freeTrialDays?: number;
    };
    /**
     * Pricing plan's pricing details, such as the plan price, payment schedule, and expiration. The payment schedule and expiration are based on one of three [pricing models](wix-pricing-plans-backend/introduction): `subscription`, `singlePaymentForDuration`, or `singlePaymentUnlimited`.
     */
    type PricingInfo = {
        /**
         * Pricing model indicating that the plan has recurring payments.
         */
        subscription?: Recurrence;
        /**
         * Pricing model indicating that the plan is paid with a single payment per cycle and what the Length of the cycle is. The cycle is the duration of the plan, not a payment cycle.
         */
        singlePaymentForDuration?: Duration;
        /**
         * Pricing model indicating that the plan is paid in one single payment and that the plan is valid until canceled.
         */
        singlePaymentUnlimited?: boolean;
        /**
         * Amount for a single payment. For subscriptions, this is the amount to pay for each single payment cycle and it is required. Otherwise, the single payment for the entire plan.
         */
        price?: MoneyInfo;
        /**
         * Free trial period for the plan in days. Available only for recurring plans, meaning plans whose pricing model is `subscription`.
         */
        freeTrialDays?: number;
    };
    /**
     * Public pricing plan entity containing information about the pricing plan. Can be read by any site member or visitor.
     */
    type PublicPlan = {
        /**
         * Plan ID.
         */
        _id: string;
        /**
         * Plan name.
         */
        name: string;
        /**
         * Plan description.
         */
        description: string;
        /**
         * List of text strings that promote the pricing plan (for example, "Plenty of parking" or "Free gift on your birthday").
         */
        perks: string[];
        /**
         * Plan price, payment schedule, and expiration.
         */
        pricing: Pricing;
        /**
         * Whether the plan is marked as primary. If `true`, the plan is highlighted on the site with a custom ribbon. Defaults to `false`.
         */
        primary: boolean;
        /**
         * Date plan was created.
         */
        _createdDate: Date;
        /**
         * Date plan was last updated.
         */
        _updatedDate: Date;
        /**
         * URL-friendly version of the plan name. Unique across all plans in the same site.
         */
        slug: string;
        /**
         * Whether the buyer can start the plan at a later date. Defaults to `false`.
         */
        allowFutureStartDate: boolean;
        /**
         * Whether the buyer is allowed to cancel their plan. Defaults to `false`. If `false`, calling the [`cancelOrder()`](wix-paid-plans/cancelOrder) function returns an error.
         */
        buyerCanCancel: boolean;
        /**
         * Whether the same buyer can purchase the plan multiple times. `1` means the buyer can only purchase the plan once. An empty value or `0` means no limitation. Defaults to empty.
         */
        maxPurchasesPerBuyer?: number;
        /**
         * Any terms and conditions that apply to the plan. This information is displayed during checkout.
         */
        termsAndConditions?: string;
    };
    type PublicPlans = {
        /**
         * List of public pricing plans.
         */
        publicPlans: PublicPlan[];
    };
    /**
     * The pricing plan has recurring payments.
     */
    type Recurrence = {
        /**
         * Length of one payment cycle, for example, 1 month to have monthly payments. Multiply `cycleDuration`'s `count` by `cycleCount` to get the subscription duration. *Currently, only a value of `1` is supported.*
         */
        cycleDuration: Duration;
        /**
         * Number of cycles. Zero for unlimited plans and plans that are valid until canceled.
         */
        cycleCount: number;
    };
    /**
     * The pricing plan has recurring payments.
     */
    type RecurrenceInfo = {
        /**
         * Length of one payment cycle, for example, 1 month to have monthly payments. Multiply `cycleDuration`'s `count` by `cycleCount` to get the subscription duration. *Currently, only a value of `1` is supported.*
         */
        cycleDuration?: DurationInfo;
        /**
         * Number of cycles. Zero for unlimited plans and plans that are valid until canceled.
         */
        cycleCount?: number;
    };
    type UpdatePlanInfo = {
        /**
         * Plan ID.
         */
        _id: string;
        /**
         * Plan name.
         */
        name?: string;
        /**
         * Plan description.
         */
        description?: string;
        /**
         * List of text strings that promote the pricing plan (for example, "Plenty of parking" or "Free gift on your birthday").
         */
        perks?: string[];
        /**
         * Plan price, payment schedule, and expiration.
         */
        pricing?: PricingInfo;
        /**
         * Whether the plan is public (visible to site visitors).
         */
        public?: boolean;
        /**
         * Whether the same buyer can purchase the plan multiple times. `1` means the buyer can only purchase the plan once. An empty value or `0` means no limitation. Defaults to empty.
         */
        maxPurchasesPerBuyer?: number;
        /**
         * Whether the buyer can start the plan at a later date.
         */
        allowFutureStartDate?: boolean;
        /**
         * Whether the buyer is allowed to cancel their plan. If `false`, calling the [`cancelOrder()`](wix-paid-plans/cancelOrder) function returns an error.
         */
        buyerCanCancel?: boolean;
        /**
         * Any terms and conditions that apply to the plan. This information is displayed during checkout.
         */
        termsAndConditions?: string;
    };
    /**
     * Events fired by pricing plans.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.Events.html#)
     */
    interface Events {
        /**
         * An event that triggers when a pricing plan is archived.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.Events.html#onPlanArchived)
         */
        onPlanArchived(event: Events.PlanArchivedEvent): void;
        /**
         * An event that triggers when a pricing plan is created.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.Events.html#onPlanCreated)
         */
        onPlanCreated(event: Events.PlanCreatedEvent): void;
        /**
         * An event that triggers when a member purchases a plan.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.Events.html#onPlanPurchased)
         */
        onPlanPurchased(event: Events.PlanPurchasedEvent): void;
        /**
         * An event that triggers when a pricing plan is changed.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.Events.html#onPlanUpdated)
         */
        onPlanUpdated(event: Events.PlanUpdatedEvent): void;
    }
    /**
     * Contains functionality for refining a public pricing plan query.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#)
     */
    interface PublicPlansQueryBuilder {
        /**
         * Adds an `and` condition to the query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#and)
         */
        and(query: PublicPlansQueryBuilder): PublicPlansQueryBuilder;
        /**
         * Adds a sort to a query, sorting by the specified properties in ascending order.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#ascending)
         */
        ascending(...propertyName: string[]): PublicPlansQueryBuilder;
        /**
         * Refines a query to match items whose specified property value is within a specified range.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#between)
         */
        between(propertyName: string, rangeStart: string | number | Date, rangeEnd: string | number | Date): PublicPlansQueryBuilder;
        /**
         * Refines a query to match items whose specified property value contains a specified string.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#contains)
         */
        contains(propertyName: string, string: string): PublicPlansQueryBuilder;
        /**
         * Adds a sort to a query or sort, sorting by the specified properties in descending order.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#descending)
         */
        descending(...propertyName: string[]): PublicPlansQueryBuilder;
        /**
         * Refines a query to match items whose specified property value ends with a specified string.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#endsWith)
         */
        endsWith(propertyName: string, string: string): PublicPlansQueryBuilder;
        /**
         * Refines a query to match items whose specified property value equals the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#eq)
         */
        eq(propertyName: string, value: any): PublicPlansQueryBuilder;
        /**
         * Returns the items that match the query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#find)
         */
        find(): Promise<PublicPlansQueryResult>;
        /**
         * Refines a query to match items whose specified property value is greater than or equal to the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#ge)
         */
        ge(propertyName: string, value: string | number | Date): PublicPlansQueryBuilder;
        /**
         * Refines a query to match items whose specified property value is greater than the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#gt)
         */
        gt(propertyName: string, value: string | number | Date): PublicPlansQueryBuilder;
        /**
         * Refines a query to match items whose specified property contains any of the specified `value` parameters.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#hasSome)
         */
        hasSome(propertyName: string, values: string[]): PublicPlansQueryBuilder;
        /**
         * Refines a query to match items whose specified property value is less than or equal to the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#le)
         */
        le(propertyName: string, value: string | number | Date): PublicPlansQueryBuilder;
        /**
         * Limits the number of items the query returns.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#limit)
         */
        limit(limit: number): PublicPlansQueryBuilder;
        /**
         * Refines a query to match items whose specified property value is less than the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#lt)
         */
        lt(propertyName: string, value: string | number | Date): PublicPlansQueryBuilder;
        /**
         * Refines a query to match items whose specified property value does not equal the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#ne)
         */
        ne(propertyName: string, value: any): PublicPlansQueryBuilder;
        /**
         * Adds a `not` condition to the query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#not)
         */
        not(query: PublicPlansQueryBuilder): PublicPlansQueryBuilder;
        /**
         * Adds an `or` condition to the query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#or)
         */
        or(query: PublicPlansQueryBuilder): PublicPlansQueryBuilder;
        /**
         * Sets the number of items to skip before returning query results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#skip)
         */
        skip(skip: number): PublicPlansQueryBuilder;
        /**
         * Refines a query to match items whose specified property value starts with a specified string.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryBuilder.html#startsWith)
         */
        startsWith(propertyName: string, string: string): PublicPlansQueryBuilder;
    }
    /**
     * The results of a public pricing plans query, containing the retrieved items.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryResult.html#)
     */
    interface PublicPlansQueryResult {
        /**
         * Returns the index of the current results page number.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryResult.html#currentPage)
         */
        readonly currentPage: number;
        /**
         * Returns the items that match the query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryResult.html#items)
         */
        readonly items: PublicPlansQueryResult.Item[];
        /**
         * Returns the number of items in the current results page.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryResult.html#length)
         */
        readonly length: number;
        /**
         * Returns the query page size.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryResult.html#pageSize)
         */
        readonly pageSize: number;
        /**
         * Returns the query used to get the current results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryResult.html#query)
         */
        readonly query: PublicPlansQueryBuilder;
        /**
         * Returns the total number of items that match the query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryResult.html#totalCount)
         */
        readonly totalCount: number;
        /**
         * Returns the total number of pages the query produced.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryResult.html#totalPages)
         */
        readonly totalPages: number;
        /**
         * Indicates if the query has more results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryResult.html#hasNext)
         */
        hasNext(): boolean;
        /**
         * Indicates the query has previous results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryResult.html#hasPrev)
         */
        hasPrev(): boolean;
        /**
         * Retrieves the next page of query results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryResult.html#next)
         */
        next(): Promise<PublicPlansQueryResult>;
        /**
         * Retrieves the previous page of query results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryResult.html#prev)
         */
        prev(): Promise<PublicPlansQueryResult>;
    }
    /**
     * Events fired by pricing plans.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.Events.html#)
     */
    namespace Events {
        /**
         * Event data.
         */
        type EventData = {
            /**
             * Plan information.
             */
            plan: Plan;
        };
        /**
         * Event metadata.
         */
        type EventMetadata = {
            /**
             * Event ID.
             */
            id: string;
            /**
             * Plan ID associated with this event.
             */
            entityId: string;
            /**
             * Event timestamp.
             */
            eventTime: string;
            /**
             * Whether the event was triggered as a result of a privacy regulation application (for example, [GDPR](https://support.wix.com/en/article/gdpr-frequently-asked-questions)). For advanced users.
             */
            triggeredByAnonymizeRequest?: boolean;
        };
        /**
         * An object representing a new pricing plan order (subscription).
         */
        type Order = {
            /**
             * Order ID of the purchase of the plan, auto-generated when an order is created.
             */
            id: string;
            /**
             * Status of the payment for the plan. Can be `PAID`, `REFUNDED`, `FAILED`, `UNPAID`, and `PAYMENT_STATUS_UNDEFINED`.
             */
            paymentStatus: string;
            /**
             * Date and time until which the plan is valid.
             */
            validUntil: Date;
            /**
             * Object containing the price of the plan.
             */
            price: Events.Price;
            /**
             * If the plan is cancelled, the reason why. One of:
             *
             *  + `OWNER_CANCELED`: The owner cancelled.
             *  + `PAYMENT_PROVIDER_CANCELED`: The payment provider cancelled.
             *  + `PAYMENT_FAILED`: The payment failed.
             *  + `UOU_CANCELED`: The site member cancelled.
             *  + `CANCELLATION_REASON_UNDEFINED`: The reason is undefined.
             */
            cancellationReason: string;
            /**
             * If the plan is cancelled, the cause of the cancellation. One of:
             *
             *  + `"UNDEFINED"`: Cancellation initiator undefined.
             *  + `"OWNER"`: Order (subscription) was canceled by site owner.
             *  + `"MEMBER"`: Order (subscription) was canceled by member.
             *  + `"PAYMENT_FAILURE"`: Subscription was canceled because of payment failure.
             *  + `"SETUP_FAILURE"`: Subscription was canceled because of payment setup failure.
             */
            cancellationInitiator: string;
            /**
             * Date and time from which the plan is valid.
             */
            validFrom: Date;
            /**
             * Name of the plan.
             */
            planName: string;
            /**
             * ID of the plan for Wix Pay. If plan is free, this ID is blank.
             */
            wixPayOrderId: string;
            /**
             * If the plan is recurring. If true, the price is deducted weekly, monthly, or yearly.
             */
            recurring: boolean;
            /**
             * Date and time the order was created.
             */
            dateCreated: Date;
            /**
             * Status of the order. Can be `ACTIVE`, `PENDING`, `CANCELED`, `EXPIRED`, `PENDING_CANCELLATION`, and `ORDER_STATUS_UNDEFINED`.
             */
            status: string;
            /**
             * Role assigned after purchasing the plan.
             */
            roleID: string;
            /**
             * Description of the plan.
             */
            planDescription: string;
            /**
             * ID for the member who purchased the plan.
             */
            memberId: string;
            /**
             * How the plan was purchased, either `ONLINE` or `OFFLINE`.
             */
            orderType: string;
            /**
             * ID of the plan.
             */
            planId: string;
            /**
             * Object containing properties about how long the plan is valid.
             */
            validFor: Events.ValidFor;
            /**
             * How many trial days were given to the subscriber of the plan. Available only for orders whose plans are recurring, meaning plans whose pricing model is `subscription`.
             */
            freeTrialDays?: number;
        };
        /**
         * Event metadata.
         */
        type OrderEventMetadata = {
            /**
             * Event ID.
             */
            id: string;
            /**
             * Order ID associated with this event.
             */
            entityId: string;
            /**
             * Event timestamp.
             */
            eventTime: string;
            /**
             * Whether the event was triggered as a result of a privacy regulation application (for example, [GDPR](https://support.wix.com/en/article/gdpr-frequently-asked-questions)). For advanced users.
             */
            triggeredByAnonymizeRequest?: boolean;
        };
        /**
         * An object representing the period for which a plan is valid.
         */
        type Period = {
            /**
             * The number of units until the plan expires.
             */
            amount: number;
            /**
             * Time period for billing the plan, such as `MONTH`.
             */
            unit: string;
        };
        /**
         * Information about the plan archive event.
         */
        type PlanArchivedEvent = {
            /**
             * Event metadata.
             */
            metadata: Events.EventMetadata;
            /**
             * Event data, including information about the archived plan.
             */
            data: Events.EventData;
        };
        /**
         * Information about the create plan event.
         */
        type PlanCreatedEvent = {
            /**
             * Event metadata.
             */
            metadata: Events.EventMetadata;
            /**
             * Plan information.
             */
            entity: Plan;
        };
        /**
         * An object representing a new pricing plan purchase.
         */
        type PlanPurchasedEvent = {
            /**
             * Object containing the details about the plan's order.
             */
            order: Events.Order;
        };
        /**
         * Information about the plan update event.
         */
        type PlanUpdatedEvent = {
            /**
             * Event metadata.
             */
            metadata: Events.EventMetadata;
            /**
             * Plan information.
             */
            entity: Plan;
        };
        /**
         * An object representing the price of a purchased plan.
         */
        type Price = {
            /**
             * Payment currency. A three-letter
             *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
             */
            currency: string;
            /**
             * The cost of the plan.
             */
            amount: number;
        };
        /**
         * An object representing how long a plan is valid.
         */
        type ValidFor = {
            /**
             * If true, the plan does not expire.
             */
            forever: boolean;
            /**
             * Object containing the period for which the plan is valid.
             */
            period: Events.Period;
        };
    }
    /**
     * The results of a public pricing plans query, containing the retrieved items.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pricing-plans-backend.PublicPlansQueryResult.html#)
     */
    namespace PublicPlansQueryResult {
        /**
         * An item returned by a query.
         */
        type Item = {
            /**
             * An item that matches the query.
             */
            publicPlan: PublicPlan;
        };
    }
}

// /types/common/wix-pay-backend.d.ts
/**
 * The wix-pay-backend module contains functionality for working with
 *  payments from backend code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.html#)
 */
declare module 'wix-pay-backend' {
    /**
     * Contains functionality for displaying prices in your store in different currencies, getting exchange rates, and converting between currencies.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.html#currencies)
     */
    const currencies: Currencies;
    /**
     * Creates a new payment.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.html#createPayment)
     */
    function createPayment(paymentInfo: PaymentInfo): Promise<Payment>;
    /**
     * An object representing a payment.
     */
    type Payment = {
        /**
         * Payment transaction ID.
         */
        id: string;
        /**
         * Payment total amount.
         */
        amount: number;
        /**
         * Payment currency. A three-letter
         *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
         */
        currency: string;
        /**
         * Payment items.
         */
        items: PaymentItem[];
        /**
         * An object representing information about the user.
         */
        userInfo: PaymentUserInfo;
    };
    /**
     * An object representing information for creating a payment.
     */
    type PaymentInfo = {
        /**
         * Total payment amount. Must equal
         *  the sum of the `price` properties in the `items` list while taking the
         *  `quantity` into account.
         */
        amount: number;
        /**
         * Payment currency. A three-letter
         *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code. Defaults to
         *  the currency defined by the site's [Regional Settings](https://support.wix.com/en/article/changing-your-sites-regional-settings).
         */
        currency?: string;
        /**
         * List of payment items.
         */
        items: PaymentItem[];
        /**
         * An object representing information about the user. It will be used to prefill
         *  the user info form during the payment process.
         */
        userInfo?: PaymentUserInfo;
    };
    /**
     * An object representing a payment item.
     */
    type PaymentItem = {
        /**
         * Payment item name.
         */
        name: string;
        /**
         * Payment item price.
         */
        price: number;
        /**
         * Payment item quantity.
         */
        quantity?: number;
    };
    /**
     * An object representing information about the user.
     */
    type PaymentUserInfo = {
        /**
         * User's first name. Value is `null` if
         *  there is no first name information.
         */
        firstName: string;
        /**
         * User's last name. Value is `null` if
         *  there is no last name information.
         */
        lastName: string;
        /**
         * User's phone number. Value is `null` if
         *  there is no phone number information.
         */
        phone: string;
        /**
         * User's email address. Value is `null` if
         *  there is no email address information.
         */
        email: string;
        /**
         * User's country code. A three-letter
         *  [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) country code. Value
         *  is `null` if there is no country information.
         */
        countryCode: string;
    };
    /**
     * The Currencies API contains functionality for displaying prices in your store in different currencies, getting exchange rates, and converting between currencies.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.Currencies.html#)
     */
    interface Currencies {
        /**
         * Gets conversion rates and converts amounts.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.Currencies.html#currencyConverter)
         */
        readonly currencyConverter: Currencies.CurrencyConverter;
        /**
         * Gets and sets currencies that you want to support on your site.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.Currencies.html#siteSettings)
         */
        readonly siteSettings: Currencies.SiteSettings;
        /**
         * Gets the list of all currencies for which Wix supports conversion.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.Currencies.html#getAllCurrencies)
         */
        getAllCurrencies(): Promise<Currencies.Currency[]>;
    }
    /**
     * Events fired by payments created using the Pay API.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.Events.html#)
     */
    interface Events {
        /**
         * An event that fires when a payment's transaction status is changed.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.Events.html#onPaymentUpdate)
         */
        onPaymentUpdate(event: Events.PaymentUpdateEvent): void;
    }
    /**
     * The Currencies API contains functionality for displaying prices in your store in different currencies, getting exchange rates, and converting between currencies.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.Currencies.html#)
     */
    namespace Currencies {
        /**
         * An object representing a currency.
         */
        type Currency = {
            /**
             * A 3-letter
             *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
             */
            code: string;
            /**
             * A currency symbol.
             */
            symbol: string;
        };
        /**
         * An object for retrieving conversion rates and converting amounts.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.Currencies.CurrencyConverter.html#)
         */
        interface CurrencyConverter {
            /**
             * Converts an array of one or more amounts from one currency to another.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.Currencies.CurrencyConverter.html#convertAmounts)
             */
            convertAmounts(options: CurrencyConverter.ConvertAmountsOptions): Promise<CurrencyConverter.ConvertedAmounts>;
            /**
             * Gets a currency conversion rate.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.Currencies.CurrencyConverter.html#getConversionRate)
             */
            getConversionRate(sourceCurrency: string, targetCurrency: string): Promise<CurrencyConverter.ConversionRate>;
        }
        /**
         * Site-related currency settings.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.Currencies.SiteSettings.html#)
         */
        interface SiteSettings {
            /**
             * Gets the list of supported currencies that you set for your site.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.Currencies.SiteSettings.html#getCurrencies)
             */
            getCurrencies(): Promise<SiteSettings.CurrencyCode[]>;
            /**
             * Sets the list of currencies that the site will support.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.Currencies.SiteSettings.html#setCurrencies)
             */
            setCurrencies(options: SiteSettings.CurrencyCode[]): Promise<void>;
        }
        /**
         * An object for retrieving conversion rates and converting amounts.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.Currencies.CurrencyConverter.html#)
         */
        namespace CurrencyConverter {
            /**
             * An object representing a currency conversion rate.
             */
            type ConversionRate = {
                /**
                 * The conversion rate between the source and target currencies.
                 */
                rate: number;
                /**
                 * The date and time when the rate was set.
                 */
                timestamp: Date;
            };
            /**
             * An object representing the currencies and amounts to be converted.
             */
            type ConvertAmountsOptions = {
                /**
                 * Amounts to convert.
                 */
                amounts: number[];
                /**
                 * Currency to convert from.  The `from` currency code used must exist in the array returned by the [`getAllCurrencies()`](wix-pay-backend.Currencies.html#getAllCurrencies) function.
                 */
                from: string;
                /**
                 * Currency to convert to. The `to` currency code used must exist in the array returned by the [`getAllCurrencies()`](wix-pay-backend.Currencies.html#getAllCurrencies) function.
                 *
                 * > **Note:** The `from` and `to` currency codes used must exist in the array returned by the [`getAllCurrencies()`](wix-pay-backend.Currencies.html#getAllCurrencies) function.
                 */
                to: string;
            };
            /**
             * An object representing the results of a currency conversion.
             */
            type ConvertedAmounts = {
                /**
                 * Array of converted amounts.
                 */
                amounts: number[];
                /**
                 * The date and time when the currency exchange rate was set.
                 */
                timestamp: Date;
            };
        }
        /**
         * Site-related currency settings.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.Currencies.SiteSettings.html#)
         */
        namespace SiteSettings {
            /**
             * An object representing an ISO currency code.
             */
            type CurrencyCode = {
                /**
                 * A 3-letter
                 *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
                 */
                code: string;
            };
        }
    }
    /**
     * Events fired by payments created using the Pay API.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pay-backend.Events.html#)
     */
    namespace Events {
        /**
         * An object representing a payment update.
         */
        type PaymentUpdateEvent = {
            /**
             * The payment's information.
             */
            payment: Payment;
            /**
             * Payment status.
             *  One of:
             *
             *  + `"Successful"`
             *  + `"Pending"`
             *  + `"Failed"`
             *  + `"Chargeback"`
             *  + `"Refunded"`
             *  + `"Offline"`
             *  + `"PartiallyRefunded"`
             *  + `"Cancelled"`
             *  + `"Undefined"`
             */
            status: string;
            /**
             * ID of the payment transaction.
             */
            transactionId: string;
            /**
             * User information.
             */
            userInfo: PaymentUserInfo;
        };
    }
}

// /types/common/wix-pay.d.ts
/**
 * The wix-pay module contains functionality for working with
 *  payments from client-side code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-pay.html#)
 */
declare module 'wix-pay' {
    /**
     * Contains functionality for displaying prices in your store in different currencies, getting exchange rates, and converting between currencies.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pay.html#currencies)
     */
    const currencies: Currencies;
    /**
     * Starts a payment.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pay.html#startPayment)
     */
    function startPayment(paymentId: string, options?: PaymentOptions): Promise<PaymentResult>;
    /**
     * An object representing a payment.
     */
    type Payment = {
        /**
         * Payment transaction ID.
         */
        id: string;
        /**
         * Payment total amount.
         */
        amount: number;
        /**
         * Payment currency. A three-letter
         *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
         */
        currency: string;
        /**
         * Payment items.
         */
        items: PaymentItem[];
    };
    /**
     * An object representing a payment item.
     */
    type PaymentItem = {
        /**
         * Payment item name.
         */
        name: string;
        /**
         * Payment item price.
         */
        price: number;
        /**
         * Payment item quantity.
         */
        quantity: number;
    };
    /**
     * An object representing the options of a payment.
     */
    type PaymentOptions = {
        /**
         * Absolute URL of a terms and conditions
         *  page. If a link is present, an agreement checkbox will be presented alongside the link.
         */
        termsAndConditionsLink?: string;
        /**
         * Whether to show a thank you page. Defaults to `true`.
         */
        showThankYouPage?: boolean;
        /**
         * Whether to skip the user info page. Defaults to `false`.
         *  The page will be skipped only if user info was passed to [`createPayment()`](wix-pay-backend.html#createPayment) as
         *  a part of the `PaymentInfo` object.
         */
        skipUserInfoPage?: boolean;
        /**
         * An object representing information about the user. It will be used to prefill
         *  user info form during payment process.
         *
         *  Deprecation note: Pass user information to [`createPayment( )`](wix-pay-backend.html#createPayment) instead.
         */
        userInfo?: PaymentUserInfo;
    };
    /**
     * An object representing a payment result.
     */
    type PaymentResult = {
        /**
         * The payment.
         */
        payment: Payment;
        /**
         * Payment status. One of:
         *
         *  + "`Successful`": Payment was successfully received.
         *  + "`Pending`": Payment is pending payment provider approval.
         *  + "`Failed`": Payment has failed.
         *  + "`Chargeback`": Payment is chargeback.
         *  + "`Refunded`": Payment was fully refunded.
         *  + "`Offline`": Payment will be executed offline.
         *  + "`PartiallyRefunded`": Payment was partially refunded.
         *  + "`Cancelled`": Payment was cancelled and was not processed.
         *  + "`Undefined`": Payment status is pending payment provider input.
         */
        status: string;
        /**
         * ID of the payment transaction.
         */
        transactionId: string;
        /**
         * An object representing information about the user.
         */
        userInfo: PaymentUserInfo;
    };
    /**
     * An object representing information about the user.
     */
    type PaymentUserInfo = {
        /**
         * User's first name. Value is `null` if
         *  there is no first name information.
         */
        firstName: string;
        /**
         * User's last name. Value is `null` if
         *  there is no last name information.
         */
        lastName: string;
        /**
         * User's country code. A three-letter
         *  [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) country code. Value
         *  is `null` if there is no country information.
         */
        country: string;
        /**
         * User's phone number. Value is `null` if
         *  there is no phone number information.
         */
        phone: string;
        /**
         * User's email address. Value is `null` if
         *  there is no email address information.
         */
        email: string;
    };
    /**
     * The Currencies API contains functionality for displaying prices in your store in different currencies, getting exchange rates, and converting between currencies.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pay.Currencies.html#)
     */
    interface Currencies {
        /**
         * Gets conversion rates and converts amounts.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pay.Currencies.html#currencyConverter)
         */
        readonly currencyConverter: Currencies.CurrencyConverter;
        /**
         * Gets currencies that you set for your site.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pay.Currencies.html#siteSettings)
         */
        readonly siteSettings: Currencies.SiteSettings;
        /**
         * Gets the list of all currencies for which Wix supports conversion.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pay.Currencies.html#getAllCurrencies)
         */
        getAllCurrencies(): Promise<Currencies.Currency[]>;
    }
    /**
     * The Currencies API contains functionality for displaying prices in your store in different currencies, getting exchange rates, and converting between currencies.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-pay.Currencies.html#)
     */
    namespace Currencies {
        /**
         * An object representing a currency.
         */
        type Currency = {
            /**
             * A 3-letter
             *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
             */
            code: string;
            /**
             * A currency symbol.
             */
            symbol: string;
        };
        /**
         * An object for retrieving conversion rates and converting amounts.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pay.Currencies.CurrencyConverter.html#)
         */
        interface CurrencyConverter {
            /**
             * Converts an array of amounts from one currency to another.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-pay.Currencies.CurrencyConverter.html#convertAmounts)
             */
            convertAmounts(options: CurrencyConverter.ConvertAmountsOptions): Promise<CurrencyConverter.ConvertedAmounts>;
            /**
             * Gets a currency conversion rate.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-pay.Currencies.CurrencyConverter.html#getConversionRate)
             */
            getConversionRate(sourceCurrency: string, targetCurrency: string): Promise<CurrencyConverter.ConversionRate>;
        }
        /**
         * Site-related currency settings.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pay.Currencies.SiteSettings.html#)
         */
        interface SiteSettings {
            /**
             * Gets the list of supported currencies that you set for your site.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-pay.Currencies.SiteSettings.html#getCurrencies)
             */
            getCurrencies(): Promise<SiteSettings.CurrencyCode[]>;
        }
        /**
         * An object for retrieving conversion rates and converting amounts.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pay.Currencies.CurrencyConverter.html#)
         */
        namespace CurrencyConverter {
            /**
             * An object representing a currency conversion rate.
             */
            type ConversionRate = {
                /**
                 * The conversion rate between the source and target currencies.
                 */
                rate: number;
                /**
                 * The date and time when the rate was set.
                 */
                timestamp: Date;
            };
            /**
             * An object representing the currencies and amounts to be converted.
             */
            type ConvertAmountsOptions = {
                /**
                 * Amounts to convert.
                 */
                amounts: number[];
                /**
                 * Currency to convert from.  The `from` currency code used must exist in the array returned by the [`getAllCurrencies()`](wix-pay.Currencies.html#getAllCurrencies) function.
                 */
                from: string;
                /**
                 * Currency to convert to. The `to` currency code used must exist in the array returned by the [`getAllCurrencies()`](wix-pay.Currencies.html#getAllCurrencies) function.
                 * > **Note:**
                 * The `from` and `to` currency codes used must exist in the array returned by the
                 * [`getAllCurrencies()`](wix-pay.Currencies.html#getAllCurrencies) function.
                 */
                to: string;
            };
            /**
             * An object representing the results of a currency conversion.
             */
            type ConvertedAmounts = {
                /**
                 * Array of converted amounts.
                 */
                amounts: number[];
                /**
                 * The date and time when the currency exchange rate was set.
                 */
                timestamp: Date;
            };
        }
        /**
         * Site-related currency settings.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-pay.Currencies.SiteSettings.html#)
         */
        namespace SiteSettings {
            /**
             * An object representing an ISO currency code.
             */
            type CurrencyCode = {
                /**
                 * A 3-letter
                 *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
                 */
                code: string;
            };
        }
    }
}

// /types/common/wix-paid-plans.d.ts
/**
 * The wix-paid-plans module contains functionality for working with
 *  pricing plans from client-side code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-paid-plans.html#)
 */
declare module 'wix-paid-plans' {
    /**
     * Cancels a specific order (subscription) of a plan.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-paid-plans.html#cancelOrder)
     */
    function cancelOrder(orderId: string): Promise<void>;
    /**
     * Gets the orders (plan subscriptions) for the currently-logged in member.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-paid-plans.html#getCurrentMemberOrders)
     */
    function getCurrentMemberOrders(offset?: number, limit?: number): Promise<Order[]>;
    /**
     * Orders a pricing plan.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-paid-plans.html#orderPlan)
     */
    function orderPlan(planId: string): Promise<OrderResult>;
    /**
     * Orders and purchases a pricing plan.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-paid-plans.html#purchasePlan)
     */
    function purchasePlan(planId: string): Promise<PurchaseResult>;
    /**
     * An object representing a pricing plan order (subscription).
     */
    type Order = {
        /**
         * Order ID of the purchase of the plan, auto-generated when an order is created.
         */
        id: string;
        /**
         * Status of the payment for the plan. Can be `PAID`, `FAILED`, `UNPAID`, and `PAYMENT_STATUS_UNDEFINED`.
         */
        paymentStatus: string;
        /**
         * Date and time until which the plan is valid.
         */
        validUntil: Date;
        /**
         * Object containing the price of the plan.
         */
        price: Price;
        /**
         * If the plan is cancelled, the cause of the cancellation. One of:
         *
         *  + `"UNDEFINED"`: Cancellation initiator unknown.
         *  + `"OWNER"`: Order (subscription) was canceled by site owner.
         *  + `"MEMBER"`: Order (subscription) was canceled by member.
         *  + `"PAYMENT_FAILURE"`: Subscription was canceled because of payment failure.
         *  + `"SETUP_FAILURE"`: Subscription was canceled because of payment setup failure.
         */
        cancellationInitiator: string;
        /**
         * Date and time from which the plan is valid.
         */
        validFrom: Date;
        /**
         * Name of the plan.
         */
        planName: string;
        /**
         * ID of the plan for Wix Pay. If plan is free, this ID is blank.
         */
        wixPayOrderId: string;
        /**
         * If the plan is recurring. If true, the price is deducted weekly, monthly, or yearly.
         */
        recurring: boolean;
        /**
         * Date and time the order was created.
         */
        dateCreated: Date;
        /**
         * Status of the order. Can be `ACTIVE`, `PENDING`, `CANCELED`, `EXPIRED`, `PENDING_CANCELLATION`, and `ORDER_STATUS_UNDEFINED`.
         */
        status: string;
        /**
         * Role assigned after purchasing the plan.
         */
        roleID: string;
        /**
         * Description of the plan.
         */
        planDescription: string;
        /**
         * ID for the member who purchased the plan.
         */
        memberId: string;
        /**
         * How the plan was purchased, either `ONLINE` or `OFFLINE`.
         */
        orderType: string;
        /**
         * ID of the plan.
         */
        planId: string;
        /**
         * Object containing properties about how long the plan is valid.
         */
        validFor: ValidFor;
        /**
         * How many trial days were given to the subscriber of the plan.  Available only for orders whose plans are recurring, meaning plans whose pricing model is `subscription`.
         */
        freeTrialDays?: number;
    };
    /**
     * An object representing an order result.
     */
    type OrderResult = {
        /**
         * ID of the order.
         */
        orderId: string;
        /**
         * Wix Pay ID of the order being purchased.
         */
        wixPayOrderId: string;
    };
    /**
     * An object representing the period for which a plan is valid.
     */
    type Period = {
        /**
         * The number of units until the plan expires.
         */
        amount: number;
        /**
         * Time period for billing the plan, such as `MONTH`.
         */
        unit: string;
    };
    /**
     * An object representing the price of a purchased plan.
     */
    type Price = {
        /**
         * Payment currency. A three-letter
         *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
         */
        currency: string;
        /**
         * The cost of the plan.
         */
        amount: number;
    };
    /**
     * An object representing a purchase result for a non-free plan.
     */
    type PurchaseResult = {
        /**
         * ID of the order being purchased.
         */
        orderId: string;
        /**
         * Payment status in Wix Pay. One of:
         *
         *  + "`Successful`": Payment was successfully received.
         *  + "`Pending`": Payment is pending payment provider approval.
         *  + "`Failed`": Payment has failed.
         *  + "`Chargeback`": Payment is a chargeback.
         *  + "`Refunded`": Payment was fully refunded.
         *  + "`Offline`": Payment will be executed offline.
         *  + "`PartiallyRefunded`": Payment was partially refunded.
         *  + "`Cancelled`": Payment was cancelled and was not processed.
         *  + "`Undefined`": Payment status is pending payment provider input.
         */
        wixPayStatus: string;
        /**
         * Wix Pay ID of the order being purchased. Returned for non-free plans.
         */
        wixPayOrderId: string;
    };
    /**
     * An object representing a purchase result for a free plan.
     */
    type PurchaseResultFree = {
        /**
         * ID of the order being purchased.
         */
        orderId: string;
    };
    /**
     * An object representing how long a plan is valid.
     */
    type ValidFor = {
        /**
         * If true, the plan does not expire.
         */
        forever: boolean;
        /**
         * Object containing the period for which the plan is valid.
         */
        period: Period;
    };
}

// /types/common/wix-paid-plans-backend.d.ts
/**
 * The wix-paid-plans-backend module contains functionality for working with
 *  pricing plan backend events.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-paid-plans-backend.html#)
 */
declare module 'wix-paid-plans-backend' {
    /**
     * Events that are fired by actions relating to pricing plans.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-paid-plans-backend.Events.html#)
     */
    interface Events {
        /**
         * An event that fires when a user purchases a plan.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-paid-plans-backend.Events.html#onPlanPurchased)
         */
        onPlanPurchased(event: Events.PlanPurchasedEvent): void;
    }
    /**
     * Events that are fired by actions relating to pricing plans.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-paid-plans-backend.Events.html#)
     */
    namespace Events {
        /**
         * An object representing a new pricing plan order (subscription).
         */
        type Order = {
            /**
             * Order ID of the purchase of the plan, auto-generated when an order is created.
             */
            id: string;
            /**
             * Status of the payment for the plan. Can be `PAID`, `REFUNDED`, `FAILED`, `UNPAID`, and `PAYMENT_STATUS_UNDEFINED`.
             */
            paymentStatus: string;
            /**
             * Date and time until which the plan is valid.
             */
            validUntil: Date;
            /**
             * Object containing the price of the plan.
             */
            price: Events.Price;
            /**
             * If the plan is cancelled, the reason why. One of:
             *
             *  + `OWNER_CANCELED`: The owner cancelled.
             *  + `PAYMENT_PROVIDER_CANCELED`: The payment provider cancelled.
             *  + `PAYMENT_FAILED`: The payment failed.
             *  + `UOU_CANCELED`: The site member cancelled.
             *  + `CANCELLATION_REASON_UNDEFINED`: The reason is undefined.
             */
            cancellationReason: string;
            /**
             * If the plan is cancelled, the cause of the cancellation. One of:
             *
             *  + `"UNDEFINED"`: Cancellation initiator undefined.
             *  + `"OWNER"`: Order (subscription) was canceled by site owner.
             *  + `"MEMBER"`: Order (subscription) was canceled by member.
             *  + `"PAYMENT_FAILURE"`: Subscription was canceled because of payment failure.
             *  + `"SETUP_FAILURE"`: Subscription was canceled because of payment setup failure.
             */
            cancellationInitiator: string;
            /**
             * Date and time from which the plan is valid.
             */
            validFrom: Date;
            /**
             * Name of the plan.
             */
            planName: string;
            /**
             * ID of the plan for Wix Pay. If plan is free, this ID is blank.
             */
            wixPayOrderId: string;
            /**
             * If the plan is recurring. If true, the price is deducted weekly, monthly, or yearly.
             */
            recurring: boolean;
            /**
             * Date and time the order was created.
             */
            dateCreated: Date;
            /**
             * Status of the order. Can be `ACTIVE`, `PENDING`, `CANCELED`, `EXPIRED`, `PENDING_CANCELLATION`, and `ORDER_STATUS_UNDEFINED`.
             */
            status: string;
            /**
             * Role assigned after purchasing the plan.
             */
            roleID: string;
            /**
             * Description of the plan.
             */
            planDescription: string;
            /**
             * ID for the member who purchased the plan.
             */
            memberId: string;
            /**
             * How the plan was purchased, either `ONLINE` pr `OFFLINE`.
             */
            orderType: string;
            /**
             * ID of the plan.
             */
            planId: string;
            /**
             * Object containing properties about how long the plan is valid.
             */
            validFor: Events.ValidFor;
            /**
             * How many trial days were given to the subscriber of the plan. Available only for orders whose plans are recurring, meaning plans whose pricing model is `subscription`.
             */
            freeTrialDays?: number;
        };
        /**
         * An object representing the period for which a plan is valid.
         */
        type Period = {
            /**
             * The number of units until the plan expires.
             */
            amount: number;
            /**
             * Time period for billing the plan, such as `MONTH`.
             */
            unit: string;
        };
        /**
         * An object representing a new pricing plan purchase.
         */
        type PlanPurchasedEvent = {
            /**
             * Object containing the details about the plan's order.
             */
            order: Events.Order;
        };
        /**
         * An object representing the price of a purchased plan.
         */
        type Price = {
            /**
             * Payment currency. A three-letter
             *  [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
             */
            currency: string;
            /**
             * The cost of the plan.
             */
            amount: number;
        };
        /**
         * An object representing how long a plan is valid.
         */
        type ValidFor = {
            /**
             * If true, the plan does not expire.
             */
            forever: boolean;
            /**
             * Object containing the period for which the plan is valid.
             */
            period: Events.Period;
        };
    }
}

// /types/common/wix-members-backend.d.ts
/**
 * The wix-members-backend module contains functionality
 * for working with your site members from backend code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.html#)
 */
declare module 'wix-members-backend' {
    /**
     * The Authentication API contains functionality for authenticating users from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.html#authentication)
     */
    const authentication: Authentication;
    /**
     * The Authorization API contains functionality for working with
     * [member roles](https://support.wix.com/en/site-members/setting-your-members-permissions)
     * from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.html#authorization)
     */
    const authorization: Authorization;
    /**
     * The Badges API contains functionality for working with [member badges](https://support.wix.com/en/article/about-member-badges) from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.html#badges)
     */
    const badges: Badges;
    /**
     * The CurrentMember API contains functionality for viewing and managing site members from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.html#currentMember)
     */
    const currentMember: CurrentMember;
    /**
     * The Members API contains functionality for viewing and managing site members from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.html#members)
     */
    const members: Members;
    type AuthOptions = {
        /**
         * Prevents permission checks from running for the operation.
         */
        suppressAuth: boolean;
    };
    /**
     * The Authentication API contains functionality for authenticating users from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Authentication.html#)
     */
    interface Authentication {
        /**
         * Approves a pending member using an email address.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Authentication.html#approveByEmail)
         */
        approveByEmail(email: string): Promise<string>;
        /**
         * Approves a pending member using an approval token.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Authentication.html#approveByToken)
         */
        approveByToken(token: string): Promise<string>;
        /**
         * Blocks a member from logging in to the site.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Authentication.html#blockByEmail)
         */
        blockByEmail(email: string): Promise<void>;
        /**
         * Changes a member's login email address.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Authentication.html#changeLoginEmail)
         */
        changeLoginEmail(memberId: string, newEmail: string): Promise<Members.Member>;
        /**
         * Creates a session token for a member authenticated by a 3rd party.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Authentication.html#generateSessionToken)
         */
        generateSessionToken(email: string): Promise<string>;
        /**
         * Logs a registered member in with an email and password.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Authentication.html#login)
         */
        login(email: string, password: string): Promise<string>;
        /**
         * Registers a new site member.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Authentication.html#register)
         */
        register(email: string, password: string, options?: Authentication.RegistrationOptions): Promise<Authentication.RegistrationResult>;
        /**
         * Sends a site member an email with a link to set their password.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Authentication.html#sendSetPasswordEmail)
         */
        sendSetPasswordEmail(email: string, options?: Authentication.SetPasswordEmailOptions): Promise<void>;
    }
    /**
     * The Authorization API contains functionality for working with
     * [member roles](https://support.wix.com/en/site-members/setting-your-members-permissions)
     * from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Authorization.html#)
     */
    interface Authorization {
        /**
         * Assigns a role to a member.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Authorization.html#assignRole)
         */
        assignRole(roleId: string, memberId: string, options?: AuthOptions): Promise<void>;
        /**
         * Removes a role from a member.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Authorization.html#removeRole)
         */
        removeRole(roleId: string, memberId: string, options?: AuthOptions): Promise<void>;
    }
    /**
     * The Badges API contains functionality for working with [member badges](https://support.wix.com/en/article/about-member-badges) from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Badges.html#)
     */
    interface Badges {
        /**
         * Assigns a badge to site members.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Badges.html#assignMembers)
         */
        assignMembers(badgeId: string, memberIds: string[]): Promise<string[]>;
        /**
         * Creates a badge.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Badges.html#createBadge)
         */
        createBadge(badgeInfo: Badges.BadgeInfo): Promise<Badges.Badge>;
        /**
         * Deletes a badge.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Badges.html#deleteBadge)
         */
        deleteBadge(badgeId: string): Promise<void>;
        /**
         * Lists the badges assigned to each of the specified site members.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Badges.html#listMemberBadges)
         */
        listMemberBadges(memberIds: string[]): Promise<Badges.MemberBadges[]>;
        /**
         * Lists the IDs of all members assigned to a badge.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Badges.html#listMembers)
         */
        listMembers(badgeId: string): Promise<string[]>;
        /**
         * Removes site members from an assigned badge.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Badges.html#removeMembers)
         */
        removeMembers(badgeId: string, memberIds: string[]): Promise<void>;
        /**
         * Updates a badge.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Badges.html#updateBadge)
         */
        updateBadge(badgeId: string, badgeInfo: Badges.BadgeInfo): Promise<Badges.Badge>;
    }
    /**
     * The CurrentMember API contains functionality for viewing and managing site members from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.CurrentMember.html#)
     */
    interface CurrentMember {
        /**
         * Retrieves the currently logged-in member.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.CurrentMember.html#getMember)
         */
        getMember(options?: Members.FieldsetOptions): Promise<Members.Member>;
        /**
         * Retrieves the member's roles.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.CurrentMember.html#getRoles)
         */
        getRoles(): Promise<CurrentMember.Role[]>;
        /**
         * Removes the currently logged-in member from the site community and sets their profile to private.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.CurrentMember.html#makeProfilePrivate)
         */
        makeProfilePrivate(): Promise<Members.Member>;
        /**
         * Joins the currently logged-in member to the site community and sets their profile to public.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.CurrentMember.html#makeProfilePublic)
         */
        makeProfilePublic(): Promise<Members.Member>;
        /**
         * Changes the currently logged-in member's slug.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.CurrentMember.html#updateSlug)
         */
        updateSlug(slug: string): Promise<Members.Member>;
    }
    /**
     * Events that are triggered by actions on a site's members.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Events.html#)
     */
    interface Events {
        /**
         * An event that is triggered when a site member is created.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Events.html#onMemberCreated)
         */
        onMemberCreated(event: Events.CreatedMemberEvent): void;
        /**
         * An event that is triggered when a site member is deleted.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Events.html#onMemberDeleted)
         */
        onMemberDeleted(event: Events.DeletedMemberEvent): void;
        /**
         * An event that is triggered when a site member's information is updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Events.html#onMemberUpdated)
         */
        onMemberUpdated(event: Events.UpdatedMemberEvent): void;
    }
    /**
     * The Members API contains functionality for viewing and managing site members from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Members.html#)
     */
    interface Members {
        /**
         * Deletes a member.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Members.html#deleteMember)
         */
        deleteMember(id: string): Promise<void>;
        /**
         * Deletes a member's street addresses.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Members.html#deleteMemberAddresses)
         */
        deleteMemberAddresses(id: string): Promise<Members.Member>;
        /**
         * Clears a member's email addresses.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Members.html#deleteMemberEmails)
         */
        deleteMemberEmails(id: string): Promise<Members.Member>;
        /**
         * Clears a member's phone numbers.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Members.html#deleteMemberPhones)
         */
        deleteMemberPhones(id: string): Promise<Members.Member>;
        /**
         * Retrieves a member by ID.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Members.html#getMember)
         */
        getMember(id: string, options?: Members.FieldsetOptions): Promise<Members.Member>;
        /**
         * Updates a member's properties.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Members.html#updateMember)
         */
        updateMember(id: string, member: Members.MemberInfo): Promise<Members.Member>;
    }
    /**
     * The Authentication API contains functionality for authenticating users from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Authentication.html#)
     */
    namespace Authentication {
        /**
         * An object that contains information about a site contact.
         */
        type ContactInfo = {
            /**
             * Contact's first name.
             */
            firstName?: string;
            /**
             * Contact's last name.
             */
            lastName?: string;
            /**
             * Contact's image source URL.
             */
            picture?: string;
            /**
             * List of contact's email addresses.
             *  When creating a contact, if no phone number is
             *  provided, at least 1 email address must be provided.
             */
            emails?: string[];
            /**
             * List of contact's phone numbers.
             *  When creating a contact, if no email is
             *  provided, at least 1 phone number must be provided.
             */
            phones?: string[];
            /**
             * List of contact's labels. [Labels](https://support.wix.com/en/article/creating-contact-labels)
             *  are used to organize contacts. When setting the `labels` property, you can
             *  only list labels that already exist in your site's [Contact List](https://support.wix.com/en/article/accessing-your-contact-list).
             */
            labels?: string[];
            /**
             * Contact's language.
             */
            language?: string;
            /**
             * Any
             *  number of custom fields. [Custom fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)
             *  are used to store additional information about your site's contacts. When
             *  setting a custom field, use key:value pairs where the key matches the names
             *  defined in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).
             *  You can only set values for custom fields that already exist in the Contacts
             *  application.
             */
            customFields?: string | number | Date;
        };
        /**
         * An object that contains information about a site registration.
         */
        type RegistrationOptions = {
            /**
             * Contact information.
             */
            contactInfo?: Authentication.ContactInfo;
            /**
             * Sets the [privacy status](https://support.wix.com/en/article/member-privacy-settings-for-groups) of a new member upon registration.
             * One of:
             *
             *  - `"PUBLIC"`: Sets the new member status to public. A member whose status is public is a member of the site's community.
             *  - `"PRIVATE"`: Sets the new member status to private. A member whose status is private is not a member of the site's community.
             *
             * Defaults to `"PRIVATE"`.
             */
            privacyStatus?: string;
        };
        type RegistrationResult = {
            /**
             * Registration status.
             *
             * One of:
             *
             * - `"PENDING"`: The member must be approved before they can log in to the site.
             * - `"ACTIVE"`: The member is approved and can log in to the site.
             */
            status: string;
            /**
             * Token for logging in the current visitor
             *  as a site member with the
             * [`applySessionToken()`](wix-members/authentication/applySessionToken)
             *  function from wix-members.
             *
             * Returned when `status` is `"ACTIVE"`.
             */
            sessionToken?: string;
            /**
             * Token for approving the member
             * with the [`approveByToken()`](wix-members-backend/authentication/approveByToken)
             * function. `approvalToken` is safe to pass via email or from page code to
             * backend code.
             *
             * Returned when `status` is `"PENDING"`.
             */
            approvalToken?: string;
            /**
             * The registered member.
             */
            member: Members.Member;
        };
        type SetPasswordEmailOptions = {
            /**
             * Whether to hide the "ignore this email" message.
             *
             * If `false`, the email tells the member
             * they can safely ignore
             * if they did not request the password change.
             *
             * Defaults to `false`.
             */
            hideIgnoreMessage?: boolean;
        };
    }
    /**
     * The Badges API contains functionality for working with [member badges](https://support.wix.com/en/article/about-member-badges) from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Badges.html#)
     */
    namespace Badges {
        /**
         * An object representing a member badge.
         */
        type Badge = {
            /**
             * Badge ID.
             */
            _id: string;
            /**
             * Badge title.
             */
            title: string;
            /**
             * Badge's unique URL as used in a dynamic page.
             */
            slug: string;
            /**
             * Badge description.
             */
            description: string;
            /**
             * Badge background color as a hexadecimal RGB color value.
             *
             * Defaults to `"#796EFF"` (purple).
             */
            backgroundColor: string;
            /**
             * Badge text color as a hexadecimal RGB color value.
             *
             * Defaults to `"#FFFFFF"` (white).
             */
            textColor: string;
            /**
             * Badge icon as an SVG image. One of:
             *
             *   - An external web URL in the following format: `http(s)://`.
             *   - The [source URL](wix-media-backend.mediaManager.html#getFileUrl) for a Wix Media Manager file.
             *     Wix Media Manager file names in a `wix:image://...` format are not supported.
             */
            icon: string;
            /**
             * ID of the role that badge members are assigned to.
             */
            roleId: string;
            /**
             * Date and time the badge was created.
             */
            _createdDate: Date;
            /**
             * Date and time the badge was last updated.
             */
            _updatedDate: Date;
        };
        /**
         * Information to use when creating or updating a badge.
         */
        type BadgeInfo = {
            /**
             * Badge title.
             */
            title: string;
            /**
             * Badge description.
             */
            description?: string;
            /**
             * Badge background color as a hexadecimal RGB color value.
             *
             * Defaults to `"#796EFF"` (purple).
             */
            backgroundColor?: string;
            /**
             * Badge text color as a hexadecimal RGB color value.
             *
             * Defaults to `"#FFFFFF"` (white).
             */
            textColor?: string;
            /**
             * Badge icon as an SVG image. One of:
             *
             *   - An external web URL in the following format: `http(s)://`.
             *   - The [source URL](wix-media-backend.mediaManager.html#getFileUrl) for a Wix Media Manager file.
             *     Wix Media Manager file names in a `wix:image://...` format are not supported.
             */
            icon?: string;
        };
        /**
         * An object representing the badges associated with a member.
         */
        type MemberBadges = {
            /**
             * Member ID.
             */
            memberId: string;
            /**
             * List of badge IDs assigned to the member.
             */
            badgeIds: string[];
        };
    }
    /**
     * The CurrentMember API contains functionality for viewing and managing site members from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.CurrentMember.html#)
     */
    namespace CurrentMember {
        type Role = {
            /**
             * Role ID.
             */
            _id: string;
            /**
             * Role name as defined in the site's
             *  [Member Permissions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fmember-permissions/roles)
             *  page or one of `"Admin"` or `"Member"`.
             */
            title: string;
            /**
             * Role description, if defined in the site's dashboard.
             */
            description?: string;
            /**
             * Role color, as defined in the site's
             * [Member Permissions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fmember-permissions/roles)
             * page.
             *
             * One of:
             *
             * - `"DARK_BLUE"`
             * - `"LIGHT_BLUE"`
             * - `"TEAL"`
             * - `"LIGHT_GREEN"`
             * - `"YELLOW"`
             * - `"ORANGE"`
             * - `"RED"`
             * - `"VIOLET"`
             * - `"PURPLE"`
             */
            color: string;
            /**
             * Date and time the role was created.
             */
            _createdDate?: Date;
        };
    }
    /**
     * Events that are triggered by actions on a site's members.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Events.html#)
     */
    namespace Events {
        /**
         * An object representing the site member that was created.
         */
        type CreatedMemberEvent = {
            /**
             * Event metadata.
             */
            metadata: Events.EventMetadata;
            /**
             * Information about the created member.
             */
            entity: Members.Member;
        };
        /**
         * An object representing the site member deletion event.
         */
        type DeletedMemberEvent = {
            /**
             * Event metadata.
             */
            metadata: Events.EventMetadata;
        };
        /**
         * Event metadata.
         */
        type EventMetadata = {
            /**
             * Event ID.
             */
            id: string;
            /**
             * Member ID associated with this event.
             */
            entityId: string;
            /**
             * Event timestamp.
             */
            eventTime: string;
            /**
             * Whether the event was triggered as a result of a privacy regulation application (for example, [GDPR](https://support.wix.com/en/article/gdpr-frequently-asked-questions)). For advanced users.
             */
            triggeredByAnonymizeRequest?: boolean;
        };
        /**
         * An object representing the site member whose information was updated.
         */
        type UpdatedMemberEvent = {
            /**
             * Event metadata.
             */
            metadata: Events.EventMetadata;
            /**
             * Information about the updated member.
             */
            entity: Members.Member;
        };
    }
    /**
     * The Members API contains functionality for viewing and managing site members from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members-backend.Members.html#)
     */
    namespace Members {
        type Address = {
            /**
             * Street address ID.
             */
            _id?: string;
            /**
             * Street address object, with number and name in separate fields.
             */
            streetAddress?: Members.StreetAddress;
            /**
             * Main address line, usually street and number, as free text.
             */
            addressLine?: string;
            /**
             * Free text providing more detailed address information,
             *  such as apartment, suite, or floor.
             */
            addressLine2?: string;
            /**
             * City name.
             */
            city?: string;
            /**
             * Code for a subdivision (such as state, prefecture, or province) in an
             * [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) format.
             */
            subdivision?: string;
            /**
             * 2-letter country code in an
             * [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
             */
            country?: string;
            /**
             * Postal code.
             */
            postalCode?: string;
        };
        type AddressInfo = {
            /**
             * Street address object, with number and name in separate fields.
             */
            streetAddress?: Members.StreetAddressInfo;
            /**
             * Main address line, usually street and number, as free text.
             */
            addressLine?: string;
            /**
             * Free text providing more detailed address information,
             *  such as apartment, suite, or floor.
             */
            addressLine2?: string;
            /**
             * City name.
             */
            city?: string;
            /**
             * Code for a subdivision (such as state, prefecture, or province) in an
             * [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) format.
             */
            subdivision?: string;
            /**
             * 2-letter country code in an
             * [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
             */
            country?: string;
            /**
             * Postal code.
             */
            postalCode?: string;
        };
        /**
         * Member's contact information. Contact information is stored in the
         */
        type ContactDetails = {
            /**
             * Contact's first name.
             */
            firstName?: string;
            /**
             * Contact's last name.
             */
            lastName?: string;
            /**
             * List of phone numbers.
             */
            phones: string[];
            /**
             * List of email addresses.
             */
            emails: string[];
            /**
             * List of street addresses.
             */
            addresses: Members.Address[];
            /**
             * Contact's birthdate, formatted as `"YYYY-MM-DD"`.
             *
             *  Example: `"2020-03-15"` for March 15, 2020.
             */
            birthdate?: string;
            /**
             * Contact's company name.
             */
            company?: string;
            /**
             * Contact's job title.
             */
            jobTitle?: string;
            /**
             * Set of key-value pairs.
             * Custom fields,
             * where each key is the field key,
             * and each value is the field's value for the member.
             */
            customFields: any;
        };
        /**
         * Member's contact information. Contact information is stored in the
         * [Contact List](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fcontacts).
         *
         *
         */
        type ContactInfo = {
            /**
             * Contact's first name.
             */
            firstName?: string;
            /**
             * Contact's last name.
             */
            lastName?: string;
            /**
             * List of phone numbers.
             */
            phones?: string[];
            /**
             * List of email addresses.
             */
            emails?: string[];
            /**
             * List of street addresses.
             */
            addresses?: Members.AddressInfo[];
            /**
             * Contact's birthdate, formatted as `"YYYY-MM-DD"`.
             *
             *  Example: `"2020-03-15"` for March 15, 2020.
             */
            birthdate?: string;
            /**
             * Contact's company name.
             */
            company?: string;
            /**
             * Contact's job title.
             */
            jobTitle?: string;
            /**
             * Set of key-value pairs.
             * Custom fields,
             * where each key is the field key,
             * and each value is the field's value for the member.
             */
            customFields?: any;
        };
        type FieldsetOptions = {
            /**
             * Predefined sets of fields to return.
             * When multiple fieldsets are provided, the union of all the included fields is returned.
             *
             * Predefined fieldsets are one of:
             *
             * - `"FULL"`: Returns all fields.
             * - `"PUBLIC"`: Returns `_id` and all fields under `profile`. With this fieldset, `profile.status`, `profile.privacyStatus`, and `profile.activityStatus` are returned as `"UNKNOWN"`.
             *
             * Defaults to `[ "PUBLIC" ]`.
             */
            fieldsets: string[];
        };
        /**
         * Member's profile photo.
         */
        type Image = {
            /**
             * Wix Media image ID,
             *  set when the member selects an image from Wix Media.
             */
            _id: string;
            /**
             * Image URL.
             */
            url: string;
            /**
             * Original image width.
             */
            height: number;
            /**
             * Original image height.
             */
            width: number;
            /**
             * X-axis offset.
             *
             *  Defaults to `0`.
             */
            offsetX: number;
            /**
             * Y-axis offset.
             *
             *  Defaults to `0`.
             */
            offsetY: number;
        };
        /**
         * Updated member.
         */
        type Member = {
            /**
             * Member ID.
             */
            _id: string;
            /**
             * Email used by the member to log in to the site.
             */
            loginEmail?: string;
            /**
             * Member site access status.
             *
             *
             *
             * One of:
             *
             * - `"PENDING"`: Member created and is waiting for approval by site owner.
             * - `"APPROVED"`: Member can log in to the site.
             * - `"OFFLINE"`: Member is a [guest author](https://support.wix.com/en/article/wix-blog-adding-guest-authors-to-your-blog) for the site blog and cannot log in to the site.
             * - `"BLOCKED"`: Member is blocked and cannot log in to the site.
             * - `"UNKNOWN"`: Insufficient permissions to get the status.
             *
             */
            status: string;
            /**
             * Contact ID.
             */
            contactId: string;
            /**
             * Member privacy status.
             *
             *
             *
             *
             * One of:
             *
             * - `"PUBLIC"`: Member is visible to everyone.
             * - `"PRIVATE"`: Member is hidden from site visitors and other site members. Member is returned only to site contributors and apps with the appropriate permissions.
             * - `"UNKNOWN"`: Insufficient permissions to get the status.
             *
             */
            privacyStatus: string;
            /**
             * Member activity status.
             *
             *
             *
             *
             * One of:
             *
             * - `"ACTIVE"`: Member can write forum posts and blog comments.
             * - `"MUTED"`: Member cannot write forum posts or blog comments.
             * - `"UNKNOWN"`: Insufficient permissions to get the status.
             *
             */
            activityStatus: string;
            /**
             * Date and time when the member was created.
             */
            _createdDate: Date;
            /**
             * Date and time when the member was updated.
             */
            _updatedDate: Date;
            /**
             * Date and time when the member last logged in to the site.
             */
            lastLoginDate?: Date;
            /**
             * Member's contact information. Contact information is stored in the
             * [Contact List](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fcontacts).
             *
             *
             */
            contactDetails?: Members.ContactDetails;
            /**
             * Profile display info.
             */
            profile: Members.Profile;
        };
        /**
         * Member details to update.
         */
        type MemberInfo = {
            /**
             * Member's contact information. Contact information is stored in the
             * [Contact List](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fcontacts).
             *
             *
             */
            contactDetails?: Members.ContactInfo;
            /**
             * Profile display info.
             */
            profile?: Members.ProfileInfo;
        };
        /**
         * Profile display info.
         */
        type Profile = {
            /**
             * Name that identifies the member to other members.
             * Displayed on the member's profile page
             * and interactions in the forum or blog.
             */
            nickname: string;
            /**
             * Slug that determines the member's profile page URL.
             */
            slug: string;
            /**
             * Member's profile photo.
             */
            profilePhoto?: Members.Image;
            /**
             * Member's profile photo.
             */
            coverPhoto?: Members.Image;
            /**
             * Member title.
             *
             *
             */
            title?: string;
        };
        /**
         * Member's profile photo.
         */
        type ProfileImageInfo = {
            /**
             * Wix Media image ID,
             *  set when the member selects an image from Wix Media.
             */
            _id?: string;
            /**
             * Image URL.
             */
            url?: string;
            /**
             * Original image width.
             */
            height?: number;
            /**
             * Original image height.
             */
            width?: number;
            /**
             * X-axis offset.
             *
             *  Defaults to `0`.
             */
            offsetX?: number;
            /**
             * Y-axis offset.
             *
             *  Defaults to `0`.
             */
            offsetY?: number;
        };
        /**
         * Profile display info.
         */
        type ProfileInfo = {
            /**
             * Name that identifies the member to other members.
             * Displayed on the member's profile page
             * and interactions in the forum or blog.
             */
            nickname?: string;
            /**
             * Member's profile photo.
             */
            profilePhoto?: Members.ProfileImageInfo;
            /**
             * Member's profile photo.
             */
            coverPhoto?: Members.ProfileImageInfo;
            /**
             * Member title.
             *
             *
             */
            title?: string;
        };
        /**
         * Street address object, with number and name in separate fields.
         */
        type StreetAddress = {
            /**
             * Street number.
             */
            number: string;
            /**
             * Street name.
             */
            name: string;
        };
        /**
         * Street address object, with number and name in separate fields.
         */
        type StreetAddressInfo = {
            /**
             * Street number.
             */
            number?: string;
            /**
             * Street name.
             */
            name?: string;
        };
    }
}

// /types/common/wix-members.d.ts
/**
 * The wix-members module contains functionality
 * for working with your site members from frontend page code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-members.html#)
 */
declare module 'wix-members' {
    /**
     * The Authentication API contains functionality for authenticating members from frontend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members.html#authentication)
     */
    const authentication: Authentication;
    /**
     * The CurrentMember API contains functionality for viewing and managing site members from frontend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members.html#currentMember)
     */
    const currentMember: CurrentMember;
    /**
     * The Authentication API contains functionality for authenticating members from frontend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members.Authentication.html#)
     */
    interface Authentication {
        /**
         * Logs the current member into the site using the given session token.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members.Authentication.html#applySessionToken)
         */
        applySessionToken(sessionToken: string): Promise<void>;
        /**
         * Logs a registered member in with an email and password.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members.Authentication.html#login)
         */
        login(email: string, password: string): Promise<void>;
        /**
         * Logs the current member out of the site.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members.Authentication.html#logout)
         */
        logout(): void;
        /**
         * Sets the function that runs when a member logs in.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members.Authentication.html#onLogin)
         */
        onLogin(handler: Authentication.LoginHandler): void;
        /**
         * Sets the function that runs when a member logs out.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members.Authentication.html#onLogout)
         */
        onLogout(handler: Authentication.LogoutHandler): void;
        /**
         * Prompts the current site visitor with a password reset modal.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members.Authentication.html#promptForgotPassword)
         */
        promptForgotPassword(): Promise<void>;
        /**
         * Prompts the current visitor to log in as a site member.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members.Authentication.html#promptLogin)
         */
        promptLogin(options?: Authentication.LoginOptions): Promise<void>;
        /**
         * Registers a new site member.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members.Authentication.html#register)
         */
        register(email: string, password: string, options?: Authentication.RegistrationOptions): Promise<Authentication.RegistrationResult>;
        /**
         * Sends a site member an email with a link to set their password.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members.Authentication.html#sendSetPasswordEmail)
         */
        sendSetPasswordEmail(email: string, options?: Authentication.SetPasswordEmailOptions): Promise<boolean>;
    }
    /**
     * The CurrentMember API contains functionality for viewing and managing site members from frontend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members.CurrentMember.html#)
     */
    interface CurrentMember {
        /**
         * Retrieves the currently logged-in member.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members.CurrentMember.html#getMember)
         */
        getMember(options?: CurrentMember.FieldsetOptions): Promise<CurrentMember.Member>;
        /**
         * Retrieves the member's roles.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members.CurrentMember.html#getRoles)
         */
        getRoles(): Promise<CurrentMember.Role[]>;
        /**
         * Removes the currently logged-in member from the site community and sets their profile to private.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members.CurrentMember.html#makeProfilePrivate)
         */
        makeProfilePrivate(): Promise<CurrentMember.Member>;
        /**
         * Joins the currently logged-in member to the site community and sets their profile to public.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-members.CurrentMember.html#makeProfilePublic)
         */
        makeProfilePublic(): Promise<CurrentMember.Member>;
    }
    /**
     * The Authentication API contains functionality for authenticating members from frontend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members.Authentication.html#)
     */
    namespace Authentication {
        /**
         * An object that contains information about a site contact.
         */
        type ContactInfo = {
            /**
             * Contact's first name.
             */
            firstName?: string;
            /**
             * Contact's last name.
             */
            lastName?: string;
            /**
             * Contact's image source URL.
             */
            picture?: string;
            /**
             * List of contact's email addresses.
             *  When creating a contact, if no phone number is
             *  provided, at least 1 email address must be provided.
             */
            emails?: string[];
            /**
             * List of contact's phone numbers.
             *  When creating a contact, if no email is
             *  provided, at least 1 phone number must be provided.
             */
            phones?: string[];
            /**
             * List of contact's labels. [Labels](https://support.wix.com/en/article/creating-contact-labels)
             *  are used to organize contacts. When setting the `labels` property, you can
             *  only list labels that already exist in your site's [Contact List](https://support.wix.com/en/article/accessing-your-contact-list).
             */
            labels?: string[];
            /**
             * Contact's language.
             */
            language?: string;
            /**
             * Any
             *  number of custom fields. [Custom fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)
             *  are used to store additional information about your site's contacts. When
             *  setting a custom field, use key:value pairs where the key matches the names
             *  defined in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).
             *  You can only set values for custom fields that already exist in the Contacts
             *  application.
             */
            customFields?: string | number | Date;
        };
        type LoginOptions = {
            /**
             * Whether to display the `"login"` or `"signup"` prompt.
             *
             * Defaults to `"signup"`.
             */
            mode?: string;
            /**
             * Whether the login form should be modal (`true`)
             * or full screen (`false`).
             *
             * Defaults to `false` (full screen).
             */
            modal?: boolean;
        };
        /**
         * An object that contains information about a site registration.
         */
        type RegistrationOptions = {
            /**
             * Contact information.
             */
            contactInfo?: Authentication.ContactInfo;
            /**
             * Sets the [privacy status](https://support.wix.com/en/article/member-privacy-settings-for-groups) of a new member upon registration.
             * One of:
             *
             *  - `"PUBLIC"`: Sets the new member status to public. A member whose status is public is a member of the site's community.
             *  - `"PRIVATE"`: Sets the new member status to private. A member whose status is private is not a member of the site's community.
             *
             * Defaults to `"PRIVATE"`.
             */
            privacyStatus?: string;
        };
        type RegistrationResult = {
            /**
             * Registration status.
             *
             * One of:
             *
             * - `"PENDING"`: The member must be approved before they can log in to the site.
             * - `"ACTIVE"`: The member is approved and can log in to the site.
             */
            status: string;
            /**
             * Token for approving the member
             * with the [`approveByToken()`](wix-members-backend/authentication/approveByToken)
             * function. `approvalToken` is safe to pass via email or from page code to
             * backend code.
             *
             * Returned when `status` is `"PENDING"`.
             */
            approvalToken?: string;
            /**
             * The registered member.
             *
             * Returned when `status` is `"ACTIVE"`.
             */
            member?: CurrentMember.Member;
        };
        type SetPasswordEmailOptions = {
            /**
             * Whether to hide the "ignore this email" message.
             *
             * If `false`, the email tells the member
             * they can safely ignore
             * if they did not request the password change.
             *
             * Defaults to `false`.
             */
            hideIgnoreMessage?: boolean;
        };
        type LoginHandler = (currentMember: CurrentMember) => void;
        type LogoutHandler = () => void;
    }
    /**
     * The CurrentMember API contains functionality for viewing and managing site members from frontend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-members.CurrentMember.html#)
     */
    namespace CurrentMember {
        type Address = {
            /**
             * Street address ID.
             */
            _id?: string;
            /**
             * Street address object, with number and name in separate fields.
             */
            streetAddress?: CurrentMember.StreetAddress;
            /**
             * Main address line, usually street and number, as free text.
             */
            addressLine?: string;
            /**
             * Free text providing more detailed address information,
             *  such as apartment, suite, or floor.
             */
            addressLine2?: string;
            /**
             * City name.
             */
            city?: string;
            /**
             * Code for a subdivision (such as state, prefecture, or province) in an
             * [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) format.
             */
            subdivision?: string;
            /**
             * 2-letter country code in an
             * [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
             */
            country?: string;
            /**
             * Postal code.
             */
            postalCode?: string;
        };
        /**
         * Member's contact information. Contact information is stored in the
         */
        type ContactDetails = {
            /**
             * Contact's first name.
             */
            firstName?: string;
            /**
             * Contact's last name.
             */
            lastName?: string;
            /**
             * List of phone numbers.
             */
            phones: string[];
            /**
             * List of email addresses.
             */
            emails: string[];
            /**
             * List of street addresses.
             */
            addresses: CurrentMember.Address[];
            /**
             * Contact's birthdate, formatted as `"YYYY-MM-DD"`.
             *
             *  Example: `"2020-03-15"` for March 15, 2020.
             */
            birthdate?: string;
            /**
             * Contact's company name.
             */
            company?: string;
            /**
             * Contact's job title.
             */
            jobTitle?: string;
            /**
             * Set of key-value pairs.
             * Custom fields,
             * where each key is the field key,
             * and each value is the field's value for the member.
             */
            customFields: any;
        };
        type FieldsetOptions = {
            /**
             * Predefined sets of fields to return.
             * When multiple fieldsets are provided, the union of all the included fields is returned.
             *
             * Predefined fieldsets are one of:
             *
             * - `"FULL"`: Returns all fields.
             * - `"PUBLIC"`: Returns `_id` and all fields under `profile`. With this fieldset, `profile.status`, `profile.privacyStatus`, and `profile.activityStatus` are returned as `"UNKNOWN"`.
             *
             * Defaults to `[ "FULL" ]`.
             */
            fieldsets: string[];
        };
        /**
         * Member's profile photo.
         */
        type Image = {
            /**
             * Wix Media image ID,
             *  set when the member selects an image from Wix Media.
             */
            _id: string;
            /**
             * Image URL.
             */
            url: string;
            /**
             * Original image width.
             */
            height: number;
            /**
             * Original image height.
             */
            width: number;
            /**
             * X-axis offset.
             *
             *  Defaults to `0`.
             */
            offsetX: number;
            /**
             * Y-axis offset.
             *
             *  Defaults to `0`.
             */
            offsetY: number;
        };
        /**
         * Updated member.
         */
        type Member = {
            /**
             * Member ID.
             */
            _id: string;
            /**
             * Email used by the member to log in to the site.
             */
            loginEmail?: string;
            /**
             * Member site access status.
             *
             *
             *
             * One of:
             *
             * - `"PENDING"`: Member created and is waiting for approval by site owner.
             * - `"APPROVED"`: Member can log in to the site.
             * - `"OFFLINE"`: Member is a [guest author](https://support.wix.com/en/article/wix-blog-adding-guest-authors-to-your-blog) for the site blog and cannot log in to the site.
             * - `"BLOCKED"`: Member is blocked and cannot log in to the site.
             * - `"UNKNOWN"`: Insufficient permissions to get the status.
             *
             */
            status: string;
            /**
             * Contact ID.
             */
            contactId: string;
            /**
             * Member privacy status.
             *
             *
             *
             *
             * One of:
             *
             * - `"PUBLIC"`: Member is visible to everyone.
             * - `"PRIVATE"`: Member is hidden from site visitors and other site members. Member is returned only to site contributors and apps with the appropriate permissions.
             * - `"UNKNOWN"`: Insufficient permissions to get the status.
             *
             */
            privacyStatus: string;
            /**
             * Member activity status.
             *
             *
             *
             *
             * One of:
             *
             * - `"ACTIVE"`: Member can write forum posts and blog comments.
             * - `"MUTED"`: Member cannot write forum posts or blog comments.
             * - `"UNKNOWN"`: Insufficient permissions to get the status.
             *
             */
            activityStatus: string;
            /**
             * Date and time when the member was created.
             */
            _createdDate: Date;
            /**
             * Date and time when the member was updated.
             */
            _updatedDate: Date;
            /**
             * Date and time when the member last logged in to the site.
             */
            lastLoginDate?: Date;
            /**
             * Member's contact information. Contact information is stored in the
             * [Contact List](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fcontacts).
             *
             *
             */
            contactDetails?: CurrentMember.ContactDetails;
            /**
             * Profile display info.
             */
            profile: CurrentMember.Profile;
        };
        /**
         * Profile display info.
         */
        type Profile = {
            /**
             * Name that identifies the member to other members.
             * Displayed on the member's profile page
             * and interactions in the forum or blog.
             */
            nickname: string;
            /**
             * Slug that determines the member's profile page URL.
             */
            slug: string;
            /**
             * Member's profile photo.
             */
            profilePhoto?: CurrentMember.Image;
            /**
             * Member's profile photo.
             */
            coverPhoto?: CurrentMember.Image;
            /**
             * Member title.
             *
             *
             */
            title?: string;
        };
        type Role = {
            /**
             * Role ID.
             */
            _id: string;
            /**
             * Role name as defined in the site's
             *  [Member Permissions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fmember-permissions/roles)
             *  page or one of `"Admin"` or `"Member"`.
             */
            title: string;
            /**
             * Role description, if defined in the site's dashboard.
             */
            description?: string;
            /**
             * Role color, as defined in the site's
             * [Member Permissions](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fmember-permissions/roles)
             * page.
             *
             * One of:
             *
             * - `"DARK_BLUE"`
             * - `"LIGHT_BLUE"`
             * - `"TEAL"`
             * - `"LIGHT_GREEN"`
             * - `"YELLOW"`
             * - `"ORANGE"`
             * - `"RED"`
             * - `"VIOLET"`
             * - `"PURPLE"`
             */
            color: string;
            /**
             * Date and time the role was created.
             */
            _createdDate?: Date;
        };
        /**
         * Street address object, with number and name in separate fields.
         */
        type StreetAddress = {
            /**
             * Street number.
             */
            number: string;
            /**
             * Street name.
             */
            name: string;
        };
    }
}

// /types/common/wix-media-backend.d.ts
/**
 * The `wix-media-backend` module contains functionality for working with
 *  media from backend code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.html#)
 */
declare module 'wix-media-backend' {
    /**
     * The `mediaManager` module contains functionality for working with
     *  the media that is stored in your site's [Media Manager](https://support.wix.com/en/article/about-the-media-manager-568956).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.html#mediaManager)
     */
    const mediaManager: MediaManager;
    /**
     * Events triggered by the Wix Media API.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.Events.html#)
     */
    interface Events {
        /**
         * An event that triggers when an audio file has completed transcoding.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.Events.html#onAudioTranscoded)
         */
        onAudioTranscoded(event: Events.FileEvent): void;
        /**
         * An event that triggers when a file has completed uploading.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.Events.html#onFileUploaded)
         */
        onFileUploaded(event: Events.FileEvent): void;
        /**
         * An event that triggers when a video file has completed transcoding.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.Events.html#onVideoTranscoded)
         */
        onVideoTranscoded(event: Events.FileEvent): void;
    }
    /**
     * The `mediaManager` module contains functionality for working with
     *  the media that is stored in your site's [Media Manager](https://support.wix.com/en/article/about-the-media-manager-568956).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.MediaManager.html#)
     */
    interface MediaManager {
        /**
         * Returns a download URL for downloading files from the Media Manager.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.MediaManager.html#downloadFiles)
         */
        downloadFiles(fileUrls: string[]): Promise<string>;
        /**
         * Returns a download URL for downloading a folder from the Media Manager.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.MediaManager.html#downloadFolder)
         */
        downloadFolder(folderId: string): Promise<string>;
        /**
         * Gets a temporary download URL with a token for a specified file in the Media Manager.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.MediaManager.html#getDownloadUrl)
         */
        getDownloadUrl(fileUrl: string, expirationTime?: number, downloadedFileName?: string, expiredTokenRedirectUrl?: string): Promise<string>;
        /**
         * Gets a file's information from the Media Manager by `fileUrl`.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.MediaManager.html#getFileInfo)
         */
        getFileInfo(fileUrl: string): Promise<MediaManager.FileInfo>;
        /**
         * **Deprecated.**
         * This function will continue to work, but a newer version is available. Use the [`getDownloadUrl`](https://www.wix.com/velo/reference/wix-media-backend/mediamanager-obj/getdownloadurl) function instead.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.MediaManager.html#getFileUrl)
         */
        getFileUrl(fileUrl: string): Promise<string>;
        /**
         * Gets a folder's information from the Media Manager by `folderId`.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.MediaManager.html#getFolderInfo)
         */
        getFolderInfo(folderId: string): Promise<MediaManager.FolderInfo>;
        /**
         * Gets an upload URL with a token.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.MediaManager.html#getUploadUrl)
         */
        getUploadUrl(path: string, options: MediaManager.UploadOptions): Promise<MediaManager.UploadUrl>;
        /**
         * Gets a video file's playback URL from the Media Manager.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.MediaManager.html#getVideoPlaybackUrl)
         */
        getVideoPlaybackUrl(fileUrl: string, format: string): Promise<string>;
        /**
         * Imports a file to the Media Manager from a URL.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.MediaManager.html#importFile)
         */
        importFile(path: string, url: string, options: MediaManager.UploadOptions): Promise<MediaManager.FileInfo>;
        /**
         * Gets a list of files from the Media Manager by `parentFolderId` (or root).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.MediaManager.html#listFiles)
         */
        listFiles(filters?: MediaManager.FileFilterOptions, sorting?: MediaManager.SortingOptions, paging?: MediaManager.PagingOptions): Promise<MediaManager.File[]>;
        /**
         * Gets a list of folders from the Media Manager by `parentFolderId` (or root).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.MediaManager.html#listFolders)
         */
        listFolders(filters?: MediaManager.FolderFilterOptions, sorting?: MediaManager.SortingOptions, paging?: MediaManager.PagingOptions): Promise<MediaManager.FolderInfo[]>;
        /**
         * Moves single or multiple files to the Media Manager's trash.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.MediaManager.html#moveFilesToTrash)
         */
        moveFilesToTrash(fileUrls: string[]): Promise<void>;
        /**
         * Moves single or multiple folders, including their files and sub-folders, to the Media Manager's trash.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.MediaManager.html#moveFoldersToTrash)
         */
        moveFoldersToTrash(folderIds: string[]): Promise<void>;
        /**
         * Uploads a file to the Media Manager from a [buffer](https://nodejs.org/api/buffer.html#buffer_static_method_buffer_from_string_encoding).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.MediaManager.html#upload)
         */
        upload(path: string, fileContent: Buffer, fileName: string, options: MediaManager.UploadOptions): Promise<MediaManager.FileInfo>;
    }
    /**
     * Events triggered by the Wix Media API.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.Events.html#)
     */
    namespace Events {
        /**
         * An object representing an uploaded file and upload context.
         */
        type FileEvent = {
            /**
             * Information about the uploaded file.
             */
            fileInfo: MediaManager.FileInfo;
            /**
             * An object of key:value string pairs that was sent
             *  when the file was uploaded.
             */
            context: any;
        };
    }
    /**
     * The `mediaManager` module contains functionality for working with
     *  the media that is stored in your site's [Media Manager](https://support.wix.com/en/article/about-the-media-manager-568956).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-media-backend.MediaManager.html#)
     */
    namespace MediaManager {
        /**
         * An object containing information about the file that was listed.
         */
        type File = {
            /**
             * **Deprecated**. Use the `fileUrl` property instead.
             *
             * The `fileName` property is the internal name (unique identifier) which is generated when a file is uploaded by the Media Manager, returned from the [`importFile()`](#importFile), or [`upload()`](#upload) functions. The name is the string located in the file's URL. Click [here](https://www.wix.com/velo/forum/tips-tutorials-examples/creating-a-url-for-a-media-file-or-the-truth-about-getfileurl) to learn more. Use this name when calling the [`getFileInfo()`](#getFileInfo), [`getFileUrl()`](#getFileUrl),
             * and [`getVideoPlaybackUrl()`](#getVideoPlaybackUrl) functions.
             */
            fileName: string;
            /**
             * The file's Wix media URL in the following format: `'wix:image://v1//#originWidth=&originHeight=[&watermark=]'`.
             */
            fileUrl: string;
            /**
             * File hash.
             */
            hash: string;
            /**
             * Size of the listed file in bytes.
             */
            sizeInBytes: number;
            /**
             * [Mime type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of
             *  the listed file.
             */
            mimeType: string;
            /**
             * Media type of the listed file.
             *  One of:
             *
             *  + `"audio"`
             *  + `"document"`
             *  + `"image"`
             *  + `"shape"`
             *  + `"video"`
             */
            mediaType: string;
            /**
             * Whether the link to the listed file is
             *  public or private. Private links require a token to be used.
             */
            isPrivate: boolean;
            /**
             * ID of the file's parent folder.
             */
            parentFolderId: string;
            /**
             * Original name of the uploaded file. This is the display name
             *  that appears in the Media Manager.
             */
            originalFileName: string;
            /**
             * URL of the file's icon.
             */
            iconUrl: string;
            /**
             * List of labels assigned to the file by the Media Manager.
             */
            labels: string[];
            /**
             * Media height.
             */
            height: string;
            /**
             * Media width.
             */
            width: string;
            /**
             * Date the file was created.
             */
            _createdDate: Date;
            /**
             * Date the file was updated.
             */
            _updatedDate: Date;
        };
        /**
         * File filter options.
         */
        type FileFilterOptions = {
            /**
             * ID of the parent folder of the files to list.
             */
            parentFolderId?: string;
            /**
             * Media type of the files to list. Leave blank to list files of all media types.
             *  One of:
             *
             *  + `"audio"`
             *  + `"document"`
             *  + `"image"`
             *  + `"shape"`
             *  + `"video"`
             */
            mediaType?: string;
            /**
             * Whether the link to the files you want to list is public or private. Leave blank to include both public and private files.
             */
            isPrivate?: boolean;
        };
        /**
         * An object containing information about the file that was uploaded.
         */
        type FileInfo = {
            /**
             * **Deprecated**. Use the `fileUrl` property instead.
             *
             * The `fileName` property is the internal name (unique identifier) which is generated when a file is uploaded by the Media Manager, returned from the [`importFile()`](#importFile), or [`upload()`](#upload) functions. The name is the string located in the file's URL. Click [here](https://www.wix.com/velo/forum/tips-tutorials-examples/creating-a-url-for-a-media-file-or-the-truth-about-getfileurl) to learn more. Use this name when calling the [`getFileInfo()`](#getFileInfo), [`getFileUrl()`](#getFileUrl),
             * and [`getVideoPlaybackUrl()`](#getVideoPlaybackUrl) functions.
             */
            fileName: string;
            /**
             * The file's Wix media URL in the following format: `'wix:image://v1//#originWidth=&originHeight=[&watermark=]'`.
             */
            fileUrl: string;
            /**
             * File hash.
             */
            hash: string;
            /**
             * Size of the uploaded file in bytes.
             */
            sizeInBytes: number;
            /**
             * [Mime type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of
             *  the uploaded file.
             */
            mimeType: string;
            /**
             * Type of the file that was uploaded.
             *  One of:
             *
             *  + `"audio"`
             *  + `"document"`
             *  + `"image"`
             *  + `"shape"`
             *  + `"video"`
             */
            mediaType: string;
            /**
             * Whether the link to the uploaded file is
             *  public or private. Private links require a token to be used.
             */
            isPrivate: boolean;
            /**
             * ID of the file's parent folder.
             */
            parentFolderId: string;
            /**
             * Original name of the uploaded file. This is the display name
             *  that appears in the Media Manager.
             */
            originalFileName: string;
            /**
             * Status of the file that was uploaded.
             *  One of:
             *
             *  + `"IN-DOWNLOAD-QUEUE"`
             *  + `"IN-QUEUE"`
             *  + `"READY"`
             */
            opStatus: string;
            /**
             * URL where the file was uploaded from.
             */
            sourceURL: string;
            /**
             * URL of the file's icon.
             */
            iconUrl: string;
            /**
             * List of labels assigned to the file by the Media Manager.
             */
            labels: string[];
            /**
             * Media height.
             */
            height: string;
            /**
             * Media width.
             */
            width: string;
            /**
             * Date the file was created.
             */
            _createdDate: Date;
            /**
             * Date the file was updated.
             */
            _updatedDate: Date;
        };
        /**
         * Folder filter options.
         */
        type FolderFilterOptions = {
            /**
             * ID of the parent folder of the folders to list.
             */
            parentFolderId?: string;
        };
        /**
         * An object containing information about the folder.
         */
        type FolderInfo = {
            /**
             * ID of the folder. Internal name (unique identifier) which is generated when a folder is created by the Media Manager. Use this ID when calling the [`listFiles()`](#listFiles), and [`listFolders()`](#listFolders) functions.
             */
            folderId: string;
            /**
             * Name of the folder.
             */
            folderName: string;
            /**
             * ID of the folder's parent folder. Use this ID when calling the [`listFiles()`](#listFiles), and [`listFolders()`](#listFolders) functions.
             */
            parentFolderId: string;
            /**
             * Date the folder was created.
             */
            _createdDate: Date;
            /**
             * Date the folder was updated.
             */
            _updatedDate: Date;
        };
        /**
         * An object containing information about the media options of a file to upload.
         */
        type MediaOptions = {
            /**
             * Type of file to upload.
             *  One of:
             *
             *  + `"audio"`
             *  + `"document"`
             *  + `"image"`
             *  + `"shape"`
             *  + `"video"`
             */
            mediaType?: string;
            /**
             * [Mime type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of
             *  the file to import. The specified value must match the actual mime type of
             *  the file's content.
             */
            mimeType?: string;
        };
        /**
         * An object containing information about the metadata options of a file to upload.
         */
        type MetadataOptions = {
            /**
             * Whether the link to the uploaded file will
             *  be public or private. Private links require a token to be used. Defaults to
             *  `false`.
             */
            isPrivate?: boolean;
            /**
             * Indicates if the file was uploaded by a
             *  site visitor. Files uploaded by visitors are tagged in the Media Manager as
             *  being added by a visitor. Defaults to `true`.
             */
            isVisitorUpload?: boolean;
            /**
             * An object of key:value string pairs that is sent
             *  back in the [`onFileUploaded()`](wix-media-backend.Events.html#onFileUploaded)
             *  event.
             */
            context?: any;
            /**
             * In this case the fileName is the name you would like your file to appear as in the Media Manager.
             */
            fileName?: string;
        };
        /**
         * Paging options.
         */
        type PagingOptions = {
            /**
             * Amount of records to retrieve. Defaults to 20.
             */
            limit?: number;
            /**
             * Number of records to skip.
             */
            skip?: number;
        };
        /**
         * Sorting options. **Note:** When sorting by '`originalFileName`', folders and file names that begin with capital letters come before lowercase in '`asc`' order.
         */
        type SortingOptions = {
            /**
             * Direction of sort: `"asc"` or `"desc"`. Defaults to `"asc"`.
             */
            order?: string;
            /**
             * Field to sort by: `"originalFileName"` or `"_updatedDate"`. Deafults to `"_updatedDate"`.
             */
            field?: string;
        };
        /**
         * An object containing information about the options of a file to upload.
         */
        type UploadOptions = {
            /**
             * Media options of the file to upload.
             */
            mediaOptions?: MediaManager.MediaOptions;
            /**
             * Metadata options of the file to upload.
             */
            metadataOptions?: MediaManager.MetadataOptions;
        };
        /**
         * An object containing information about an upload URL.
         */
        type UploadUrl = {
            /**
             * The URL to POST a file to.
             */
            uploadUrl: string;
            /**
             * The token to use with the file POST.
             */
            uploadToken: string;
        };
    }
}

// /types/common/wix-marketing-backend.d.ts
/**
 * The wix-marketing-backend module contains functionality for working with your
 *  site's marketing tools from backend code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-marketing-backend.html#)
 */
declare module 'wix-marketing-backend' {
    /**
     * The Coupons API is used to manage your site's coupons.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-marketing-backend.html#coupons)
     */
    const coupons: Coupons;
    /**
     * The Coupons API is used to manage your site's coupons.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-marketing-backend.Coupons.html#)
     */
    interface Coupons {
        /**
         * Creates a new coupon.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-marketing-backend.Coupons.html#createCoupon)
         */
        createCoupon(couponInfo: Coupons.CouponInfo): Promise<Coupons.CouponId>;
        /**
         * Deletes an existing coupon.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-marketing-backend.Coupons.html#deleteCoupon)
         */
        deleteCoupon(couponId: string): Promise<void>;
        /**
         * Updates the specified fields of an existing coupon.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-marketing-backend.Coupons.html#updateCouponFields)
         */
        updateCouponFields(couponId: string, couponInfo: Coupons.CouponInfo): Promise<void>;
    }
    /**
     * Events that are triggered by actions related to Wix Marketing.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-marketing-backend.Events.html#)
     */
    interface Events {
        /**
         * An event that is triggered when a coupon is used.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-marketing-backend.Events.html#onCouponApplied)
         */
        onCouponApplied(event: Events.CouponAppliedEvent): void;
        /**
         * An event that is triggered when a coupon is created.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-marketing-backend.Events.html#onCouponCreated)
         */
        onCouponCreated(event: Events.CouponEvent): void;
        /**
         * An event that is triggered when a coupon is deleted.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-marketing-backend.Events.html#onCouponDeleted)
         */
        onCouponDeleted(event: Events.CouponDeletedEvent): void;
        /**
         * An event that is triggered when a coupon is updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-marketing-backend.Events.html#onCouponUpdated)
         */
        onCouponUpdated(event: Events.CouponEvent): void;
    }
    /**
     * The Coupons API is used to manage your site's coupons.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-marketing-backend.Coupons.html#)
     */
    namespace Coupons {
        /**
         * An object representing coupon information.
         */
        type Coupon = {
            /**
             * Coupon ID.
             */
            _id: string;
            /**
             * Name of coupon.
             */
            name: string;
            /**
             * Coupon code. Must be unique for all coupons in your site. Maximum 20 characters.
             */
            code: string;
            /**
             * Coupon valid from this date and time.
             */
            startTime: Date;
            /**
             * Coupon expires at this date and time.
             */
            expirationTime?: Date;
            /**
             * Maximum number of times a coupon can be used. Note that multiple purchases by the same customer or purchases by different customers are both counted toward usage limit.
             */
            usageLimit?: number;
            /**
             * Indicates whether the coupon is currently [active](https://support.wix.com/en/article/activating-and-deactivating-coupons-in-wix-stores).
             */
            active?: boolean;
            /**
             * Scope of the coupon. When no scope is defined, the coupon applies to all items in all `namespaces` in the site.
             */
            scope?: Coupons.CouponScope;
            /**
             * Coupon creation date.
             */
            _dateCreated: string;
            /**
             * Whether the coupon is expired.
             */
            expired?: boolean;
            /**
             * Coupon display data in the dashboard. Returned if the coupon is only valid for a specific product/booking/event.
             */
            displayData?: Coupons.DisplayData;
            /**
             * Coupon type. For example, "PercentOff", "FreeShipping", etc.
             */
            type: string;
            /**
             * Maximum number of times the coupon can be used **per customer**. Not supported by Wix Bookings.
             */
            limitPerCustomer?: number;
            /**
             * Indicates whether the coupon is limited to 1 discount per order. If true and a customer pays for multiple items the coupon applies to, only the lowest priced item is discounted. Coupons with a `bookings` `namespace` are always limited to one item.
             */
            limitedToOneItem?: boolean;
            /**
             * The coupon is only applicable when the order subtotal is over this amount.
             */
            minimumSubtotal?: number;
            /**
             * Coupon type: Fixed price discount.
             */
            moneyOffAmount?: number;
            /**
             * Coupon type: Discount as a percentage.
             */
            percentOffRate?: number;
            /**
             * Coupon type: Specific sale price. Currently only supported for coupons with a `stores` `namespace`.
             */
            fixedPriceAmount?: number;
            /**
             * Coupon type: Free products when making a purchase. `buyXGetY` is an object that specifies `x` and `y` in the following scenario: if a visitor purchases x number of products, they receive y number of products for free. Currently only supported for coupons with a `stores` `namespace`.
             */
            buyXGetY?: Coupons.CouponTypeBuyXGetY;
            /**
             * Coupon type: Free shipping. If true, the coupon applies to all items in all `namespaces` in the site.
             */
            freeShipping?: boolean;
            /**
             * ID of the app that created the coupon. Empty if created by the site owner.
             */
            appId?: string;
            /**
             * How many times the coupon was used.
             */
            numberOfUsages: number;
        };
        type CouponId = {
            /**
             * ID of the new coupon.
             */
            id: string;
        };
        /**
         * An object representing information for creating or updating a coupon.
         */
        type CouponInfo = {
            /**
             * Name of coupon.
             */
            name: string;
            /**
             * Coupon code. Must be unique for all coupons in your site. Maximum 20 characters.
             */
            code: string;
            /**
             * Coupon valid from this date and time.
             */
            startTime: Date;
            /**
             * Coupon expires at this date and time.
             */
            expirationTime?: Date;
            /**
             * Maximum number of times a coupon can be used. Note that multiple purchases by the same customer or purchases by different customers are both counted toward usage limit.
             */
            usageLimit?: number;
            /**
             * Indicates whether the coupon is limited to 1 discount per order. If true and a customer pays for multiple items the coupon applies to, only the lowest priced item is discounted. Coupons with a `bookings` `namespace` are always limited to one item.
             */
            limitedToOneItem?: boolean;
            /**
             * Indicates whether the coupon is currently [active](https://support.wix.com/en/article/activating-and-deactivating-coupons-in-wix-stores).
             */
            active?: boolean;
            /**
             * The coupon is only applicable when the order subtotal is over this amount.
             */
            minimumSubtotal?: number;
            /**
             * Scope of the coupon. When no scope is defined, the coupon applies to all items in all `namespaces` in the site.
             */
            scope?: Coupons.CouponScope;
            /**
             * Coupon type: Fixed price discount.
             */
            moneyOffAmount?: number;
            /**
             * Coupon type: Discount as a percentage.
             */
            percentOffRate?: number;
            /**
             * Coupon type: Specific sale price. Currently only supported for coupons with a `stores` `namespace`.
             */
            fixedPriceAmount?: number;
            /**
             * Coupon type: Free products when making a purchase. `buyXGetY` is an object that specifies `x` and `y` in the following scenario: if a visitor purchases x number of products, they receive y number of products for free. Currently only supported for coupons with a `stores` `namespace`.
             */
            buyXGetY?: Coupons.CouponTypeBuyXGetY;
            /**
             * Coupon type: Free shipping. If true, the coupon applies to all items in all `namespaces` in the site.
             */
            freeShipping?: boolean;
            /**
             * Maximum number of times the coupon can be used **per customer**. Not supported by Wix Bookings.
             */
            limitPerCustomer?: number;
        };
        /**
         * An object containing the scope of a coupon.
         */
        type CouponScope = {
            /**
             * Wix application for which the coupon is applicable.
             * One of the following:
             *
             *  + `"stores"`
             *  + `"bookings"`
             *  + `"events"`
             */
            namespace: string;
            /**
             * Group within a `namespace` for which the coupon is applicable. If no group is specified, the coupon applies to all items in the namespace. `group` is required in some cases. See the table in [`createCoupon()`](#createCoupon) for a list of currently supported groups for each namespace.
             */
            group?: Coupons.ScopeGroup;
        };
        /**
         * An object defining the number of purchases required and the number of free items received for a "Buy X Get Y" coupon type.
         */
        type CouponTypeBuyXGetY = {
            /**
             * Number of purchased items required to receive free items.
             */
            x: number;
            /**
             * Number of items received for free if required number of items were purchased.
             */
            y: number;
        };
        /**
         * An object representing display data for the product associated with the coupon.
         */
        type DisplayData = {
            /**
             * Display name.
             */
            name: string;
            /**
             * Formatted price for display.
             */
            formattedPrice: string;
            /**
             * Media ID for the product associated with the coupon.
             */
            mediaItem: string;
        };
        /**
         * An object specifying the group within a `CouponScope`
         * `namespace` for which the coupon is applicable.
         */
        type ScopeGroup = {
            /**
             * Name of the group.
             */
            name: string;
            /**
             * ID of the specific item in the group for which the coupon is applicable. If no `entityId` is specified, the coupon applies to all items in the group. In some cases when a group is specified, an `entityId` is required. See the table in [`createCoupon()`](#createCoupon) for a list of currently supported entities for each namespace and group.
             */
            entityId?: string;
        };
    }
    /**
     * Events that are triggered by actions related to Wix Marketing.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-marketing-backend.Events.html#)
     */
    namespace Events {
        /**
         * An object representing a custom coupon event.
         */
        type CouponAppliedEvent = {
            /**
             * Event metadata.
             */
            metadata: Events.Metadata;
            /**
             * Event data.
             */
            data: Events.Data;
        };
        /**
         * An object representing a custom coupon event.
         */
        type CouponDeletedEvent = {
            /**
             * Event metadata.
             */
            metadata: Events.Metadata;
        };
        /**
         * An object representing a coupon event.
         */
        type CouponEvent = {
            /**
             * Event metadata.
             */
            metadata: Events.Metadata;
            /**
             * Coupon information.
             */
            entity: Coupons.Coupon;
        };
        /**
         * An object representing a custom event's data.
         */
        type Data = {
            /**
             * Applied coupon information.
             */
            coupon: Coupons.Coupon;
            /**
             * ID of the entity that the coupon was applied to (orderId, bookingId, etc.).
             */
            wixAppOrderId: string;
            /**
             * ID of the Wix app that applied the coupon.
             *  + Wix Stores: `1380b703-ce81-ff05-f115-39571d94dfcd`
             *  + Wix Bookings: `13d21c63-b5ec-5912-8397-c3a5ddb27a97`
             *  + Wix Events: `140603ad-af8d-84a5-2c80-a0f60cb47351`
             */
            wixAppId: string;
        };
        /**
         * An object representing a coupon.
         */
        type Metadata = {
            /**
             * Event ID.
             */
            id: string;
            /**
             * Coupon ID associated with this event.
             */
            entityId: string;
            /**
             * Event timestamp.
             */
            eventTime: string;
            /**
             * Whether this event was triggered as a result of a privacy regulation application (for example, [GDPR](https://support.wix.com/en/article/gdpr-frequently-asked-questions)). For advanced users.
             */
            triggeredByAnonymizeRequest: boolean;
        };
    }
}

// /types/common/wix-groups-backend.d.ts
/**
 * The wix-groups-backend module contains functionality for managing groups on your site from backend code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.html#)
 */
declare module 'wix-groups-backend' {
    /**
     * The CreateRequests API provides functionality for managing requests to create a group.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.html#createRequests)
     */
    const createRequests: CreateRequests;
    /**
     * [Read more](https://www.wix.com/corvid/reference/wix-groups-backend.html#groups)
     */
    const groups: Groups;
    /**
     * [Read more](https://www.wix.com/corvid/reference/wix-groups-backend.html#joinRequests)
     */
    const joinRequests: JoinRequests;
    /**
     * [Read more](https://www.wix.com/corvid/reference/wix-groups-backend.html#members)
     */
    const members: Members;
    /**
     * [Read more](https://www.wix.com/corvid/reference/wix-groups-backend.html#roles)
     */
    const roles: Roles;
    /**
     * Group cover image.
     */
    type CoverImage = {
        /**
         * **Deprecated**. Use the `imageUrl` property instead.
         *
         * Group cover image. Only site admins or group admins can upload a group cover image.
         */
        image?: Image;
        /**
         * Position of the group cover image relative to the uploaded image.
         */
        position?: Position;
        /**
         * The group cover image's Wix media URL. For example, `'wix:image://v1//#originWidth=&originHeight=[&watermark=]'`. Note that the URL contains the image's width and height.
         *
         * **Note:** This replaces the old `image` property. `image` will continue to work, but we recommend that you use the updated `imageUrl` property instead.
         */
        imageUrl?: string;
    };
    /**
     * Group cover image.
     */
    type CoverImageOptions = {
        /**
         * **Deprecated**. Use the `imageUrl` property instead.
         *
         * Group cover image. Only site admins or group admins can upload a group cover image.
         */
        image?: ImageOptions;
        /**
         * Position of the top left corner of the group cover image relative to the uploaded image.
         */
        position?: PositionOptions;
        /**
         * The group cover image's Wix media URL. For example, `'wix:image://v1//#originWidth=&originHeight=[&watermark=]'`. Note that the URL contains the image's width and height.
         *
         * **Note:** This replaces the old `image` property. `image` will continue to work, but we recommend that you use the updated `imageUrl` property instead.
         */
        imageUrl?: string;
    };
    type Group = {
        /**
         * Group ID.
         */
        _id: string;
        /**
         * Group name.
         */
        name: string;
        /**
         * Part of a group's URL, for example, `'https:/example.com/groups/{my-group-slug}'`. Generally based on the group name, but for secret groups it is
         * an autogenerated string of characters, for example, `'https:/example.com/groups/{5D3yTX}'`. It is case-sensitive.
         */
        slug: string;
        /**
         * Group description.
         */
        description: string;
        /**
         * Group privacy level.
         * One of:
         * + `PUBLIC`: Site visitors can see the group and its content in the list of groups. Site members can join the group.
         * + `PRIVATE`: Site visitors can see the group in the list of groups, but only group members can see its content. Site members can request to join the group.
         * + `SECRET`: Only group members can see the group and its content in the list of groups. Site members can only join if invited by group admins, or other group members.
         */
        privacyStatus: string;
        /**
         * Group cover image.
         */
        coverImage?: CoverImage;
        /**
         * What group members are called. For example, 'Coworkers', 'Friends', or 'Students'.
         */
        memberTitle?: string;
        /**
         * Number of members in the group.
         */
        memberCount: number;
        /**
         * Group settings.
         */
        settings: GroupSettings;
        /**
         * Date and time the group was last active. For example, a post or comment.
         */
        lastActivityDate: Date;
        /**
         * Date and time the group was created.
         */
        _createdDate: Date;
        /**
         * Date and time the group was last updated.
         */
        _updatedDate: Date;
        /**
         * Site member ID of the group creator. Defaults to group creator.
         */
        owner: string;
    };
    /**
     * Group settings.
     */
    type GroupSettings = {
        /**
         * Whether group members can send an email inviting others to join the group. When `false`, only site admins and group admins can invite others to join the group. Defaults to `false`.
         */
        membersCanInvite: boolean;
        /**
         * Whether group members can approve or reject requests to join a group. When `false`, only site admins and group admins can approve or reject requests to join the group. Defaults to `false`.
         */
        membersCanApprove: boolean;
        /**
         * Whether to create a daily group post welcoming new members. Defaults to `true`.
         */
        welcomeMemberPostEnabled: boolean;
        /**
         * Whether to create a group post when group details are changed. Defaults to `true`.
         */
        groupUpdatePostEnabled: boolean;
        /**
         * Whether group members can view the list of members in the group. Defaults to `true`.
         */
        showMemberList: boolean;
    };
    /**
     * Group settings.
     */
    type GroupSettingsOptions = {
        /**
         * Whether group members can send an email inviting others to join the group. When `false`, only site admins and group admins can invite others to join the group. Defaults to `false`.
         */
        membersCanInvite?: boolean;
        /**
         * Whether group members can approve or reject requests to join a group. When `false`, only site admins and group admins can approve or reject requests to join the group. Defaults to `false`.
         */
        membersCanApprove?: boolean;
        /**
         * Whether to create a daily group post welcoming new members. Defaults to `true`.
         */
        welcomeMemberPostEnabled?: boolean;
        /**
         * Whether to create a group post when group details are changed. Defaults to `true`.
         */
        groupUpdatePostEnabled?: boolean;
        /**
         * Whether group members can view the list of members in the group. Defaults to `true`.
         */
        showMemberList?: boolean;
    };
    /**
     * Group cover image. Only site admins or group admins can upload a group cover image.
     */
    type Image = {
        /**
         * **Deprecated**.
         *
         * Group cover image's file URL.
         */
        mediaId?: string;
        /**
         * **Deprecated**.
         *
         * Group cover image width.
         */
        width?: number;
        /**
         * **Deprecated**.
         *
         * Group cover image height.
         */
        height?: number;
    };
    /**
     * Group cover image. Only site admins or group admins can upload a group cover image.
     */
    type ImageOptions = {
        /**
         * **Deprecated**.
         *
         * Group cover image's file URL.
         */
        mediaId?: string;
        /**
         * **Deprecated**.
         *
         * Group cover image width.
         */
        width?: number;
        /**
         * **Deprecated**.
         *
         * Group cover image height.
         */
        height?: number;
    };
    type Metadata = {
        /**
         * Number of items in the current results page.
         */
        length?: number;
        /**
         * Total number of items that match the query.
         */
        totalCount?: number;
        /**
         * Flag indicating that the server failed to calculate the 'total' field.
         */
        tooManyToCount?: boolean;
    };
    type Options = {
        /**
         * When `true`, prevents permission checks from running for the operation. Defaults to `false`.
         */
        suppressAuth?: boolean;
    };
    /**
     * Position of the top left corner of the group cover image relative to the uploaded image.
     */
    type Position = {
        /**
         * Horizontal coordinate.
         */
        x?: number;
        /**
         * Vertical coordinate.
         */
        y?: number;
    };
    /**
     * Position of the top left corner of the group cover image relative to the uploaded image.
     */
    type PositionOptions = {
        /**
         * Horizontal coordinate.
         */
        x?: number;
        /**
         * Vertical coordinate.
         */
        y?: number;
    };
    /**
     * Group member role. When membership status is not `JOINED`, this is empty.
     */
    type Role = {
        /**
         * Group member role.
         * One of:
         * - `"MEMBER"`: Group member.
         * - `"ADMIN"`: Group admin.
         */
        role: string;
    };
    /**
     * The CreateRequests API provides functionality for managing requests to create a group.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.html#)
     */
    interface CreateRequests {
        /**
         * Approves requests to create a group.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.html#approveCreateRequests)
         */
        approveCreateRequests(createRequestIds: string[], options: Options): Promise<CreateRequests.CreateRequest[]>;
        /**
         * Lists requests to create a group.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.html#listCreateRequests)
         */
        listCreateRequests(paging: CreateRequests.Paging, options: Options): Promise<CreateRequests.ListCreateRequests>;
        /**
         * Creates a query to retrieve a list of create requests.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.html#queryCreateRequests)
         */
        queryCreateRequests(): CreateRequests.CreateRequestsQueryBuilder;
        /**
         * Rejects requests to create a group.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.html#rejectCreateRequests)
         */
        rejectCreateRequests(rejections: CreateRequests.RejectCreateRequest[], options: Options): Promise<CreateRequests.CreateRequest[]>;
    }
    /**
     * The Groups API provides functionality for managing groups, including creating, deleting, updating, and querying groups.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.html#)
     */
    interface Groups {
        /**
         * Creates a group.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.html#createGroup)
         */
        createGroup(groupInfo: Groups.GroupInfo, options: Options): Promise<Group>;
        /**
         * Deletes a group.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.html#deleteGroup)
         */
        deleteGroup(groupId: string, options: Options): Promise<Group>;
        /**
         * Gets a group by ID.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.html#getGroup)
         */
        getGroup(groupId: string, options: Options): Promise<Group>;
        /**
         * Gets a group by slug.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.html#getGroupBySlug)
         */
        getGroupBySlug(slug: string, options: Options): Promise<Group>;
        /**
         * Lists groups.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.html#listGroups)
         */
        listGroups(paging: Groups.Paging, options: Options): Promise<Groups.ListGroups>;
        /**
         * Creates a query to retrieve a list of groups.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.html#queryGroups)
         */
        queryGroups(): Groups.GroupsQueryBuilder;
        /**
         * Updates a group.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.html#updateGroup)
         */
        updateGroup(groupId: string, groupInfo: Groups.GroupInfoUpdate, options: Options): Promise<Group>;
    }
    /**
     * The JoinRequests API provides functionality for managing requests to join a group.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.html#)
     */
    interface JoinRequests {
        /**
         * Approves requests to join a group.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.html#approveJoinRequests)
         */
        approveJoinRequests(identifiers: JoinRequests.Identifiers, options: Options): Promise<JoinRequests.JoinRequest[]>;
        /**
         * Lists requests to join a group.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.html#listJoinRequests)
         */
        listJoinRequests(groupId: string, paging: JoinRequests.Paging, options: Options): Promise<JoinRequests.ListJoinRequests>;
        /**
         * Creates a query to retrieve a list of join requests.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.html#queryJoinRequests)
         */
        queryJoinRequests(): JoinRequests.JoinRequestsQueryBuilder;
        /**
         * Rejects requests to join a group.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.html#rejectJoinRequests)
         */
        rejectJoinRequests(groupId: string, rejections: JoinRequests.Rejection[], options: Options): Promise<JoinRequests.JoinRequest[]>;
    }
    /**
     * The Members API provides functionality for managing group members, inluding adding, removing, and querying group members.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.html#)
     */
    interface Members {
        /**
         * Adds site members to a group.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.html#addGroupMembers)
         */
        addGroupMembers(identifiers: Members.IdentifiersAddGroupMembers, options: Options): Promise<Members.GroupMember>;
        /**
         * Lists all members of a group.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.html#listGroupMembers)
         */
        listGroupMembers(groupId: string, paging: Members.Paging, options: Options): Promise<Members.ListGroupMembers>;
        /**
         * Lists all group memberships of a site member.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.html#listMemberships)
         */
        listMemberships(memberId: string, paging: Members.PagingMemberships, options: Options): Promise<Members.ListMemberships>;
        /**
         * Retrieves a list of up to 100 group members, given the provided paging, sorting and filtering.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.html#queryGroupMembers)
         */
        queryGroupMembers(): Members.GroupMembersQueryBuilder;
        /**
         * Retrieves a list of up to 100 memberships, given the provided paging, sorting and filtering.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.html#queryMemberships)
         */
        queryMemberships(): Members.GroupMembersQueryBuilder;
        /**
         * Removes members from a group.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.html#removeGroupMembers)
         */
        removeGroupMembers(identifiers: Members.IdentifiersRemoveGroupMembers, options: Options): Promise<void>;
    }
    /**
     * The Roles API provides functionality for assigning and unassigning a role to a group member.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Roles.html#)
     */
    interface Roles {
        /**
         * Assigns a role to group members.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Roles.html#assignRole)
         */
        assignRole(identifiers: Roles.Identifiers, role: string, options: Options): Promise<Role>;
        /**
         * Unassigns a role from group members.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Roles.html#unassignRole)
         */
        unassignRole(identifiers: Roles.Identifiers, role: string, options: Options): Promise<Role>;
    }
    /**
     * The CreateRequests API provides functionality for managing requests to create a group.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.html#)
     */
    namespace CreateRequests {
        type CreateRequest = {
            /**
             * ID of the request to create a group. Same as group ID.
             */
            _id: string;
            /**
             * Status of the request to create a group.
             * One of:
             *  + `"PENDING"`
             *  + `"APPROVED"`
             *  + `"REJECTED"`
             */
            status: string;
            /**
             * Reason the request to create a group was rejected.
             */
            rejectionReason?: string;
            /**
             * Group requested to create.
             */
            group: Group;
        };
        type ListCreateRequests = {
            /**
             * Requests to create a group.
             */
            createRequests: CreateRequests.CreateRequest[];
            /**
             * Paging information.
             */
            metadata: Metadata;
        };
        type Paging = {
            /**
             * Maximum number of create requests to retrieve. Defaults to 1,000.
             */
            limit?: number;
            /**
             * Number of create requests to skip in the list.
             */
            skip?: number;
        };
        type RejectCreateRequest = {
            /**
             * ID of the create request to reject.
             */
            createRequestId: string;
            /**
             * Reason the request to create a group was rejected. Max 1,000 characters. This text is displayed to the creator of the rejected request.
             */
            reason?: string;
        };
        /**
         * Contains functionality for refining a CreateRequests query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryBuilder.html#)
         */
        interface CreateRequestsQueryBuilder {
            /**
             * Adds a sort to a query, sorting by the specified properties in ascending order.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryBuilder.html#ascending)
             */
            ascending(...propertyName: string[]): CreateRequests.CreateRequestsQueryBuilder;
            /**
             * Adds a sort to a query, sorting by the specified properties in descending order.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryBuilder.html#descending)
             */
            descending(...propertyName: string[]): CreateRequests.CreateRequestsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value equals the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryBuilder.html#eq)
             */
            eq(propertyName: string, value: any): CreateRequests.CreateRequestsQueryBuilder;
            /**
             * Returns the items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryBuilder.html#find)
             */
            find(options?: Options): Promise<CreateRequests.CreateRequestsQueryResult>;
            /**
             * Refines a query to match items whose specified property value contains any of the specified values.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryBuilder.html#hasSome)
             */
            hasSome(propertyName: string, values: string[]): CreateRequests.CreateRequestsQueryBuilder;
            /**
             * Limits the number of items the query returns.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryBuilder.html#limit)
             */
            limit(limit: string): CreateRequests.CreateRequestsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value does not equal the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryBuilder.html#ne)
             */
            ne(propertyName: string, value: any): CreateRequests.CreateRequestsQueryBuilder;
            /**
             * Adds an `or` condition to the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryBuilder.html#or)
             */
            or(query: CreateRequests.CreateRequestsQueryBuilder): CreateRequests.CreateRequestsQueryBuilder;
            /**
             * Sets the number of items to skip before returning query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryBuilder.html#skip)
             */
            skip(skip: string): CreateRequests.CreateRequestsQueryBuilder;
        }
        /**
         * The results of a create request query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryResult.html#)
         */
        interface CreateRequestsQueryResult {
            /**
             * Returns the index of the current results page number.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryResult.html#currentPage)
             */
            readonly currentPage: number;
            /**
             * Returns the items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryResult.html#items)
             */
            readonly items: CreateRequests.CreateRequest[];
            /**
             * Returns the number of items in the current results page.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryResult.html#length)
             */
            readonly length: number;
            /**
             * Returns the query page size.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryResult.html#pageSize)
             */
            readonly pageSize: number;
            /**
             * Returns the `CreateRequestsQueryBuilder` object used to get the current results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryResult.html#query)
             */
            readonly query: CreateRequests.CreateRequestsQueryBuilder;
            /**
             * Returns the total number of items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryResult.html#totalCount)
             */
            readonly totalCount: number;
            /**
             * Returns the total number of pages the query produced.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryResult.html#totalPages)
             */
            readonly totalPages: number;
            /**
             * Retrieves the next page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryResult.html#next)
             */
            next(): Promise<CreateRequests.CreateRequestsQueryResult>;
            /**
             * Retrieves the previous page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryResult.html#prev)
             */
            prev(): Promise<CreateRequests.CreateRequestsQueryResult>;
        }
        /**
         * Contains functionality for refining a CreateRequests query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryBuilder.html#)
         */
        namespace CreateRequestsQueryBuilder {
        }
        /**
         * The results of a create request query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.CreateRequests.CreateRequestsQueryResult.html#)
         */
        namespace CreateRequestsQueryResult {
        }
    }
    /**
     * The Groups API provides functionality for managing groups, including creating, deleting, updating, and querying groups.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.html#)
     */
    namespace Groups {
        type GroupInfo = {
            /**
             * Group name.
             */
            name: string;
            /**
             * Group description.
             */
            description?: string;
            /**
             * Group privacy level.
             * One of:
             * + `PUBLIC`: Site visitors can see the group and its content in the list of groups. Site members can join the group.
             * + `PRIVATE`: Site visitors can see the group in the list of groups, but only group members can see its content. Site members can request to join the group.
             * + `SECRET`: Only group members can see the group and its content in the list of groups. Site members can only join if invited by group admins, or other group members.
             */
            privacyStatus?: string;
            /**
             * Group cover image.
             */
            coverImage?: CoverImage;
            /**
             * What group members are called. For example, 'Coworkers', 'Friends', or 'Students'.
             */
            memberTitle?: string;
            /**
             * Group settings.
             */
            settings?: GroupSettings;
            /**
             * Site member ID of the group creator. Defaults to group creator. Required if using suppressAuth.
             */
            owner?: string;
        };
        /**
         * Group to update.
         */
        type GroupInfoUpdate = {
            /**
             * Group name.
             */
            name?: string;
            /**
             * Group description.
             */
            description?: string;
            /**
             * Group privacy level.
             * One of:
             * + `PUBLIC`: Site visitors can see the group and its content in the list of groups. Site members can join the group.
             * + `PRIVATE`: Site visitors can see the group in the list of groups, but only group members can see its content. Site members can request to join the group.
             * + `SECRET`: Only group members can see the group and its content in the list of groups. Site members can only join if invited by group admins, or other group members.
             */
            privacyStatus?: string;
            /**
             * Group cover image.
             */
            coverImage?: CoverImageOptions;
            /**
             * What group members are called. For example, 'Coworkers', 'Friends', or 'Students'.
             */
            memberTitle?: string;
            /**
             * Group settings.
             */
            settings?: GroupSettingsOptions;
            /**
             * Site member ID of the group creator.
             */
            owner?: string;
        };
        type ListGroups = {
            /**
             * List of groups.
             */
            groups: Group[];
            /**
             * Paging information.
             */
            metadata: Metadata;
        };
        type Paging = {
            /**
             * Maximum number of groups to retrieve. Defaults to 1,000.
             */
            limit?: number;
            /**
             * Number of groups to skip in the list.
             */
            skip?: number;
        };
        /**
         * Contains functionality for refining a Groups query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryBuilder.html#)
         */
        interface GroupsQueryBuilder {
            /**
             * Adds a sort to a query, sorting by the specified properties in ascending order.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryBuilder.html#ascending)
             */
            ascending(...propertyName: string[]): Groups.GroupsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value contains a specified string.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryBuilder.html#contains)
             */
            contains(propertyName: string, value: string): Groups.GroupsQueryBuilder;
            /**
             * Adds a sort to a query, sorting by the specified properties in descending order.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryBuilder.html#descending)
             */
            descending(...propertyName: string[]): Groups.GroupsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value ends with a specified string.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryBuilder.html#endsWith)
             */
            endsWith(propertyName: string, value: string): Groups.GroupsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value equals the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryBuilder.html#eq)
             */
            eq(propertyName: string, value: any): Groups.GroupsQueryBuilder;
            /**
             * Returns the items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryBuilder.html#find)
             */
            find(options?: Options): Promise<Groups.GroupsQueryResult>;
            /**
             * Refines a query to match items whose specified property value contains any of the specified values.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryBuilder.html#hasSome)
             */
            hasSome(propertyName: string, values: string[]): Groups.GroupsQueryBuilder;
            /**
             * Limits the number of items the query returns.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryBuilder.html#limit)
             */
            limit(limit: string): Groups.GroupsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value does not equal the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryBuilder.html#ne)
             */
            ne(propertyName: string, value: any): Groups.GroupsQueryBuilder;
            /**
             * Adds an `or` condition to the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryBuilder.html#or)
             */
            or(query: Groups.GroupsQueryBuilder): Groups.GroupsQueryBuilder;
            /**
             * Sets the number of items to skip before returning query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryBuilder.html#skip)
             */
            skip(skip: string): Groups.GroupsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value starts with a specified string.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryBuilder.html#startsWith)
             */
            startsWith(propertyName: string, value: string): Groups.GroupsQueryBuilder;
        }
        /**
         * The results of a create request query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryResult.html#)
         */
        interface GroupsQueryResult {
            /**
             * Returns the index of the current results page number.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryResult.html#currentPage)
             */
            readonly currentPage: number;
            /**
             * Returns the items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryResult.html#items)
             */
            readonly items: Group[];
            /**
             * Returns the number of items in the current results page.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryResult.html#length)
             */
            readonly length: number;
            /**
             * Returns the query page size.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryResult.html#pageSize)
             */
            readonly pageSize: number;
            /**
             * Returns the `GroupsQueryBuilder` object used to get the current results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryResult.html#query)
             */
            readonly query: Groups.GroupsQueryBuilder;
            /**
             * Returns the total number of items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryResult.html#totalCount)
             */
            readonly totalCount: number;
            /**
             * Returns the total number of pages the query produced.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryResult.html#totalPages)
             */
            readonly totalPages: number;
            /**
             * Retrieves the next page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryResult.html#next)
             */
            next(): Promise<Groups.GroupsQueryResult>;
            /**
             * Retrieves the previous page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryResult.html#prev)
             */
            prev(): Promise<Groups.GroupsQueryResult>;
        }
        /**
         * Contains functionality for refining a Groups query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryBuilder.html#)
         */
        namespace GroupsQueryBuilder {
        }
        /**
         * The results of a create request query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Groups.GroupsQueryResult.html#)
         */
        namespace GroupsQueryResult {
        }
    }
    /**
     * The JoinRequests API provides functionality for managing requests to join a group.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.html#)
     */
    namespace JoinRequests {
        type Identifiers = {
            /**
             * ID of the group requested to join.
             */
            groupId: string;
            /**
             * IDs of the site members to approve.
             */
            memberIds: string[];
        };
        type JoinRequest = {
            /**
             * Site member ID of the requester.
             */
            memberId: string;
            /**
             * Date the site member requested to join the group.
             */
            _createdDate: Date;
            /**
             * Status of the request to join a group.
             * One of:
             * - `"PENDING"`
             * - `"APPROVED"`
             * - `"REJECTED"`
             */
            status: string;
            /**
             * Reason the request to join a group was rejected.
             */
            rejectionReason?: string;
        };
        type ListJoinRequests = {
            /**
             * Requests to join a group.
             */
            joinRequests: JoinRequests.JoinRequest[];
            /**
             * Paging information.
             */
            metadata: Metadata;
        };
        type Paging = {
            /**
             * Maximum number of join requests to retrieve. Defaults to 100.
             */
            limit?: number;
            /**
             * Number of join requests to skip in the list.
             */
            skip?: number;
        };
        type Rejection = {
            /**
             * ID of the site member to reject.
             */
            memberId: string;
            /**
             * Reason the request to join a group was rejected. Text written by the request reviewer that is displayed when the group is rejected (max 1,000 characters).
             */
            reason: string;
        };
        /**
         * Contains functionality for refining a JoinRequests query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryBuilder.html#)
         */
        interface JoinRequestsQueryBuilder {
            /**
             * Refines a query to match items whose specified property value equals the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryBuilder.html#eq)
             */
            eq(propertyName: string, value: any): JoinRequests.JoinRequestsQueryBuilder;
            /**
             * Returns the items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryBuilder.html#find)
             */
            find(options?: Options): Promise<JoinRequests.JoinRequestsQueryResult>;
            /**
             * Refines a query to match items whose specified property value contains any of the specified values.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryBuilder.html#hasSome)
             */
            hasSome(propertyName: string, values: string[]): JoinRequests.JoinRequestsQueryBuilder;
            /**
             * Limits the number of items the query returns.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryBuilder.html#limit)
             */
            limit(limit: string): JoinRequests.JoinRequestsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value does not equal the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryBuilder.html#ne)
             */
            ne(propertyName: string, value: any): JoinRequests.JoinRequestsQueryBuilder;
            /**
             * Adds an `or` condition to the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryBuilder.html#or)
             */
            or(query: JoinRequests.JoinRequestsQueryBuilder): JoinRequests.JoinRequestsQueryBuilder;
            /**
             * Sets the number of items to skip before returning query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryBuilder.html#skip)
             */
            skip(skip: string): JoinRequests.JoinRequestsQueryBuilder;
        }
        /**
         * The results of a create request query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryResult.html#)
         */
        interface JoinRequestsQueryResult {
            /**
             * Returns the index of the current results page number.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryResult.html#currentPage)
             */
            readonly currentPage: number;
            /**
             * Returns the items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryResult.html#items)
             */
            readonly items: JoinRequests.JoinRequest[];
            /**
             * Returns the number of items in the current results page.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryResult.html#length)
             */
            readonly length: number;
            /**
             * Returns the query page size.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryResult.html#pageSize)
             */
            readonly pageSize: number;
            /**
             * Returns the `JoinRequestsQueryBuilder` object used to get the current results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryResult.html#query)
             */
            readonly query: JoinRequests.JoinRequestsQueryBuilder;
            /**
             * Returns the total number of items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryResult.html#totalCount)
             */
            readonly totalCount: number;
            /**
             * Returns the total number of pages the query produced.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryResult.html#totalPages)
             */
            readonly totalPages: number;
            /**
             * Retrieves the next page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryResult.html#next)
             */
            next(): Promise<JoinRequests.JoinRequestsQueryResult>;
            /**
             * Retrieves the previous page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryResult.html#prev)
             */
            prev(): Promise<JoinRequests.JoinRequestsQueryResult>;
        }
        /**
         * Contains functionality for refining a JoinRequests query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryBuilder.html#)
         */
        namespace JoinRequestsQueryBuilder {
        }
        /**
         * The results of a create request query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.JoinRequests.JoinRequestsQueryResult.html#)
         */
        namespace JoinRequestsQueryResult {
        }
    }
    /**
     * The Members API provides functionality for managing group members, inluding adding, removing, and querying group members.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.html#)
     */
    namespace Members {
        type GroupMember = {
            /**
             * Group member role.
             * One of:
             * - `"MEMBER"`: Group member.
             * - `"ADMIN"`: Group admins.
             */
            role: string;
            /**
             * Site member ID of group member.
             */
            memberId: string;
            /**
             * Date and time the group member joined the group.
             */
            joinedDate: Date;
        };
        type IdentifiersAddGroupMembers = {
            /**
             * ID of the group.
             */
            groupId: string;
            /**
             * IDs of the site members to add to the group.
             */
            memberIds: string[];
        };
        type IdentifiersRemoveGroupMembers = {
            /**
             * ID of the group.
             */
            groupId: string;
            /**
             * IDs of the site members to remove from the group.
             */
            memberIds: string[];
        };
        type ListGroupMembers = {
            /**
             * Group members.
             */
            members: Members.GroupMember[];
            /**
             * Paging information.
             */
            metadata: Metadata;
        };
        type ListMemberships = {
            /**
             * Site member's memberships.
             */
            memberships: Members.Membership[];
            /**
             * Paging information.
             */
            metadata: Metadata;
        };
        type Membership = {
            /**
             * Group ID.
             */
            groupId: string;
            /**
             * Group membership status.
             * One of:
             * - `"JOINED"`
             * - `"PENDING"`
             */
            status: string;
            /**
             * Group member role.
             * One of:
             * - `"MEMBER"`: Group member.
             * - `"ADMIN"`: Group admins.
             */
            role: string;
        };
        type Paging = {
            /**
             * Maximum number of group members to retrieve. Defaults to 100.
             */
            limit?: number;
            /**
             * Number of group members to skip in the list.
             */
            skip?: number;
        };
        type PagingMemberships = {
            /**
             * Maximum number of memberships to retrieve. Defaults to 100.
             */
            limit?: number;
            /**
             * Number of memberships to skip in the list.
             */
            skip?: number;
        };
        /**
         * Contains functionality for refining a Members query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryBuilder.html#)
         */
        interface GroupMembersQueryBuilder {
            /**
             * Adds a sort to a query, sorting by the specified properties in ascending order.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryBuilder.html#ascending)
             */
            ascending(...propertyName: string[]): Members.GroupMembersQueryBuilder;
            /**
             * Adds a sort to a query, sorting by the specified properties in descending order.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryBuilder.html#descending)
             */
            descending(...propertyName: string[]): Members.GroupMembersQueryBuilder;
            /**
             * Refines a query to match items whose specified property value equals the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryBuilder.html#eq)
             */
            eq(propertyName: string, value: any): Members.GroupMembersQueryBuilder;
            /**
             * Returns the items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryBuilder.html#find)
             */
            find(options?: Options): Promise<Members.GroupMembersQueryResult>;
            /**
             * Limits the number of items the query returns.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryBuilder.html#limit)
             */
            limit(limit: string): Members.GroupMembersQueryBuilder;
            /**
             * Refines a query to match items whose specified property value does not equal the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryBuilder.html#ne)
             */
            ne(propertyName: string, value: any): Members.GroupMembersQueryBuilder;
            /**
             * Sets the number of items to skip before returning query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryBuilder.html#skip)
             */
            skip(skip: string): Members.GroupMembersQueryBuilder;
        }
        /**
         * The results of a create request query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryResult.html#)
         */
        interface GroupMembersQueryResult {
            /**
             * Returns the index of the current results page number.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryResult.html#currentPage)
             */
            readonly currentPage: number;
            /**
             * Returns the items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryResult.html#items)
             */
            readonly items: Members.GroupMember[];
            /**
             * Returns the number of items in the current results page.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryResult.html#length)
             */
            readonly length: number;
            /**
             * Returns the query page size.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryResult.html#pageSize)
             */
            readonly pageSize: number;
            /**
             * Returns the `GroupMembersQueryBuilder` object used to get the current results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryResult.html#query)
             */
            readonly query: Members.GroupMembersQueryBuilder;
            /**
             * Returns the total number of items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryResult.html#totalCount)
             */
            readonly totalCount: number;
            /**
             * Returns the total number of pages the query produced.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryResult.html#totalPages)
             */
            readonly totalPages: number;
            /**
             * Retrieves the next page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryResult.html#next)
             */
            next(): Promise<Members.GroupMembersQueryResult>;
            /**
             * Retrieves the previous page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryResult.html#prev)
             */
            prev(): Promise<Members.GroupMembersQueryResult>;
        }
        /**
         * Contains functionality for refining a Memberships query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.MembershipsQueryBuilder.html#)
         */
        interface MembershipsQueryBuilder {
            /**
             * Refines a query to match items whose specified property value equals the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.MembershipsQueryBuilder.html#eq)
             */
            eq(propertyName: string, value: any): Members.MembershipsQueryBuilder;
            /**
             * Returns the items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.MembershipsQueryBuilder.html#find)
             */
            find(options?: Options): Promise<Members.MembershipsQueryResult>;
            /**
             * Limits the number of items the query returns.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.MembershipsQueryBuilder.html#limit)
             */
            limit(limit: string): Members.MembershipsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value does not equal the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.MembershipsQueryBuilder.html#ne)
             */
            ne(propertyName: string, value: any): Members.MembershipsQueryBuilder;
            /**
             * Sets the number of items to skip before returning query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.MembershipsQueryBuilder.html#skip)
             */
            skip(skip: string): Members.MembershipsQueryBuilder;
        }
        /**
         * The results of a create request query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.MembershipsQueryResult.html#)
         */
        interface MembershipsQueryResult {
            /**
             * Returns the index of the current results page number.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.MembershipsQueryResult.html#currentPage)
             */
            readonly currentPage: number;
            /**
             * Returns the items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.MembershipsQueryResult.html#items)
             */
            readonly items: Members.Membership[];
            /**
             * Returns the number of items in the current results page.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.MembershipsQueryResult.html#length)
             */
            readonly length: number;
            /**
             * Returns the query page size.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.MembershipsQueryResult.html#pageSize)
             */
            readonly pageSize: number;
            /**
             * Returns the `MembershipsQueryBuilder` object used to get the current results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.MembershipsQueryResult.html#query)
             */
            readonly query: Members.MembershipsQueryBuilder;
            /**
             * Returns the total number of items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.MembershipsQueryResult.html#totalCount)
             */
            readonly totalCount: number;
            /**
             * Returns the total number of pages the query produced.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.MembershipsQueryResult.html#totalPages)
             */
            readonly totalPages: number;
            /**
             * Retrieves the next page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.MembershipsQueryResult.html#next)
             */
            next(): Promise<Members.MembershipsQueryResult>;
            /**
             * Retrieves the previous page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.MembershipsQueryResult.html#prev)
             */
            prev(): Promise<Members.MembershipsQueryResult>;
        }
        /**
         * Contains functionality for refining a Members query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryBuilder.html#)
         */
        namespace GroupMembersQueryBuilder {
        }
        /**
         * The results of a create request query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.GroupMembersQueryResult.html#)
         */
        namespace GroupMembersQueryResult {
        }
        /**
         * Contains functionality for refining a Memberships query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.MembershipsQueryBuilder.html#)
         */
        namespace MembershipsQueryBuilder {
        }
        /**
         * The results of a create request query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Members.MembershipsQueryResult.html#)
         */
        namespace MembershipsQueryResult {
        }
    }
    /**
     * The Roles API provides functionality for assigning and unassigning a role to a group member.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-groups-backend.Roles.html#)
     */
    namespace Roles {
        type Identifiers = {
            /**
             * ID of the group.
             */
            groupId: string;
            /**
             * IDs of the site members.
             */
            memberIds: string[];
        };
    }
}

// /types/common/wix-forum-backend.d.ts
/**
 * The wix-forum-backend module contains functionality for working with
 *  your site's [forum](https://support.wix.com/en/article/wix-forum-about-wix-forum).
 * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.html#)
 */
declare module 'wix-forum-backend' {
    /**
     * Events that are fired from a Wix Forum.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#)
     */
    interface Events {
        /**
         * A backend event that fires when a new forum category is created.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onCategoryCreated)
         */
        onCategoryCreated(event: Events.CreatedCategory): void;
        /**
         * A backend event that fires when a forum category is deleted.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onCategoryDeleted)
         */
        onCategoryDeleted(event: Events.DeletedCategory): void;
        /**
         * A backend event that fires when a forum category is updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onCategoryUpdated)
         */
        onCategoryUpdated(event: Events.UpdatedCategory): void;
        /**
         * A backend event that fires when a new forum comment is created.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onCommentCreated)
         */
        onCommentCreated(event: Events.CreatedComment): void;
        /**
         * A backend event that fires when a forum comment is deleted.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onCommentDeleted)
         */
        onCommentDeleted(event: Events.DeletedComment): void;
        /**
         * A backend event that fires when a forum comment is downvoted.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onCommentDownvoted)
         */
        onCommentDownvoted(event: Events.DownvotedComment): void;
        /**
         * A backend event that fires when a forum comment is liked.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onCommentLiked)
         */
        onCommentLiked(event: Events.LikedComment): void;
        /**
         * A backend event that fires when a forum comment is marked as best.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onCommentMarkedAsBest)
         */
        onCommentMarkedAsBest(event: Events.MarkedAsBestComment): void;
        /**
         * A backend event that fires when a forum comment is reported.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onCommentReported)
         */
        onCommentReported(event: Events.ReportedComment): void;
        /**
         * A backend event that fires when a forum comment is unliked.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onCommentUnliked)
         */
        onCommentUnliked(event: Events.UnlikedComment): void;
        /**
         * A backend event that fires when a forum comment is unmarked as best.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onCommentUnmarkedAsBest)
         */
        onCommentUnmarkedAsBest(event: Events.UnmarkedAsBestComment): void;
        /**
         * A backend event that fires when a vote is removed from a forum comment.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onCommentUnvoted)
         */
        onCommentUnvoted(event: Events.UnvotedComment): void;
        /**
         * A backend event that fires when a forum comment is updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onCommentUpdated)
         */
        onCommentUpdated(event: Events.UpdatedComment): void;
        /**
         * A backend event that fires when a forum comment is upvoted.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onCommentUpvoted)
         */
        onCommentUpvoted(event: Events.UpvotedComment): void;
        /**
         * A backend event that fires when a forum post is closed.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onPostClosed)
         */
        onPostClosed(event: Events.ClosedPost): void;
        /**
         * A backend event that fires when a new forum post is created.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onPostCreated)
         */
        onPostCreated(event: Events.CreatedPost): void;
        /**
         * A backend event that fires when a forum post is deleted.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onPostDeleted)
         */
        onPostDeleted(event: Events.DeletedPost): void;
        /**
         * A backend event that fires when a forum post is liked.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onPostLiked)
         */
        onPostLiked(event: Events.LikedPost): void;
        /**
         * A backend event that fires when a forum post is moved.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onPostMoved)
         */
        onPostMoved(event: Events.MovedPost): void;
        /**
         * A backend event that fires when a forum post is opened.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onPostOpened)
         */
        onPostOpened(event: Events.OpenedPost): void;
        /**
         * A backend event that fires when a forum post is pinned.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onPostPinned)
         */
        onPostPinned(event: Events.PinnedPost): void;
        /**
         * A backend event that fires when a forum post is reported.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onPostReported)
         */
        onPostReported(event: Events.ReportedPost): void;
        /**
         * A backend event that fires when a forum post is unliked.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onPostUnliked)
         */
        onPostUnliked(event: Events.UnlikedPost): void;
        /**
         * A backend event that fires when a forum post is unpinned.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onPostUnpinned)
         */
        onPostUnpinned(event: Events.UnpinnedPost): void;
        /**
         * A backend event that fires when a forum post is updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#onPostUpdated)
         */
        onPostUpdated(event: Events.UpdatedPost): void;
    }
    /**
     * Events that are fired from a Wix Forum.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-forum-backend.Events.html#)
     */
    namespace Events {
        /**
         * An object representing a forum category.
         */
        type Category = {
            /**
             * Category ID.
             */
            _id: string;
            /**
             * Category name. Appears on the forum home page and in the navigation menu.
             */
            name: string;
            /**
             * Category header title. Appears in the category page header.
             */
            headerTitle: string;
            /**
             * Short description of the category.
             */
            description: string;
            /**
             * Type of header background.
             * One of the following:
             *
             *  + `"IMAGE"`: Category header background is an image.
             *  + `"COLOR"`: Category header background is a color.
             *
             *
             * The default value is `"COLOR"`.
             */
            headerType: string;
            /**
             * Category header background [image source](https://www.wix.com/velo/reference/$w/image/src). Applicable only if `headerType` is an image.
             */
            headerImage: string;
            /**
             * Forum category header image overlay color. Applicable only when `headerType` is `"IMAGE"`.
             */
            headerImageOverlayColor: Events.Color;
            /**
             * Forum category header background color.
             */
            headerBackgroundColor: Events.Color;
            /**
             * Forum category header text color.
             */
            headerTextColor: Events.Color;
            /**
             * Position in the list of categories on the forum home page. `0` indicates the first category.
             */
            rank: number;
            /**
             * Relative URL of the category page.
             */
            pageUrl: string;
            /**
             * URL-friendly name of the category that is unique across the forum.
             */
            slug: string;
            /**
             * Number of posts in the category.
             */
            postCount: number;
            /**
             * Total views of all posts in the category.
             */
            postViewCount: number;
            /**
             * Only admins and moderators can post in this category.
             */
            writeProtected: boolean;
            /**
             * Date and time the category was created.
             */
            _createdDate: Date;
            /**
             * Date and time the category was last updated.
             */
            _updatedDate: Date;
            /**
             * Type of category.
             * One of the following:
             *
             *
             *  + `"DISCUSSION"`: Conversational discussion with other members.
             *  + `"QUESTION"`: Specific question with answers from the community.
             */
            categoryType: string;
        };
        /**
         * An object representing a post that was closed.
         */
        type ClosedPost = {
            /**
             * Post ID.
             */
            postId: string;
        };
        /**
         * An object representing a color used in a forum header.
         */
        type Color = {
            /**
             * Hexadecimal rgb color value.
             */
            color: string;
            /**
             * Opacity percentage as a decimal between 0 and 1.
             */
            opacity: number;
        };
        /**
         * An object representing a forum comment.
         */
        type Comment = {
            /**
             * Comment ID.
             */
            _id: string;
            /**
             * ID of the post commented on.
             */
            postId: string;
            /**
             * ID of the comment author.
             */
            _ownerId: string;
            /**
             * Plain text of the comment.
             */
            plainContent: string;
            /**
             * Number of replies to the comment.
             */
            replyCount: number;
            /**
             * Number of likes the comment received.
             */
            likeCount: number;
            /**
             * Number of upvotes the comment received. Only applicable to comments on posts with a `postType` value of `"QUESTION"`.
             */
            upvoteCount: number;
            /**
             * Number of downvotes the comment received. Only applicable to comments on posts with a `postType` value of `"QUESTION"`.
             */
            downvoteCount: number;
            /**
             * Number of upvotes subtracted by the number of downvotes. May be a negative number. Only applicable to comments on posts with a `postType` value of `"QUESTION"`.
             */
            score: number;
            /**
             * Date and time the comment was created.
             */
            _createdDate: Date;
            /**
             * Date and time the comment was last edited.
             */
            _editedDate: Date;
            /**
             * Date and time of the last activity performed on the comment.
             */
            _lastActivityDate: Date;
            /**
             * Relative URL of the post page containing the comment.
             */
            pageUrl: string;
        };
        /**
         * An object representing a category that was created.
         */
        type CreatedCategory = {
            /**
             * Category ID.
             */
            categoryId: string;
            /**
             * Forum category that was created.
             */
            category: Events.Category;
        };
        /**
         * An object representing a comment that was created.
         */
        type CreatedComment = {
            /**
             * Comment ID.
             */
            commentId: string;
            /**
             * Forum comment that was created.
             */
            comment: Events.Comment;
        };
        /**
         * An object representing a post that was created.
         */
        type CreatedPost = {
            /**
             * Post ID.
             */
            postId: string;
            /**
             * Forum post that was created.
             */
            post: Events.Post;
        };
        /**
         * An object representing a category that was deleted.
         */
        type DeletedCategory = {
            /**
             * Category ID.
             */
            categoryId: string;
        };
        /**
         * An object representing a comment that was deleted.
         */
        type DeletedComment = {
            /**
             * Comment ID.
             */
            commentId: string;
        };
        /**
         * An object representing a post that was deleted.
         */
        type DeletedPost = {
            /**
             * Post ID.
             */
            postId: string;
        };
        /**
         * An object representing a comment that was downvoted.
         */
        type DownvotedComment = {
            /**
             * Comment ID.
             */
            commentId: string;
        };
        /**
         * An object representing a comment that was liked.
         */
        type LikedComment = {
            /**
             * Comment ID.
             */
            commentId: string;
        };
        /**
         * An object representing a post that was liked.
         */
        type LikedPost = {
            /**
             * Post ID.
             */
            postId: string;
        };
        /**
         * An object representing a comment that was marked as best.
         */
        type MarkedAsBestComment = {
            /**
             * Comment ID.
             */
            commentId: string;
        };
        /**
         * An object representing a post that was moved to a different category.
         */
        type MovedPost = {
            /**
             * Post ID.
             */
            postId: string;
            /**
             * ID of the category the post moved from.
             */
            previousCategoryId: string;
            /**
             * ID of the category the post moved to.
             */
            currentCategoryId: string;
        };
        /**
         * An object representing a post that was opened.
         */
        type OpenedPost = {
            /**
             * Post ID.
             */
            postId: string;
        };
        /**
         * An object representing a post that was pinned.
         */
        type PinnedPost = {
            /**
             * Post ID.
             */
            postId: string;
        };
        /**
         * An object representing a forum post.
         */
        type Post = {
            /**
             * Post ID.
             */
            _id: string;
            /**
             * ID of the post author.
             */
            _ownerId: string;
            /**
             * ID of the category the post belongs to.
             */
            categoryId: string;
            /**
             * Post title.
             */
            title: string;
            /**
             * Plain text of the post.
             */
            plainContent: string;
            /**
             * Whether the post is pinned. Only forum admins can pin and unpin posts.
             */
            pinned: boolean;
            /**
             * Whether comments are disabled for the post (the post was closed).
             */
            commentingDisabled: boolean;
            /**
             * Number of comments on the post.
             */
            commentCount: number;
            /**
             * Number of likes the post received.
             */
            likeCount: number;
            /**
             * Number of times the post was viewed.
             */
            viewCount: number;
            /**
             * Date and time the post was created.
             */
            _createdDate: Date;
            /**
             * Date and time the post was last edited.
             */
            _editedDate: Date;
            /**
             * Date and time of the last activity performed on the post.
             */
            _lastActivityDate: Date;
            /**
             * Relative URL of the post page.
             */
            pageUrl: string;
            /**
             * URL-friendly name of the post that is unique across the forum.
             */
            slug: string;
            /**
             * Type of post.
             * One of the following:
             *
             *
             *  + `"DISCUSSION"`: Conversational discussion with other members.
             *  + `"QUESTION"`: Specific question with answers from the community.
             */
            postType: string;
            /**
             * ID of comment marked as best answer to the post question. Applicable only for posts with a `postType` of `"QUESTION"`.
             */
            bestAnswerCommentId: string;
        };
        /**
         * An object representing a comment that was reported.
         */
        type ReportedComment = {
            /**
             * Comment ID.
             */
            commentId: string;
            /**
             * Type of report.
             * One of the following:
             *
             *
             *  + `"OFFENSIVE_CONTENT"`: Content that is offensive.
             *  + `"OFFENSIVE_MEDIA"`: Media content that is offensive.
             *  + `"SPAM"`: Comments with unrelated or unwanted information.
             */
            reportType: string;
        };
        /**
         * An object representing a post that was reported.
         */
        type ReportedPost = {
            /**
             * Post ID.
             */
            postId: string;
            /**
             * Type of report.
             * One of the following:
             *
             *
             *  + `"OFFENSIVE_CONTENT"`: Content that is offensive.
             *  + `"OFFENSIVE_MEDIA"`: Media content that is offensive.
             *  + `"SPAM"`: Posts with unrelated or unwanted information.
             */
            reportType: string;
        };
        /**
         * An object representing a comment that was unliked.
         */
        type UnlikedComment = {
            /**
             * Comment ID.
             */
            commentId: string;
        };
        /**
         * An object representing a post that was unliked.
         */
        type UnlikedPost = {
            /**
             * Post ID.
             */
            postId: string;
        };
        /**
         * An object representing a comment that was marked as best.
         */
        type UnmarkedAsBestComment = {
            /**
             * Comment ID.
             */
            commentId: string;
        };
        /**
         * An object representing a post that was unpinned.
         */
        type UnpinnedPost = {
            /**
             * Post ID.
             */
            postId: string;
        };
        /**
         * An object representing a comment that was unvoted.
         */
        type UnvotedComment = {
            /**
             * Comment ID.
             */
            commentId: string;
        };
        /**
         * An object representing a category that was updated.
         */
        type UpdatedCategory = {
            /**
             * Category ID.
             */
            categoryId: string;
            /**
             * Forum category that was updated.
             */
            category: Events.Category;
        };
        /**
         * An object representing a comment that was updated.
         */
        type UpdatedComment = {
            /**
             * Comment ID.
             */
            commentId: string;
            /**
             * Forum comment that was updated.
             */
            comment: Events.Comment;
        };
        /**
         * An object representing a post that was updated.
         */
        type UpdatedPost = {
            /**
             * Post ID.
             */
            postId: string;
            /**
             * Forum post that was updated.
             */
            post: Events.Post;
        };
        /**
         * An object representing a comment that was upvoted.
         */
        type UpvotedComment = {
            /**
             * Comment ID.
             */
            commentId: string;
        };
    }
}

// /types/common/wix-fetch.d.ts
/**
 * An implementation of the standard [Javascript Fetch API](https://developer.mozilla.org/en/docs/Web/API/Fetch_API)
 *  which can be used in public and backend code for fetching resources
 *  from [3rd party services](https://support.wix.com/en/article/accessing-3rd-party-services)
 *  using HTTPS.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-fetch.html#)
 */
declare module 'wix-fetch' {
    /**
     * Retrieves the specified resource from the network using HTTPS.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-fetch.html#fetch)
     */
    function fetch(url: string, options?: WixFetchRequest): Promise<WixFetchResponse>;
    /**
     * Retrieves the specified JSON resource from the network using HTTPS.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-fetch.html#getJSON)
     */
    function getJSON(url: string, options?: WixFetchRequest): Promise<any>;
    /**
     * An object used by the `fetch()` function representing an HTTPS request.
     */
    type WixFetchRequest = {
        /**
         * The [HTTP method](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods) to use. Defaults to `"GET"`.
         */
        method?: string;
        /**
         * The request headers.
         */
        headers?: any;
        /**
         * The request body.
         */
        body?: string;
        /**
         * The [request mode](https://developer.mozilla.org/en-US/docs/Web/API/Request/mode).
         *
         * One of:
         *
         * + `"cors"`
         * + `"no-cors"`
         * + `"same-origin"`
         */
        mode?: string;
        /**
         * The [request credentials](https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials).
         *
         * One of:
         *
         * + `"omit"`
         * + `"include"`
         * + `"same-origin"`
         */
        credentials?: string;
        /**
         * The [request cache mode](https://developer.mozilla.org/en-US/docs/Web/API/Request/cache).
         *
         * One of:
         *
         * + `"default"`
         * + `"force-cache"`
         * + `"no-cache"`
         * + `"no-store"`
         * + `"only-if-cached"`
         * + `"reload"`
         */
        cache?: string;
    };
    /**
     * An object returned by the `fetch()` function representing
     *  an HTTP response to a fetch.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-fetch.WixFetchResponse.html#)
     */
    interface WixFetchResponse {
        /**
         * Indicates whether the body of the response has been used yet.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-fetch.WixFetchResponse.html#bodyUsed)
         */
        readonly bodyUsed: boolean;
        /**
         * The response headers.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-fetch.WixFetchResponse.html#headers)
         */
        readonly headers: any;
        /**
         * Indicates if the request was successful, meaning its `status` is in the range 2xx.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-fetch.WixFetchResponse.html#ok)
         */
        readonly ok: boolean;
        /**
         * The response [status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-fetch.WixFetchResponse.html#status)
         */
        readonly status: number;
        /**
         * The response [status message](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-fetch.WixFetchResponse.html#statusText)
         */
        readonly statusText: string;
        /**
         * The response URL.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-fetch.WixFetchResponse.html#url)
         */
        readonly url: string;
        /**
         * Reads the response body as JSON.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-fetch.WixFetchResponse.html#json)
         */
        json(): Promise<any>;
        /**
         * Reads the response body as a string.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-fetch.WixFetchResponse.html#text)
         */
        text(): Promise<string>;
    }
}

// /types/common/wix-events-backend.d.ts
/**
 * The wix-events-backend module contains functionality for working with
 *  your site's [Wix events](https://support.wix.com/en/article/about-wix-events).
 * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.html#)
 */
declare module 'wix-events-backend' {
    /**
     * The Events API provides functionality for updating and managing events created in the Wix Events app or using this Wix Events API.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.html#wixEvents)
     */
    const wixEvents: WixEvents;
    /**
     * Backend events that are fired from Wix events.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#)
     */
    interface Events {
        /**
         * A backend event that fires when a Wix event is canceled.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onEventCanceled)
         */
        onEventCanceled(event: Events.CanceledEvent): void;
        /**
         * A backend event that fires when a Wix event is created or copied.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onEventCreated)
         */
        onEventCreated(event: Events.CreatedEvent): void;
        /**
         * A backend event that fires when a Wix event is deleted.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onEventDeleted)
         */
        onEventDeleted(event: Events.DeletedEvent): void;
        /**
         * A backend event that fires when a Wix event ends.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onEventEnded)
         */
        onEventEnded(event: Events.EndedEvent): void;
        /**
         * A backend event that fires when a Wix event's reminders are sent.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onEventReminder)
         */
        onEventReminder(event: Events.EventReminder): void;
        /**
         * A backend event that fires when a Wix event starts.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onEventStarted)
         */
        onEventStarted(event: Events.StartedEvent): void;
        /**
         * A backend event that fires when an existing Wix event is updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onEventUpdated)
         */
        onEventUpdated(event: Events.UpdatedEvent): void;
        /**
         * A backend event that fires when a ticket order is confirmed.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onOrderConfirmed)
         */
        onOrderConfirmed(event: Events.OrderConfirmedEvent): void;
        /**
         * A backend event that fires when a ticket order is deleted.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onOrderDeleted)
         */
        onOrderDeleted(event: Events.OrderDeletedEvent): void;
        /**
         * A backend event that fires when a ticket order is initiated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onOrderInitiated)
         */
        onOrderInitiated(event: Events.OrderInitiatedEvent): void;
        /**
         * A backend event that fires when a ticket order is updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onOrderUpdated)
         */
        onOrderUpdated(event: Events.OrderUpdatedEvent): void;
        /**
         * A backend event that fires when a ticket reservation is created.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onReservationCreated)
         */
        onReservationCreated(event: Events.ReservationCreatedEvent): void;
        /**
         * A backend event that fires when a ticket reservation is updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onReservationUpdated)
         */
        onReservationUpdated(event: Events.ReservationUpdatedEvent): void;
        /**
         * A backend event that fires when a guest registers to a Wix event.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onRsvpCreated)
         */
        onRsvpCreated(event: Events.RsvpCreatedEvent): void;
        /**
         * A backend event that fires when an RSVP is deleted.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onRsvpDeleted)
         */
        onRsvpDeleted(event: Events.RsvpDeletedEvent): void;
        /**
         * A backend event that fires when an RSVP is updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onRsvpUpdated)
         */
        onRsvpUpdated(event: Events.RsvpUpdatedEvent): void;
        /**
         * A backend event that fires when a ticket definition is created.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onTicketDefinitionCreated)
         */
        onTicketDefinitionCreated(event: Events.TicketDefinitionCreatedEvent): void;
        /**
         * A backend event that fires when a ticket definition is deleted.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onTicketDefinitionDeleted)
         */
        onTicketDefinitionDeleted(event: Events.TicketDefinitionDeletedEvent): void;
        /**
         * A backend event that fires when a ticket definition is updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onTicketDefinitionUpdated)
         */
        onTicketDefinitionUpdated(event: Events.TicketDefinitionUpdatedEvent): void;
        /**
         * A backend event that fires when a Wix event is canceled.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#onWixEventCanceled)
         */
        onWixEventCanceled(event: Events.CanceledWixEvent): void;
    }
    /**
     * The Wix Events API provides functionality for creating, updating, and managing Wix events.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.html#)
     */
    interface WixEvents {
        /**
         * Cancels a Wix event and closes its registration.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.html#cancelEvent)
         */
        cancelEvent(eventId: string): Promise<WixEvents.WixEvent>;
        /**
         * Copies a Wix event.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.html#copyEvent)
         */
        copyEvent(eventId: string): Promise<WixEvents.WixEvent>;
        /**
         * Creates a Wix event.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.html#createEvent)
         */
        createEvent(eventInfo: WixEvents.WixEventInfo, options: WixEvents.WixEventInfoOptions): Promise<WixEvents.WixEvent>;
        /**
         * Deletes a Wix event.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.html#deleteEvent)
         */
        deleteEvent(eventId: string): Promise<void>;
        /**
         * Retrieves a Wix event by ID.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.html#getEvent)
         */
        getEvent(eventId: string): Promise<WixEvents.WixEvent>;
        /**
         * Creates a query to retrieve a list of Wix events.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.html#queryEvents)
         */
        queryEvents(): WixEvents.EventsQueryBuilder;
        /**
         * Updates a Wix event.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.html#updateEvent)
         */
        updateEvent(eventId: string, eventInfo: WixEvents.WixEventUpdateInfo, options: WixEvents.WixEventInfoOptions): Promise<WixEvents.WixEvent>;
    }
    /**
     * Backend events that are fired from Wix events.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.Events.html#)
     */
    namespace Events {
        /**
         * An object representing a Wix event that was canceled.
         */
        type CanceledEvent = {
            /**
             * Time the event was canceled.
             */
            timestamp: Date;
            /**
             * Event ID.
             */
            eventId: string;
            /**
             * Event title.
             */
            title: string;
        };
        /**
         * An object representing a Wix event that was canceled.
         */
        type CanceledWixEvent = {
            /**
             * Time the event was canceled.
             */
            timestamp: Date;
            /**
             * Event ID.
             */
            eventId: string;
            /**
             * Event title.
             */
            title: string;
        };
        /**
         * An object representing guest check-in.
         */
        type CheckIn = {
            /**
             * Time guest was checked-in.
             */
            created: Date;
        };
        /**
         * An object representing the Wix event that was created or copied.
         */
        type CreatedEvent = {
            /**
             * Time the event was created/copied.
             */
            timestamp: Date;
            /**
             * Event ID.
             */
            eventId: string;
            /**
             * Event title.
             */
            title: string;
            /**
             * Event location.
             */
            location: Events.Location;
            /**
             * Event's schedule configuration.
             */
            scheduleConfig: Events.ScheduleConfiguration;
            /**
             * ID of the user who created/copied the event.
             */
            userId: string;
        };
        /**
         * An object representing a Wix event that was deleted.
         */
        type DeletedEvent = {
            /**
             * Time the event was deleted.
             */
            timestamp: Date;
            /**
             * Event ID.
             */
            eventId: string;
            /**
             * Event title.
             */
            title: string;
        };
        /**
         * An object representing an applied discount.
         */
        type Discount = {
            /**
             * Discount amount.
             */
            amount: Events.Money;
            /**
             * Amount after discount.
             */
            afterDiscount: Events.Money;
            /**
             * Discount items.
             */
            discounts: Events.DiscountItem[];
        };
        /**
         * An object representing a coupon discount.
         */
        type DiscountCoupon = {
            /**
             * Coupon name.
             */
            name: string;
            /**
             * Coupon code.
             */
            code: string;
            /**
             * Coupon ID.
             */
            couponId: string;
        };
        /**
         * An object representing an applied discount of specific type.
         */
        type DiscountItem = {
            /**
             * Discount amount.
             */
            amount: Events.Money;
            /**
             * Discount coupon.
             */
            coupon?: Events.DiscountCoupon;
            /**
             * Pricing plan discount.
             */
            paidPlan?: Events.PricingPlanDiscount;
        };
        /**
         * An object representing the event that has ended.
         */
        type EndedEvent = {
            /**
             * Time the event ended.
             */
            timestamp: Date;
            /**
             * The ID of the event.
             */
            eventId: string;
        };
        /**
         * An object representing the Wix event that reminders have been sent for.
         */
        type EventReminder = {
            /**
             * Time the reminder was sent.
             */
            timestamp: Date;
            /**
             * Event ID.
             */
            eventId: string;
            /**
             * Event location.
             */
            location: Events.Location;
            /**
             * Event's schedule configuration.
             */
            scheduleConfig: Events.ScheduleConfiguration;
            /**
             * Event title.
             */
            title: string;
            /**
             * ID of the user who created the event.
             */
            userId: string;
            /**
             * The time between now and the event start.
             */
            startsIn: Events.TimeDuration;
        };
        /**
         * An object representing an applied fee.
         */
        type Fee = {
            /**
             * Fee name. Value is `"WIX_FEE"`: Wix service fee applied to the item.
             */
            name: string;
            /**
             * Fee calculation method.
             *  One of:
             *
             *  + `"FEE_ADDED"`: Fee is added to the ticket price at checkout.
             *  + `"FEE_INCLUDED"`: Seller absorbs the fee. It is deducted from the ticket price.
             */
            type: string;
            /**
             * Rate percentage. Possible values are between `"0.01"` and `"100"`, using up to 2 decimal places.
             */
            rate: string;
            /**
             * Total amount of fee charges.
             */
            amount: Events.Money;
        };
        /**
         * An object representing a submitted guest form.
         */
        type FormResponse = {
            /**
             * Values that were entered in the guest form.
             */
            inputValues: Events.InputValue[];
        };
        /**
         * An object representing a guest of a Wix event's RSVP.
         */
        type Guest = {
            /**
             * Index of the guest in the RSVP guest list. Indices are zero-based.
             */
            index: number;
            /**
             * Guest ID, which is unique within the RSVP.
             */
            id: number;
            /**
             * Full name of the guest.
             */
            fullName: string;
        };
        /**
         * An object representing a guest form input value.
         */
        type InputValue = {
            /**
             * Name of the form input.
             */
            inputName: string;
            /**
             * Value of the form input, when there is just one value.
             */
            value: string;
            /**
             * Values of the form input, when there are multiple values.
             */
            values: string[];
        };
        /**
         * An object representing an order invoice.
         */
        type Invoice = {
            /**
             * Invoice items.
             */
            items: Events.InvoiceItem[];
            /**
             * Invoice applied discount.
             */
            discount?: Events.Discount;
            /**
             * Invoice applied tax.
             */
            tax?: Events.Tax;
            /**
             * Invoice applied fee charges.
             */
            fees: Events.Fee[];
            /**
             * Invoice total amount before discount, tax, and fees.
             */
            subTotal: Events.Money;
            /**
             * Invoice total amount after discount, tax, and fees.
             *  Grand total is calculated in the following manner:
             *
             *  1. Total price of all items in the cart.
             *  2. Discount is subtracted from the cart (if applicable).
             *  3. Tax is added (if applicable).
             *  4. Wix service fee is added.
             */
            grandTotal: Events.Money;
            /**
             * Total revenue with taxes, excluding fees. Payment provider fees are not deducted.
             */
            revenue: Events.Money;
        };
        /**
         * An object representing an order invoice item.
         */
        type InvoiceItem = {
            /**
             * Invoice item ID.
             */
            id: string;
            /**
             * Invoice item quantity.
             */
            quantity: number;
            /**
             * Invoice item name.
             */
            name: string;
            /**
             * Invoice item price.
             */
            price: Events.Money;
            /**
             * Invoice item total.
             */
            total: Events.Money;
            /**
             * Invoice item applied discount.
             */
            discount?: Events.Discount;
            /**
             * Invoice item applied tax.
             */
            tax?: Events.Tax;
            /**
             * Invoice item applied fee charges.
             */
            fees: Events.Fee[];
        };
        /**
         * An object representing the Wix event location.
         */
        type Location = {
            /**
             * Location name.  Maximum allowed characters is 50.
             */
            name: string;
            /**
             * The location's map coordinates.
             */
            coordinates: Events.MapCoordinates;
            /**
             * Single line address representation of the location.
             */
            address: string;
            /**
             * Type of location.
             *  One of:
             *
             *  + `"VENUE"`: Event is hosted in the venue.
             *  + `"ONLINE"`: Event is hosted online.
             */
            type: string;
        };
        /**
         * An object representing an event location's coordinates.
         */
        type MapCoordinates = {
            /**
             * Latitude.
             */
            lat: number;
            /**
             * Longitude.
             */
            lng: number;
        };
        /**
         * An object representing money.
         */
        type Money = {
            /**
             * Decimal amount.
             */
            amount: string;
            /**
             * Currency code. Must be a valid [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code (for example, `USD`).
             */
            currency: string;
        };
        /**
         * An object representing the confirmed order.
         */
        type OrderConfirmedEvent = {
            /**
             * Time order was confirmed.
             */
            timestamp: Date;
            /**
             * Event ID.
             */
            eventId: string;
            /**
             * Unique order number.
             */
            orderNumber: string;
            /**
             * Contact ID associated with this order.
             */
            contactId?: string;
            /**
             * Member ID associated with this order.
             */
            memberId?: string;
            /**
             * Time order was created.
             */
            created: Date;
            /**
             * Buyer first name.
             */
            firstName: string;
            /**
             * Buyer last name.
             */
            lastName: string;
            /**
             * Buyer email.
             */
            email: string;
            /**
             * Checkout form response.
             */
            checkoutForm: Events.FormResponse;
            /**
             * Order status.
             *  One of:
             *
             *  + `"FREE"`: Order is confirmed, no payment required.
             *  + `"PENDING"`: Order was paid, but the payment provider suspended the payment. Eventually changes to `"PAID"`.
             *  + `"PAID"`: Order paid using the payment provider.
             *  + `"OFFLINE_PENDING"`: Order confirmed, but has to be paid offline and status needs to be manually updated to `"PAID"`.
             *  + `"INITIATED"`: Order is awaiting payment.
             */
            status: string;
            /**
             * Payment method used. For example, "payPal" or "creditCard".
             */
            method: string;
            /**
             * Order invoice.
             */
            invoice: Events.Invoice;
            /**
             * Tickets generated after payment.
             */
            tickets: Events.Ticket[];
        };
        /**
         * An object representing the deleted ticket order.
         */
        type OrderDeletedEvent = {
            /**
             * Time order was deleted.
             */
            timestamp: Date;
            /**
             * Event ID.
             */
            eventId: string;
            /**
             * Unique order number.
             */
            orderNumber: string;
            /**
             * Contact ID associated with this order.
             */
            contactId?: string;
            /**
             * Member ID associated with this order.
             */
            memberId?: string;
            /**
             * Whether the order was anonymized by a GDPR delete.
             */
            anonymized: boolean;
            /**
             * Order type.
             *  One of:
             *
             *  + `"UNASSIGNED_TICKETS"`: Buyer form is used for all tickets.
             *  + `"ASSIGNED_TICKETS"`: Each order ticket has its own form.
             */
            orderType: string;
        };
        /**
         * An object representing the initiated order.
         */
        type OrderInitiatedEvent = {
            /**
             * Time order was initiated.
             */
            timestamp: Date;
            /**
             * Event ID.
             */
            eventId: string;
            /**
             * Unique order number.
             */
            orderNumber: string;
            /**
             * Contact ID associated with this order.
             */
            contactId?: string;
            /**
             * Member ID associated with this order.
             */
            memberId?: string;
            /**
             * Buyer first name.
             */
            firstName: string;
            /**
             * Buyer last name.
             */
            lastName: string;
            /**
             * Buyer email.
             */
            email: string;
            /**
             * Checkout form response.
             */
            checkoutForm: Events.FormResponse;
            /**
             * Order status.
             *  One of:
             *
             *  + `"FREE"`: Order is confirmed, no payment required.
             *  + `"PENDING"`: Order was paid, but the payment provider suspended the payment. Eventually changes to `"PAID"`.
             *  + `"PAID"`: Order paid using the payment provider.
             *  + `"OFFLINE_PENDING"`: Order confirmed, but has to be paid offline and status needs to be manually updated to `"PAID"`.
             *  + `"INITIATED"`: Order is awaiting payment.
             */
            status: string;
            /**
             * Order invoice.
             */
            invoice: Events.Invoice;
        };
        /**
         * An object representing the updated order.
         */
        type OrderUpdatedEvent = {
            /**
             * Time order was updated.
             */
            timestamp: Date;
            /**
             * Event ID.
             */
            eventId: string;
            /**
             * Unique order number.
             */
            orderNumber: string;
            /**
             * Contact ID associated with this order.
             */
            contactId?: string;
            /**
             * Member ID associated with this order.
             */
            memberId?: string;
            /**
             * Time order was created.
             */
            created: Date;
            /**
             * Buyer first name.
             */
            firstName: string;
            /**
             * Buyer last name.
             */
            lastName: string;
            /**
             * Buyer email.
             */
            email: string;
            /**
             * Checkout form response.
             */
            checkoutForm: Events.FormResponse;
            /**
             * Whether the order is confirmed An order gets confirmed
             *  when the payment gateway processes the payment and the funds reach the merchant's account.
             */
            confirmed: boolean;
            /**
             * Order status.
             *  One of:
             *
             *  + `"FREE"`: Order is confirmed, no payment required.
             *  + `"PENDING"`: Order was paid, but the payment provider suspended the payment. Eventually changes to `"PAID"`.
             *  + `"PAID"`: Order paid using the payment provider.
             *  + `"OFFLINE_PENDING"`: Order confirmed, but has to be paid offline and status needs to be manually updated to `"PAID"`.
             *  + `"INITIATED"`: Order is awaiting payment.
             */
            status: string;
            /**
             * Payment method used. For example, "payPal" or "creditCard".
             */
            method: string;
            /**
             * Whether the order is archived.
             */
            archived: boolean;
            /**
             * Tickets generated after payment.
             */
            tickets: Events.Ticket[];
        };
        /**
         * An object representing a fixed rate discount.
         */
        type PercentDiscount = {
            /**
             * Discount rate percentage. Possible values are between `"0.01"` and `"100"`, using up to 2 decimal places.
             */
            rate: string;
            /**
             * Number of discounted items.
             */
            quantityDiscounted: number;
        };
        /**
         * An object representing a pricing plan discount.
         */
        type PricingPlanDiscount = {
            /**
             * Pricing plan name.
             */
            name: string;
            /**
             * Percentage applied discount.
             */
            percentDiscount?: Events.PercentDiscount;
        };
        /**
         * An object representing the created ticket reservation.
         */
        type ReservationCreatedEvent = {
            /**
             * Time tickets were reserved.
             */
            timestamp: Date;
            /**
             * Event ID.
             */
            eventId: string;
            /**
             * Reservation ID. Can be used to retrieve an invoice.
             */
            reservationId: string;
            /**
             * Time reservation expires.
             */
            expires: Date;
            /**
             * Reservation status.
             *  One of:
             *
             *  + `"RESERVATION_PENDING"`: Reservation is pending confirmation. It will expire after expiration due time.
             *  + `"RESERVATION_CONFIRMED"`: Reservation was confirmed and will not expire.
             *  + `"RESERVATION_CANCELED"`: Reservation was canceled because of non payment.
             *  + `"RESERVATION_CANCELED_MANUALLY"`: Reservation was canceled manually by the buyer.
             */
            status: string;
        };
        /**
         * An object representing the updated reservation.
         */
        type ReservationUpdatedEvent = {
            /**
             * Time tickets were reserved.
             */
            timestamp: Date;
            /**
             * Event ID.
             */
            eventId: string;
            /**
             * Reservation ID. Can be used to retrieve an invoice.
             */
            reservationId: string;
            /**
             * Reservation status.
             *  One of:
             *
             *  + `"RESERVATION_PENDING"`: Reservation is pending confirmation. It will expire after expiration due time.
             *  + `"RESERVATION_CONFIRMED"`: Reservation was confirmed and will not expire.
             *  + `"RESERVATION_CANCELED"`: Reservation was canceled because of non payment.
             *  + `"RESERVATION_CANCELED_MANUALLY"`: Reservation was canceled manually by the buyer.
             */
            status: string;
        };
        /**
         * An object representing the created RSVP.
         */
        type RsvpCreatedEvent = {
            /**
             * Time the RSVP was created.
             */
            timestamp: Date;
            /**
             * Event ID.
             */
            eventId: string;
            /**
             * RSVP ID.
             */
            rsvpId: string;
            /**
             * Contact ID associated with the RSVP.
             */
            contactId: string;
            /**
             * Member ID associated with the RSVP.
             */
            memberId?: string;
            /**
             * RSVP response status.
             *  One of:
             *
             *  + `"YES"`: Guest is attending.
             *  + `"NO"`: Guest is not attending.
             *  + `"WAITING"`: Guest added to the wait list.
             */
            status: string;
            /**
             * Guest first name.
             */
            firstName: string;
            /**
             * Guest last name.
             */
            lastName: string;
            /**
             * Guest email address.
             */
            email: string;
            /**
             * RSVP form response.
             */
            rsvpForm: Events.FormResponse;
            /**
             * List of guests.
             */
            guests: Events.Guest[];
        };
        /**
         * An object representing the deleted RSVP.
         */
        type RsvpDeletedEvent = {
            /**
             * Time RSVP was deleted.
             */
            timestamp: Date;
            /**
             * Event ID.
             */
            eventId: string;
            /**
             * RSVP ID.
             */
            rsvpId: string;
            /**
             * Contact ID associated with this RSVP.
             */
            contactId: string;
            /**
             * Member ID associated with this RSVP.
             */
            memberId?: string;
            /**
             * Whether the RSVP was anonymized as a result of a GDPR delete.
             */
            anonymized: boolean;
        };
        /**
         * An object representing the updated RSVP.
         */
        type RsvpUpdatedEvent = {
            /**
             * Time the RSVP was updated.
             */
            timestamp: Date;
            /**
             * Time the RSVP was created.
             */
            created: Date;
            /**
             * Event ID.
             */
            eventId: string;
            /**
             * RSVP ID.
             */
            rsvpId: string;
            /**
             * Contact ID associated with this RSVP.
             */
            contactId: string;
            /**
             * Member ID associated with this RSVP.
             */
            memberId?: string;
            /**
             * RSVP response status.
             *  One of:
             *
             *  + `"YES"`: Guest is attending.
             *  + `"NO"`: Guest is not attending.
             *  + `"WAITING"`: Guest added to the wait list.
             */
            status: string;
            /**
             * Guest first name.
             */
            firstName: string;
            /**
             * Guest last name.
             */
            lastName: string;
            /**
             * Guest email.
             */
            email: string;
            /**
             * RSVP form response.
             */
            rsvpForm: Events.FormResponse;
            /**
             * List of guests.
             */
            guests: Events.Guest[];
        };
        /**
         * An object representing an event's schedule configuration.
         */
        type ScheduleConfiguration = {
            /**
             * Whether the event's schedule is to be determined later.
             *
             *  If an event's time is not yet decided, the TBD message is displayed instead of the
             *  start date and end date.
             *
             *  When `scheduleTbd` is `true`, `startDate`, `endDate`, and `timeZoneId` are not required.
             */
            scheduleTbd: boolean;
            /**
             * Schedule TBD message.
             */
            scheduleTbdMessage?: string;
            /**
             * Event start date.
             */
            startDate?: Date;
            /**
             * Event end date.
             */
            endDate?: Date;
            /**
             * ID of the time zone for the Wix event in [tz database format](https://en.wikipedia.org/wiki/Tz_database), such as `EST`, or `America/Los_Angeles`. Optional for TBD events.
             */
            timeZoneId?: string;
        };
        /**
         * An object representing the event that has started.
         */
        type StartedEvent = {
            /**
             * Time the event started.
             */
            timestamp: Date;
            /**
             * Event ID.
             */
            eventId: string;
        };
        /**
         * An object representing an applied tax.
         */
        type Tax = {
            /**
             * Tax type.
             *  One of:
             *
             *  + `"INCLUDED"`: Tax is included in the ticket price.
             *  + `"ADDED"`: Tax is added to the order at checkout.
             */
            type: string;
            /**
             * Tax name.
             */
            name: string;
            /**
             * Rate percentage. Possible values are between `"0.01"` and `"100"`, using up to 2 decimal places.
             */
            rate: string;
            /**
             * Taxable amount.
             */
            taxable: Events.Money;
            /**
             * Total tax amount.
             */
            amount: Events.Money;
        };
        /**
         * An object representing a generated ticket.
         */
        type Ticket = {
            /**
             * Unique ticket number.
             */
            ticketNumber: string;
            /**
             * Ticket definition ID.
             */
            ticketDefinitionId: string;
            /**
             * Ticket check-in.
             */
            checkIn: Events.CheckIn;
            /**
             * Whether the ticket is archived.
             */
            archived: boolean;
            /**
             * Whether the ticket is confirmed.
             */
            confirmed: boolean;
            /**
             * Guest first name.
             */
            firstName?: string;
            /**
             * Guest last name.
             */
            lastName?: string;
            /**
             * Guest email address.
             */
            email?: string;
            /**
             * Contact ID associated with this ticket.
             */
            contactId?: string;
            /**
             * Member ID associated with this ticket.
             */
            memberId?: string;
            /**
             * Ticket form response. Only assigned tickets contain a separate form.
             */
            form?: Events.FormResponse;
        };
        /**
         * An object representing the created ticket definition.
         */
        type TicketDefinitionCreatedEvent = {
            /**
             * Time ticket definition was created.
             */
            timestamp: Date;
            /**
             * Event ID.
             */
            eventId: string;
            /**
             * Ticket definition ID.
             */
            ticketDefinitionId: string;
        };
        /**
         * An object representing the deleted ticket definition.
         */
        type TicketDefinitionDeletedEvent = {
            /**
             * Time ticket definition was deleted.
             */
            timestamp: Date;
            /**
             * Event ID.
             */
            eventId: string;
            /**
             * Ticket definition ID.
             */
            ticketDefinitionId: string;
        };
        /**
         * An object representing the updated ticket definition.
         */
        type TicketDefinitionUpdatedEvent = {
            /**
             * Time ticket definition was updated.
             */
            timestamp: Date;
            /**
             * Event ID.
             */
            eventId: string;
            /**
             * Ticket definition ID.
             */
            ticketDefinitionId: string;
        };
        /**
         * An object representing a time duration.
         */
        type TimeDuration = {
            /**
             * Number of days in the time duration.
             */
            days: number;
            /**
             * Number of hours in the time duration.
             */
            hours: number;
            /**
             * Number of minutes in the time duration.
             */
            minutes: number;
        };
        /**
         * An object representing the Wix event that was updated.
         */
        type UpdatedEvent = {
            /**
             * Time the event was updated.
             */
            timestamp: Date;
            /**
             * Event ID.
             */
            eventId: string;
            /**
             * Event title.
             */
            title: string;
            /**
             * Event location.
             */
            location: Events.Location;
            /**
             * Event's schedule configuration.
             */
            scheduleConfig: Events.ScheduleConfiguration;
            /**
             * Whether the schedule configuration was updated.
             */
            scheduleConfigUpdated: boolean;
        };
    }
    /**
     * The Wix Events API provides functionality for creating, updating, and managing Wix events.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.html#)
     */
    namespace WixEvents {
        /**
         * An object representing additional labels for form fields.
         */
        type AdditionalLabel = {
            /**
             * Field name.
             */
            name: string;
            /**
             * Field label.
             */
            label: string;
        };
        /**
         * An object representing a street address for the Wix event.
         */
        type Address = {
            /**
             * Main address line (usually street and number) as free text. For non-TBD events, either `addressLine1` or `streetAddress` must be entered. Optional for TBD events.
             */
            addressLine1?: string;
            /**
             * Street address object, with number and name in separate fields.  For non-TBD events, either `addressLine1` or `streetAddress` must be entered. Optional for TBD events.
             */
            streetAddress?: WixEvents.StreetAddress;
            /**
             * Human-readable address string. If not provided, the value is generated from the available address data.  If provided, the value is parsed and used to populate other address properties.
             */
            formatted: string;
            /**
             * Free text providing more detailed address information, such as apartment, suite, or floor.
             */
            addressLine2: string;
            /**
             * Coordinates of the physical address.
             */
            location: WixEvents.AddressLocation;
            /**
             * City name.
             */
            city: string;
            /**
             * Code for a subdivision (such as state, prefecture, or province) in an [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) format.
             */
            subdivision: string;
            /**
             * 2-letter country code in an [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
             */
            country: string;
            /**
             * Postal or zip code.
             */
            postalCode: string;
        };
        /**
         * An object for updating a street address.
         */
        type AddressInfo = {
            /**
             * Main address line (usually street and number) as free text. For non-TBD events, either `addressLine1` or `streetAddress` must be entered. Optional for TBD events.
             */
            addressLine1?: string;
            /**
             * Street address object, with number and name in separate fields. For non-TBD events, either `addressLine1` or `streetAddress` must be entered. Optional for TBD events.
             */
            streetAddress?: WixEvents.StreetAddressInfo;
            /**
             * Human-readable address string. If not provided, the value is generated from the available address data. If provided, the value is parsed and used to populate other address properties.
             */
            formatted?: string;
            /**
             * Free text providing more detailed address information, such as apartment, suite, or floor.
             */
            addressLine2?: string;
            /**
             * Coordinates of the physical address.
             */
            location?: WixEvents.AddressLocationInfo;
            /**
             * City name.
             */
            city?: string;
            /**
             * Code for a subdivision (such as state, prefecture, or province) in an [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) format.
             */
            subdivision?: string;
            /**
             * 2-letter country code in an [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
             */
            country?: string;
            /**
             * Postal or zip code.
             */
            postalCode?: string;
        };
        /**
         * An object representing coordinates of the physical address of the Wix event.
         */
        type AddressLocation = {
            /**
             * Address's latitude.
             */
            latitude: number;
            /**
             * Address's longitude.
             */
            longitude: number;
        };
        /**
         * An object for updating coordinates of the physical address of the Wix event.
         */
        type AddressLocationInfo = {
            /**
             * Address's latitude.
             */
            latitude?: number;
            /**
             * Address's longitude.
             */
            longitude?: number;
        };
        /**
         * An object representing the links (URLs) that guests can click to add the Wix event to their calendars.
         */
        type CalendarLinks = {
            /**
             * A URL that guests can use to add the Wix event to their Google calendars.
             */
            google: string;
            /**
             * A URL that guests can use to download ICS calendar files in order to add the Wix event to their calendars.
             */
            ics: string;
        };
        /**
         * An object representing messages on the form for purchasing tickets.
         */
        type CheckoutFormMessages = {
            /**
             * Title for the form for purchasing tickets.
             */
            title: string;
            /**
             * Button label text that directs guests to check out the form when purchasing tickets.
             */
            checkoutLabel: string;
        };
        /**
         * An object representing the ID of a Wix event that was deleted.
         */
        type DeletedWixEvent = {
            /**
             * Deleted event ID.
             */
            _id: string;
        };
        /**
         * An object representing the corresponding registration form for the Wix event.
         */
        type Form = {
            /**
             * A block of fields to group together on the form. For example, you might create a block for first name and last name. These blocks are also called input groups.
             */
            InputGroups: WixEvents.InputGroup[];
            /**
             * Messages you can customize for the form.
             */
            messages: WixEvents.FormMessages;
        };
        /**
         * An object representing a set of configured form messages.
         */
        type FormMessages = {
            /**
             * RSVP form messages.
             */
            rsvp: WixEvents.RsvpFormMessages;
            /**
             * Checkout form messages.
             */
            checkout: WixEvents.CheckoutFormMessages;
            /**
             * Messages to display when event registration is closed.
             */
            registrationClosed: WixEvents.RegistrationClosedMessages;
        };
        /**
         * An object representing the guest list settings for the Wix event.
         */
        type GuestListSettings = {
            /**
             * Whether guests can see other guests attending the Wix event. Defaults to `true`.
             */
            public: boolean;
        };
        /**
         * An object for updating guest list settings for the Wix event.
         */
        type GuestListSettingsInfo = {
            /**
             * Whether guests can see other guests attending the Wix event. Defaults to `true`.
             */
            public?: boolean;
        };
        /**
         * An object representing a field on a form. The field may or may not be included in an `InputGroup` block. Text-type fields can contain one or more values.
         */
        type InputField = {
            /**
             * Field name.
             */
            name: string;
            /**
             * Main field label.
             */
            label: string;
            /**
             * Additional labels for multi-valued fields, such as `ADDRESS` fields.
             */
            additionalLabels: WixEvents.AdditionalLabel[];
            /**
             * Pre-defined text choices for fields, such as the options listed in a dropdown.
             */
            options: string[];
            /**
             * Whether the field is mandatory.
             */
            required: boolean;
            /**
             * Maximum number of characters allowed for the `TEXT` fields.
             */
            maxLength: number;
            /**
             * Type of the field. The type determines the format of the field.
             *  This property is used to validate the values entered on the form when submitting. Defaults to `"TEXT"`.
             * One of:
             *  + `"TEXT"`
             *  + `"NUMBER"`
             *  + `"TEXT_ARRAY"`
             *  + `"DATE_TIME"`
             *  + `"ADDRESS"`
             */
            type: string;
            /**
             * The maximum number of values allowed for `TEXT_ARRAY` fields.
             */
            maxSize: number;
        };
        /**
         * An object representing a block of fields that tend to be grouped together on a form. The block of fields is also called an input group.
         */
        type InputGroup = {
            /**
             * The type of the block of fields. Every field in the block must be of the same type.
             * One of:
             *  + `"INPUT"`
             *  + `"TEXTAREA"`
             *  + `"DROPDOWN"`
             *  + `"RADIO"`
             *  + `"CHECKBOX"`
             *  + `"NAME"`
             *  + `"GUEST_CONTROL"`. This control corresponds to the `Additional Guests` option when customizing the registration form in the Dashboard. The fields for this block include specifying how many guests, adding text for a comment, and whether the guest name is required.
             *  + `"ADDRESS_SHORT"`. This control corresponds to the `Single Line` address option when customizing the registration form in the Dashboard, and the `Address.Location.Address.formatted` property in this API.
             *  + `"ADDRESS_FULL"`. This control corresponds to the `Full Address` address option when customizing the registration form in the Dashboard, and the set of individual address properties (excluding `Address.Location.Address.formatted`) in this API.
             *  + `"DATE"`
             */
            type: string;
            /**
             * Whether the fields in the input group are mandatory (such as name and email). When `true`, you can change only the label for the fields in the block.
             */
            system: boolean;
            /**
             * Fields in the block. Also called child input fields.
             */
            inputs: WixEvents.InputField[];
            /**
             * Fields in the input group are sorted by this value in ascending order.
             */
            orderIndex: number;
            /**
             * Unique ID for the input group.
             */
            _id: string;
        };
        /**
         * An object representing a Wix event location.
         */
        type Location = {
            /**
             * Location name. `name` is required for TBD events (events whose time is yet "to be determined").
             */
            name: string;
            /**
             * Street address for the Wix event.
             *
             *  The `address` property contains the full [address](https://www.wix.com/velo/reference/$w/addressinput/value) of the Wix event. The address is derived from the [`formatted`](#formatted) property.
             *
             *  The `address` is required for non-TBD events. (TBD events are events whose time is yet "to be determined.")
             */
            address: WixEvents.Address;
            /**
             * Location type. Defaults to `"VENUE"`.
             * One of:
             *  + `"VENUE"`. The event is being held at a physical location.
             *  + `"ONLINE"`. The event is being held at a virtual online location, such as with online conferencing.
             */
            type: string;
        };
        /**
         * An object for updating a Wix event's location.
         */
        type LocationInfo = {
            /**
             * Location name. `name` is required for TBD events (events whose time is yet "to be determined").
             */
            name?: string;
            /**
             * Full [address](https://www.wix.com/velo/reference/$w/addressinput/value).
             *  The `address` is required for non-TBD events. (TBD events are events whose time is yet "to be determined.")
             *  You can specify the `address` for non-TBD events in the following ways:
             *  + By entering the `address.formatted` property, which the API then uses to populate the other address properties.
             *  + By entering the individual `address` properties including the `address.addressLine1` property and, if needed, the `address.addressLine2`property. (Do not specify `address.streetAddress`.) The API uses this data to populate the `address.formatted` property.
             *  + By entering the individual `address` properties including `address.streetAddress`. (Do not specify `address.addressLine1`.) The API uses this data to populate the `address.formatted` property.
             */
            address?: WixEvents.AddressInfo;
            /**
             * Location type. Defaults to `"VENUE"`.
             * One of:
             *  + `"VENUE"`. The event is being held at a physical location.
             *  + `"ONLINE"`. The event is being held at a virtual online location, such as with online conferencing.
             */
            type?: string;
        };
        /**
         * An object representing money and its default monetary format.
         */
        type Money = {
            /**
             * Monetary amount represented as a decimal string with a period as the decimal separator (for example, 3.99).
             */
            value: string;
            /**
             * Currency code. Must be a valid [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code (for example, `USD`).
             */
            currency: string;
        };
        /**
         * An object representing online conferencing details for the Wix event.
         */
        type OnlineConferencing = {
            /**
             * Whether online conferencing is enabled. Not supported for Wix events that are TBDs (events whose time is not yet determined).
             *  When enabled, links to join the conference are generated and provided to guests in an email when the guest registers.
             */
            enabled: boolean;
            /**
             * ID of the online conferencing provider.
             */
            providerId: string;
            /**
             * Online conference type.  Defaults to `"MEETING"`.
             * One of:
             *  + `"MEETING"`
             *  + `"WEBINAR"`
             */
            conferenceType: string;
            /**
             * Session details for the Wix event.
             */
            session: WixEvents.Session;
        };
        /**
         * An object for updating online conferencing settings for a Wix event.
         */
        type OnlineConferencingInfo = {
            /**
             * Whether online conferencing is enabled. Not supported for Wix events that are TBDs (events whose time is not yet determined).
             *  When enabled, links to join the conference are generated and provided to guests in an email when the guest registers.
             */
            enabled?: boolean;
            /**
             * ID of the online conferencing provider.
             */
            providerId?: string;
            /**
             * Online conference type. Defaults to `"MEETING"`.
             * One of:
             *  + `"MEETING"`
             *  + `"WEBINAR"`
             */
            conferenceType?: string;
        };
        /**
         * Options to use when performing a query or query count.
         */
        type QueryOptions = {
            /**
             * When `true`, prevents permission checks from running for the operation. Defaults to `false`.
             */
            suppressAuth?: boolean;
        };
        /**
         * An object representing registration details for the Wix event.
         */
        type Registration = {
            /**
             * Registration URL if registration for the Wix event managed externally. Guests go to this URL to register.
             */
            externalRegistrationUrl: string;
            /**
             * Who can register for the Wix event. Defaults to `"MEMBER"`.
             * One of:
             *  + `"MEMBER"`. Only logged-in guests can register.
             *  + `"VISITOR_OR_MEMBER"`. Everyone can register, whether they are logged-in to the site or not.
             */
            restrictedTo: string;
            /**
             * Initial event type, set when creating the Wix event.
             * One of:
             *  + `"RSVP"`. The event is created as an RSVP-type event.
             *  + `"TICKETS"`. The event is created as a ticketed-type event.
             */
            initialType: string;
            /**
             * Read-only type of the Wix event. After initial event creation, the type can change, for example, if event registration is not necessary (`NO_REGISTRATION`) or if event registration is set to be managed externally (`EXTERNAL`).
             *  + `"RSVP"`. The event was initially created as an RSVP-type event.
             *  + `"TICKETS"`. The event was initially created as a ticketed-type event.
             *  + `"EXTERNAL"`. Registration is managed externally, on a different site. Setting the `externalRegistrationUrl` property updates the `type` to this status.
             *  + `"NO_REGISTRATION"`. There is no need to register for this site.  Setting the `registrationDisabled` property updates the `type` to this status.
             */
            type: string;
            /**
             * Wix event registration status.
             * One of:
             *  + `"CLOSED"`. The event was closed (for example, if the maximum number of attendees was reached) or cancelled. Guests cannot register.
             *  + `"CLOSED_MANUALLY"`. Event registration was closed manually by the event manager. Guests cannot register.
             *  + `"OPEN_RSVP"`. Guests can register for the RSVP-type Wix event.
             *  + `"OPEN_RSVP_WAITLIST"`. Guests can register for the RSVP-type Wix event, but are waitlisted.
             *  + `"OPEN_TICKETS"`. Guests can register for the ticketed-type Wix event.
             *  + `"OPEN_EXTERNAL"`. Guests can register externally for the Wix event--not using Wix Events.
             */
            status: string;
            /**
             * Registration details for an RSVP event.
             */
            rsvp: WixEvents.Rsvp;
            /**
             * Registration details for a ticketed event.
             */
            tickets: WixEvents.Tickets;
        };
        /**
         * An object representing messages to display when Wix event registration is closed.
         */
        type RegistrationClosedMessages = {
            /**
             * Message displayed when event registration is closed.
             */
            message: string;
            /**
             * Button label text that directs guests to take other actions, such as a clicking a link to see other Wix events that they can register for.
             */
            exploreEventsLabel: string;
        };
        /**
         * An object representing RSVP registration settings for a Wix event.
         */
        type Rsvp = {
            /**
             * Whether the Wix event accepts `NO` RSVPs in addition to `YES` RSVPs. Defaults to `"YES_ONLY"`.
             * One of:
             *  + `"YES_ONLY"`
             *  + `"YES_AND_NO"`
             */
            rsvpStatusOptions: string;
            /**
             * Maximum number of guests allowed to register to the Wix event. If a guest adds additional guests to the same RSVP, the additional guests are also included when calculating the `limit`.
             */
            limit: number;
            /**
             * Whether to open a waitlist when the guest `limit` for the Wix event is reached. Waitlisted guests are assigned a `WAITING` status.
             */
            waitlist: boolean;
        };
        /**
         * An object representing RSVP form messages.
         */
        type RsvpFormMessages = {
            /**
             * Button label text displayed next to where the guest RSVPs `YES`.
             */
            rsvpYes: string;
            /**
             * Button label text displayed next to where the guest RSVPs `NO`.
             */
            rsvpNo: string;
            /**
             * Messages to display when the RSVP is `YES`.
             */
            yesMessages: WixEvents.RsvpFormPositive;
            /**
             * Messages to display when the RSVP is `YES`, even if the guest is placed on the waitlist. Wait-listed guests receive the same messages as guests who are not on the waitlist.
             */
            waitingMessages: WixEvents.RsvpFormPositive;
            /**
             * Messages to display when the RSVP is `NO`.
             */
            noMessages: WixEvents.RsvpFormNegative;
            /**
             * Button label text that directs guests to submit the RSVP form.
             */
            submitRsvpLabel: string;
        };
        /**
         * An object representing a messages to display when the RSVP is `NO`.
         */
        type RsvpFormNegative = {
            /**
             * Form title for negative RSVPs.
             */
            title: string;
            /**
             * Confirmation message title.
             */
            confirmationTitle: string;
            /**
             * Button label text that suggests guests share the Wix event link with others who might want to attend.
             */
            shareLabel: string;
        };
        /**
         * An object representing a messages to display when the RSVP is `YES`.
         */
        type RsvpFormPositive = {
            /**
             * Form title for positive RSVPs.
             */
            title: string;
            /**
             * Confirmation message title.
             */
            confirmationTitle: string;
            /**
             * Confirmation message text.
             */
            confirmationMessage: string;
            /**
             * Button label text that suggests guests add the Wix event to their calendar using the link.
             */
            addToCalendarLabel: string;
            /**
             * Button label text that suggests guests share the Wix event link with others who might want to attend.
             */
            shareLabel: string;
        };
        /**
         * An object for updating RSVP registration settings for a Wix event.
         */
        type RsvpInfo = {
            /**
             * Whether the Wix event accepts `NO` rsvps in addition to `YES` rsvps. Defaults to `"YES_ONLY"`.
             * One of:
             *  + `"YES_ONLY"`
             *  + `"YES_AND_NO"`
             */
            rsvpStatusOptions?: string;
            /**
             * Maximum number of guests allowed to register to the Wix event. If a guest adds additional guests to the same RSVP, the additional guests are also included when calculating the `limit`.
             */
            limit?: number;
            /**
             * Whether to open a waitlist when the guest `limit` for the Wix event is reached. Waitlisted guests are assigned a `WAITING` status.
             */
            waitlist?: boolean;
        };
        /**
         * An object representing RSVP summary data for the Wix event.
         */
        type RsvpSummary = {
            /**
             * Total number of RSVPs received.
             */
            totalRsvps: number;
            /**
             * Number of accepted RSVPs.
             */
            yesCount: number;
            /**
             * Number of rejected RSVPs.
             */
            noCount: number;
            /**
             * Number of RSVPs in the waitlist.
             */
            waitlistCount: number;
        };
        /**
         * An object representing scheduling settings for a Wix event.
         */
        type Scheduling = {
            /**
             * Whether the event's time is to be determined later. If `true`, the Wix event's schedule is defined as TBD ("to be determined").
             *  Because the Wix event's start and end dates are not yet defined, a message, set in `tbdMessage`, is displayed instead.
             *  `startDate`, `endDate`, and `timeZoneId` are optional for TBD events.
             */
            tbd: boolean;
            /**
             * A message to display for events whose `tbd` property is `true`.
             */
            tbdMessage: string;
            /**
             * Start date and time for the Wix event. Optional for TBD events.
             */
            startDate: Date;
            /**
             * End date and time for the Wix event.  Optional for TBD events.
             */
            endDate: Date;
            /**
             * ID of the time zone for the Wix event in [tz database](https://en.wikipedia.org/wiki/Tz_database) format, such as `EST`, or `America/Los_Angeles`. Optional for TBD events.
             */
            timeZoneId: string;
            /**
             * Whether the time zone is displayed in the formatted schedule.
             */
            showTimeZone: boolean;
            /**
             * Formatted schedule representation.
             */
            formatted: string;
            /**
             * Formatted start date of the event (empty for TBD events).
             */
            startDateFormatted: string;
            /**
             * Formatted start time of the event (empty for TBD events).
             */
            startTimeFormatted: string;
            /**
             * Whether the end date is hidden in the formatted schedule.
             */
            hideEndDate: boolean;
        };
        /**
         * An object for updating scheduling settings for a Wix event.
         */
        type SchedulingInfo = {
            /**
             * Whether the event's time is to be determined later. If `true`, the Wix event's schedule is defined as TBD ("to be determined").
             *  Because the Wix event's start and end dates are not yet defined, a message, set in `tbdMessage`, is displayed instead.
             *  `startDate`, `endDate`, and `timeZoneId` are optional for TBD events.
             */
            tbd?: boolean;
            /**
             * A message to display for events whose `tbd` property is `true`.
             */
            tbdMessage?: string;
            /**
             * Start date and time for the Wix event. Optional for TBD ("to be determined") events.
             */
            startDate?: Date;
            /**
             * End date and time for the Wix event.  Optional for TBD ("to be determined") events.
             */
            endDate?: Date;
            /**
             * ID of the time zone for the Wix event in [tz database format](https://en.wikipedia.org/wiki/Tz_database), such as `EST`, or `America/Los_Angeles`. Optional for TBD events.
             */
            timeZoneId?: string;
            /**
             * Whether the time zone is displayed in the formatted schedule.
             */
            showTimeZone?: boolean;
            /**
             * Whether the end date is hidden in the formatted schedule.
             */
            hideEndDate?: boolean;
        };
        /**
         * An object representing a Wix event session, including links and passwords.
         */
        type Session = {
            /**
             * Link for the event host to use to start the online conference session.
             */
            hostLink: string;
            /**
             * Link for the guests to use to join the online conference session.
             */
            guestLink: string;
            /**
             * The password required to join the online conference session (when relevant). Requiring a password is dependent on the online conferencing provider. For example, Zoom provides passwords for its meetings while LiveVideo does not.
             */
            password: string;
        };
        /**
         * An object representing the site URL for the Wix event, including its base URL and path.
         */
        type SiteUrl = {
            /**
             * Base URL.
             *  + Premium sites: The domain,for example, `https://domain.com`.
             *  + Free sites: The site URL, for example, `https://mysite.wixsite.com/mysite`.
             *  > **Note**: The above URL examples are for a published site. When previewing your site, you receive the Editor URL.
             */
            baseUrl: string;
            /**
             * The path to Wix event page, for example, `/my-events/weekly-meetup-2` for both Premium and free sites.
             */
            path: string;
        };
        /**
         * An object representing the Wix event's street address, with number and name in separate fields.
         */
        type StreetAddress = {
            /**
             * Street number.
             */
            number: string;
            /**
             * Street name.
             */
            name: string;
        };
        /**
         * An object for updating the Wix event's street address, with number and name in separate fields.
         */
        type StreetAddressInfo = {
            /**
             * Street number.
             */
            number?: string;
            /**
             * Street name.
             */
            name?: string;
        };
        /**
         * An object representing summary data and statistics for Wix event sales, excluding data pertaining to archived orders.
         */
        type Summaries = {
            /**
             * Summary data for RSVP sales.
             */
            rsvp: WixEvents.RsvpSummary;
            /**
             * Summary data for revenue and tickets sold.
             */
            tickets: WixEvents.TicketsSummary;
        };
        /**
         * An object for updating tax settings for the Wix event.
         */
        type TaxSettingInfo = {
            /**
             * When the tax is applied. Defaults to `"INCLUDED"`.
             * One of:
             *  + `"INCLUDED"`. Tax is built-in to the price.
             *  + `"ADDED_AT_CHECKOUT"`. Tax is added when the guest checks out.
             */
            type?: string;
            /**
             * Tax name.
             */
            name?: string;
            /**
             * Tax rate, such as `21.55`.
             */
            rate?: string;
        };
        /**
         * An object representing tax settings for the Wix event.
         */
        type TaxSettings = {
            /**
             * When the tax is applied. Defaults to `"INCLUDED"`.
             * One of:
             *  + `"INCLUDED"`. Tax is built-in to the price.
             *  + `"ADDED_AT_CHECKOUT"`. Tax is added when the guest checks out.
             */
            type: string;
            /**
             * Tax name.
             */
            name: string;
            /**
             * Tax rate, such as `21.55`.
             */
            rate: string;
        };
        /**
         * An object representing tickets settings for the Wix event.
         */
        type Tickets = {
            /**
             * Currency used for event ordering and transactions.
             */
            currency: string;
            /**
             * When ordering, whether each ticket in the order needs its own order form or if one form covers multiple tickets.
             */
            formAssignedPerTicket: boolean;
            /**
             * Tax settings.
             */
            tax: WixEvents.TaxSettings;
            /**
             * Price of the lowest-priced ticket.
             */
            lowestTicketPrice: WixEvents.Money;
            /**
             * Price of the lowest-priced ticket.
             */
            highestTicketPrice: WixEvents.Money;
            /**
             * Formatted price of the lowest-priced ticket.
             */
            lowestTicketPriceFormatted: string;
            /**
             * Formatted price of the highest-priced ticket.
             */
            highestTicketPriceFormatted: string;
        };
        /**
         * An object for updating tickets settings for the Wix event.
         */
        type TicketsInfo = {
            /**
             * When ordering, whether each ticket in the order needs its own order form or if one form covers multiple tickets.
             */
            formAssignedPerTicket?: boolean;
            /**
             * Tax settings.
             */
            tax?: WixEvents.TaxSettingInfo;
        };
        /**
         * An object representing a summary of the Wix event's revenue and tickets sold.
         */
        type TicketsSummary = {
            /**
             * Total number of tickets sold.
             */
            totalTickets: number;
            /**
             * Total revenue, including taxes and excluding fees. Payment provider fees are not deducted.
             */
            revenue: WixEvents.Money;
            /**
             * Whether currency cannot be changed. The currency is locked after the first order for the event has been created and is set to the currency of that first order.
             */
            currencyLocked: boolean;
            /**
             * Total number of orders placed for the Wix event.
             */
            totalOrders: number;
            /**
             * Total sales balance for confirmed transactions.
             */
            totalSales: WixEvents.Money;
        };
        /**
         * An object representing a Wix event.
         */
        type WixEvent = {
            /**
             * Wix event ID.
             */
            _id: string;
            /**
             * Wix event location details.
             */
            location: WixEvents.Location;
            /**
             * Wix event scheduling details.
             */
            scheduling: WixEvents.Scheduling;
            /**
             * Wix event title.
             */
            title: string;
            /**
             * Wix event description.
             */
            description: string;
            /**
             * Rich-text (HTML) content for the "About Event" section.
             */
            about: string;
            /**
             * The location of an image that represents the Wix event. This image is printed on the ticket (PDF format). The image file must be an image file from the Media Manager.
             *
             *  The URL format is:
             *  `wix:image://v1//#originWidth=&originHeight=[&watermark=]`
             */
            mainImage: string;
            /**
             * URL-friendly version of the Wix event title. Unique across all Wix events in the same site.
             */
            slug: string;
            /**
             * [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code of the Wix event. Use to translate content on forms, and so on.
             */
            language: string;
            /**
             * Date the Wix event was created.
             */
            _createdDate: Date;
            /**
             * Date the Wix event was updated.
             */
            _updatedDate: Date;
            /**
             * Wix event status. Defaults to `"SCHEDULED"`.
             * One of:
             *  + `"SCHEDULED"`. The upcoming Wix event is scheduled but has not yet started.
             *  + `"STARTED"`. The Wix event has started and is in progress.
             *  + `"ENDED"`. The Wix event has ended.
             *  + `"CANCELED"`. The Wix event has been canceled.
             */
            status: string;
            /**
             * Registration details for the Wix event.
             */
            registration: WixEvents.Registration;
            /**
             * "Add to calendar" URLs.
             */
            calendarLinks: WixEvents.CalendarLinks;
            /**
             * Event page URL components.
             */
            eventUrl: WixEvents.SiteUrl;
            /**
             * Registration form for the site guest to fill out with their contact details, and other information, as relevant.
             */
            form: WixEvents.Form;
            /**
             * Summaries of Wix event sales.
             */
            summary: WixEvents.Summaries;
            /**
             * Guest list settings for the Wix event.
             */
            guestList: WixEvents.GuestListSettings;
            /**
             * ID of the creator of the Wix event. If the creator is not logged in when creating the event, the `createdBy` property is empty.
             */
            createdBy: string;
            /**
             * Online conferencing details for the Wix event.
             */
            videoConferencing: WixEvents.OnlineConferencing;
            /**
             * The "Filter by:" drop-down option for filtering contacts by this event
             *  in the Dashboard's [Contact List page](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F8f93447d-7521-4aa1-8c64-4d5a4f025d3f%2Fcontacts%2F%3FreferralInfo%3Dsidebar).
             *  This read-only property is automatically populated to comprise a "custom" prefix, the title of the event, and other suffixes added for uniqueness. Note that even if
             *  the title of an event is updated, the `assignedContactsLabel` does not change.
             */
            assignedContactsLabel: string;
        };
        /**
         * An object for creating a Wix event.
         */
        type WixEventInfo = {
            /**
             * Wix event title.
             */
            title?: string;
            /**
             * Wix event description.
             */
            description?: string;
            /**
             * The location of an image that represents the Wix event. This image is printed on the ticket (PDF format). The image file must be an image file from the Media Manager.
             *
             *  The URL format is:
             *  `wix:image://v1//#originWidth=&originHeight=[&watermark=]`
             */
            mainImage?: string;
            /**
             * Wix event registration settings.
             */
            registration?: WixEvents.WixEventRegistrationInfo;
            /**
             * Wix event guest list settings.
             */
            guestList?: WixEvents.GuestListSettingsInfo;
            /**
             * Rich-text (HTML) content for the "About Event" section.
             */
            about?: string;
            /**
             * Wix event online conferencing settings.
             */
            videoConferencing?: WixEvents.OnlineConferencingInfo;
            /**
             * Wix event location settings.
             *  `location.address` is required for non-TBD events.
             *  `location.name` is required for TBD events.
             *  (TBD events are events whose times are yet "to be determined.")
             */
            location: WixEvents.LocationInfo;
            /**
             * Wix event scheduling settings.
             */
            scheduling: WixEvents.SchedulingInfo;
        };
        /**
         * An object for updating registration options for a Wix event.
         */
        type WixEventInfoOptions = {
            /**
             * Content language code in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format.
             *  Used for translating tickets' PDF labels, registration forms, automatic emails, and so on.
             *  Supported languages: `ar`, `bg`, `cs`, `da`, `de`, `el`, `en`, `es`, `fi`, `fr`, `he`, `hi`, `hu`, `id`, `it`, `ja`, `ko`, `ms`, `nl`, `no`, `pl`, `pt`, `ro`, `ru`, `sv`, `th`, `tl`, `tr`, `uk`, `zh`.
             *  Defaults to `en`.
             */
            language?: string;
        };
        /**
         * An object for updating registration settings for the Wix event.
         */
        type WixEventRegistrationInfo = {
            /**
             * Registration URL, if registration for the Wix event is managed externally. Guests go to this URL to register. Setting this property changes the read-only `registration.type` property to `EXTERNAL`.
             */
            externalRegistrationUrl?: string;
            /**
             * Whether to temporarily suspend (pause) registration. For example, you might want to pause registration temporarily if you need to change venues to allow for more attendees.
             */
            registrationPaused?: boolean;
            /**
             * Who can register to the Wix event. Defaults to `"MEMBER"`.
             * One of:
             *  + `"MEMBER"`. Only logged-in guests can register.
             *  + `"VISITOR_OR_MEMBER"`. Everyone can register, whether they are logged-in to the site or not.
             */
            restrictedTo?: string;
            /**
             * Whether to disable registration. For example, you might want to disable registration if you will not have enough supplies on-hand for more attendees. Setting to `true` changes the read-only `registration.type` property to `NO_REGISTRATION`.
             */
            registrationDisabled?: boolean;
            /**
             * Registration settings for the RSVP Wix event.
             */
            rsvp?: WixEvents.RsvpInfo;
            /**
             * Event type. Only RSVP and TICKETS are allowed when creating an event (`initialType`), however after initial event
             * creation the `type` can be changed to other values.
             * One of:
             *  + `"RSVP"`. The Wix event is an RSVP event. It cannot be changed to a ticketed event.
             *  + `"TICKETS"`. The Wix event is a ticketed event. It cannot be changed to an RSVP event.
             *  + `"EXTERNAL"`. If you created a guest list before setting up external registration, the current guest list remains but is likely to be
             *    incomplete. So when sending out messages to the Wix-managed guest list, not all
             *    guests will receive them. Messages should be sent from the external registration system
             *    to the complete guest list.
             *    You can change the value back at any point if you no longer want the event to be managed externally.
             *  + `"NO_REGISTRATION"`. No registration is necessary for the event.
             */
            type?: string;
            /**
             * Registration settings for the ticketed Wix event.
             */
            tickets?: WixEvents.TicketsInfo;
        };
        /**
         * An object for updating a Wix event.
         */
        type WixEventUpdateInfo = {
            /**
             * Wix event title.
             */
            title?: string;
            /**
             * Wix event description.
             */
            description?: string;
            /**
             * Wix event location settings.
             *  Address is required for non-TBD events.
             *  Location name is required for TBD events.
             *  (TBD events are events whose times are yet "to be determined.")
             */
            location?: WixEvents.LocationInfo;
            /**
             * Wix event scheduling settings.
             */
            scheduling?: WixEvents.SchedulingInfo;
            /**
             * The location of an image that represents the Wix event. This image is printed on the ticket (PDF format). The image file must be an image file from the Media Manager.
             *
             *  The URL format is:
             *  `wix:image://v1//#originWidth=&originHeight=[&watermark=]`
             */
            mainImage?: string;
            /**
             * Wix event registration settings.
             */
            registration?: WixEvents.WixEventRegistrationInfo;
            /**
             * Wix event guest list settings.
             */
            guestList?: WixEvents.GuestListSettingsInfo;
            /**
             * Rich-text (HTML) content for the "About Event" section.
             */
            about?: string;
            /**
             * Wix event online conferencing settings.
             */
            videoConferencing?: WixEvents.OnlineConferencingInfo;
        };
        /**
         * Contains functionality for refining a Wix events query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryBuilder.html#)
         */
        interface EventsQueryBuilder {
            /**
             * Adds an `and` condition to the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryBuilder.html#and)
             */
            and(query: WixEvents.EventsQueryBuilder): WixEvents.EventsQueryBuilder;
            /**
             * Adds a sort to a query, sorting by the specified properties in ascending order.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryBuilder.html#ascending)
             */
            ascending(...propertyName: string[]): WixEvents.EventsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value contains a specified string.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryBuilder.html#contains)
             */
            contains(propertyName: string, value: string): WixEvents.EventsQueryBuilder;
            /**
             * Adds a sort to a query, sorting by the specified properties in descending order.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryBuilder.html#descending)
             */
            descending(...propertyName: string[]): WixEvents.EventsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value equals the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryBuilder.html#eq)
             */
            eq(propertyName: string, value: any): WixEvents.EventsQueryBuilder;
            /**
             * Returns the items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryBuilder.html#find)
             */
            find(options?: WixEvents.QueryOptions): Promise<WixEvents.EventsQueryResult>;
            /**
             * Refines a query to match items whose specified property value is greater than or equal to the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryBuilder.html#ge)
             */
            ge(propertyName: string, value: string | number | Date): WixEvents.EventsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value is greater than the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryBuilder.html#gt)
             */
            gt(propertyName: string, value: string | number | Date): WixEvents.EventsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value contains any of the specified values.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryBuilder.html#hasSome)
             */
            hasSome(propertyName: string, values: string[]): WixEvents.EventsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value is less than or equal to the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryBuilder.html#le)
             */
            le(propertyName: string, value: string | number | Date): WixEvents.EventsQueryBuilder;
            /**
             * Limits the number of items the query returns.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryBuilder.html#limit)
             */
            limit(limit: string): WixEvents.EventsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value is less than the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryBuilder.html#lt)
             */
            lt(propertyName: string, value: string | number | Date): WixEvents.EventsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value does not equal the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryBuilder.html#ne)
             */
            ne(propertyName: string, value: any): WixEvents.EventsQueryBuilder;
            /**
             * Adds an `not` condition to the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryBuilder.html#not)
             */
            not(query: WixEvents.EventsQueryBuilder): WixEvents.EventsQueryBuilder;
            /**
             * Adds an `or` condition to the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryBuilder.html#or)
             */
            or(query: WixEvents.EventsQueryBuilder): WixEvents.EventsQueryBuilder;
            /**
             * Sets the number of items to skip before returning query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryBuilder.html#skip)
             */
            skip(skip: string): WixEvents.EventsQueryBuilder;
        }
        /**
         * The results of a Wix events query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryResult.html#)
         */
        interface EventsQueryResult {
            /**
             * Returns the index of the current results page number.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryResult.html#currentPage)
             */
            readonly currentPage: number;
            /**
             * Returns the items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryResult.html#items)
             */
            readonly items: WixEvents.WixEvent[];
            /**
             * Returns the number of items in the current results page.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryResult.html#length)
             */
            readonly length: number;
            /**
             * Returns the query page size.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryResult.html#pageSize)
             */
            readonly pageSize: number;
            /**
             * Contains functionality for refining a Wix events query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryResult.html#query)
             */
            readonly query: WixEvents.EventsQueryBuilder;
            /**
             * Returns the total number of items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryResult.html#totalCount)
             */
            readonly totalCount: number;
            /**
             * Returns the total number of pages the query produced.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryResult.html#totalPages)
             */
            readonly totalPages: number;
            /**
             * Indicates if the query has more results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryResult.html#hasNext)
             */
            hasNext(): boolean;
            /**
             * Indicates if the query has previous results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryResult.html#hasPrev)
             */
            hasPrev(): boolean;
            /**
             * Retrieves the next page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryResult.html#next)
             */
            next(): Promise<WixEvents.EventsQueryResult>;
            /**
             * Retrieves the previous page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryResult.html#prev)
             */
            prev(): Promise<WixEvents.EventsQueryResult>;
        }
        /**
         * Contains functionality for refining a Wix events query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryBuilder.html#)
         */
        namespace EventsQueryBuilder {
        }
        /**
         * The results of a Wix events query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events-backend.WixEvents.EventsQueryResult.html#)
         */
        namespace EventsQueryResult {
        }
    }
}

// /types/common/wix-events.d.ts
/**
 * The wix-events module contains functionality for working with
 *  Wix Events from client-side code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-events.html#)
 */
declare module 'wix-events' {
    /**
     * Gets an object containing RSVP functionality.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-events.html#rsvp)
     */
    const rsvp: Rsvp;
    /**
     * Gets an object containing ticketing functionality.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-events.html#tickets)
     */
    const tickets: Tickets;
    /**
     * **Deprecated:** Creates a new RSVP form for the specified event.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-events.html#createEventRsvpForm)
     */
    function createEventRsvpForm(eventId: string): RsvpForm;
    /**
     * Gets a new registration form for the specified event.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-events.html#getForm)
     */
    function getForm(eventId: string): Promise<Form>;
    /**
     * A registration form for an event.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-events.Form.html#)
     */
    interface Form {
        /**
         * Gets information about the event's registration form and status.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events.Form.html#formData)
         */
        readonly formData: Form.FormData;
        /**
         * Validates form fields and values against the registration form as defined in the site Dashboard.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events.Form.html#validate)
         */
        validate(formValues: Form.FormValue[]): Promise<Form.ValidationResult>;
        /**
         * Validates an input form field value against the registration form as defined in the site Dashboard.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events.Form.html#validateInput)
         */
        validateInput(inputName: string, formValues: Form.FormValue[]): Form.ValidationResult;
    }
    /**
     * An object containing RSVP functionality.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-events.Rsvp.html#)
     */
    interface Rsvp {
        /**
         * Creates an RSVP and adds the new guests to an event's guest list.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events.Rsvp.html#createRsvp)
         */
        createRsvp(eventId: string, formValues: Rsvp.FormValue[]): Promise<Rsvp.RsvpResponse>;
    }
    /**
     * **Deprecated:** A form for creating an RSVP to an event.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-events.RsvpForm.html#)
     */
    interface RsvpForm {
        /**
         * **Deprecated:** Gets information about the event's RSVP form and status.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events.RsvpForm.html#getRsvpData)
         */
        getRsvpData(): Promise<RsvpForm.RsvpData>;
        /**
         * **Deprecated:** Submits an RSVP form and adds the new guests to the event's guest list.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events.RsvpForm.html#submit)
         */
        submit(formValues: RsvpForm.FormValue[]): Promise<RsvpForm.RsvpResponse>;
        /**
         * **Deprecated:** Validates form fields and values against the registration form as defined in the site Dashboard.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events.RsvpForm.html#validate)
         */
        validate(formValues: RsvpForm.FormValue[]): Promise<RsvpForm.ValidationResult>;
        /**
         * **Deprecated:** Validates an input form field value against the registration form as defined in the site Dashboard.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events.RsvpForm.html#validateInput)
         */
        validateInput(inputName: string, formValues: RsvpForm.FormValue[]): Promise<RsvpForm.ValidationResult>;
    }
    /**
     * An object containing ticketing functionality.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-events.Tickets.html#)
     */
    interface Tickets {
        /**
         * Performs a checkout on reserved tickets.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events.Tickets.html#checkout)
         */
        checkout(eventId: string, reservationId: string, checkoutInfo: Tickets.CheckoutInfo): Promise<Tickets.CheckoutResponse>;
        /**
         * Reserves tickets for an event.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events.Tickets.html#reserve)
         */
        reserve(eventId: string, tickets: Tickets.TicketSelection[]): Promise<Tickets.ReservationResponse>;
        /**
         * Updates a ticket order.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events.Tickets.html#updateOrder)
         */
        updateOrder(eventId: string, orderNumber: string, updateInfo: Tickets.UpdateInfo): Promise<Tickets.UpdateOrderResponse>;
        /**
         * Verifies a ticket coupon.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-events.Tickets.html#verifyCoupon)
         */
        verifyCoupon(eventId: string, reservationId: string, coupon: string): Promise<Tickets.VerifyCouponResponse>;
    }
    /**
     * A registration form for an event.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-events.Form.html#)
     */
    namespace Form {
        /**
         * An object containing information about a label for a complex input field type.
         */
        type AdditionalLabel = {
            /**
             * Additional label name.
             */
            name: string;
            /**
             * Additional label value.
             */
            label: string;
        };
        /**
         * An object representing an error that occurred during validation of a registration form's fields.
         */
        type FieldValidationError = {
            /**
             * Error message.
             */
            message: string;
            /**
             * List of fields that caused the error when the form does not pass validation.
             */
            fields: string[];
        };
        /**
         * An object representing the details needed to create a registration form for an event.
         */
        type FormData = {
            /**
             * Information about the input fields needed to create a registration form.
             */
            formInputs: Form.InputItem[];
            /**
             * Allowed RSVP statuses for an event.
             *  One of:
             *
             *  + `"YES_AND_NO"`: Guests can RSVP for the event with a "Yes" or "No".
             *  + `"YES_ONLY"`: Guests can only RSVP for the event with a "Yes".
             *  + `"WAITING"`: The guest limit has been reached, but there is an open waitlist.
             */
            rsvpStatusOptions: string;
            /**
             * Event registration status.
             *  One of:
             *
             *  + `"OPEN_RSVP"`: Registration is open and guest limit has not been reached.
             *  + `"OPEN_RSVP_WAITLIST"`: Registration is open, guest limit has been reached,
             *    and additional registering guests are added to the waitlist.
             *  + `"OPEN_TICKETS"`: Registration is open for a ticketed event and there are still
             *    tickets available.
             *  + `"OPEN_EXTERNAL"`: Registration is open for an event that uses external registration,
             *     not RSVP or ticketed.
             *  + `"CLOSED"`: Registration is closed because the guest limit has been reached.
             *  + `"CLOSED_MANUALLY"`: Registration was closed manually.
             */
            registrationStatus: string;
            /**
             * Whether the event is a ticketed event.
             */
            isTicketed: boolean;
        };
        /**
         * An object containing information about a form value.
         */
        type FormValue = {
            /**
             * Form field name.
             */
            name: string;
            /**
             * Form field value.
             */
            value: string;
        };
        /**
         * An object containing information about an input field in a registration form.
         */
        type InputItem = {
            /**
             * Unique input identifier.
             */
            _id: string;
            /**
             * Whether the input field's value is an array.
             */
            array: boolean;
            /**
             * Input field display label.
             */
            label: string;
            /**
             * Addition field display labels for complex fields.
             */
            additionalLabels: Form.AdditionalLabel[];
            /**
             * List of value options where applicable.
             */
            options: string[];
            /**
             * Maximum length of the input field's value. A value of `0` indicates no maximum length.
             */
            maxLength: number;
            /**
             * Input field name.
             */
            name: string;
            /**
             * Whether the input field is required.
             */
            required: boolean;
            /**
             * The type of the input field.
             *  One of:
             *
             *  + `"NAME"`
             *  + `"INPUT"`
             *  + `"RADIO"`
             *  + `"CHECKBOX"`
             *  + `"DROPDOWN"`
             *  + `"GUEST_CONTROL"`
             *  + `"ADDRESS_FULL"`
             *  + `"TEXTAREA"`
             *  + `"DATE"`
             */
            controlType: string;
        };
        /**
         * An object representing the result of a validation.
         */
        type ValidationResult = {
            /**
             * Indicates that the registration form field(s) are valid.
             */
            valid: boolean;
        };
        /**
         * An object representing an error that occurred during validation of an RSVP form's values.
         */
        type ValueValidationError = {
            /**
             * Error message.
             */
            message: string;
            /**
             * ID of the input field that failed validation.
             */
            inputId: string;
            /**
             * Error type.
             *  One of:
             *
             *  + `"EMPTY_INPUT"`: A required field is missing its value.
             *  + `"INVALID_INPUT_VALUE"`: The value is not valid for the field type.
             *  + `"INPUT_TOO_LONG"`: The value is too long.
             *  + `"INVALID_OPTION"`: The value does not match one of the defined options for the field.
             *  + `"INVALID_STATUS"`: The status value is not valid.
             *  + `"INVALID_NUMBER_OF_GUESTS"`: The number of guests does not match the number defined for the form.
             */
            errorType: string;
        };
    }
    /**
     * An object containing RSVP functionality.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-events.Rsvp.html#)
     */
    namespace Rsvp {
        /**
         * An object representing an error that occurred during an RSVP creation.
         */
        type CreationError = {
            /**
             * Error message.
             */
            message: string;
            /**
             * Error type.
             *  One of:
             *
             *  + `"RSVP_CLOSED"`: Event registration is closed.
             *  + `"GUEST_LIMIT_REACHED"`: The maximum number of guests has already been reached.
             *  + `"MEMBER_ALREADY_REGISTERED"`: The current registrant is already registered as a guest.
             *  + `"WAITING_LIST_UNAVAILABLE"`: The maximum number of guests has already been reached and
             *    there is no waitlist.
             *  + `"UNKNOWN_ERROR"`: Unknown error.
             */
            errorType: string;
        };
        /**
         * An object containing information about form values.
         */
        type FormValue = {
            /**
             * Form field name.
             */
            name: string;
            /**
             * Form field value.
             */
            value: string;
        };
        /**
         * An object representing a guest on an event RSVP.
         */
        type Guest = {
            /**
             * Index of the guest in the RSVP guest list. Indices are zero-based.
             */
            index: number;
            /**
             * Guest ID, which is unique within the RSVP.
             */
            id: number;
            /**
             * Full name of the guest.
             */
            fullName: string;
        };
        /**
         * An object representing an RSVP input value.
         */
        type InputValue = {
            /**
             * Name of the input.
             */
            inputName: string;
            /**
             * Value of the input, when there is just one value.
             */
            value: string;
            /**
             * Value of the input, when there are multiple values.
             */
            values: string[];
        };
        /**
         * An object representing an RSVP form.
         */
        type RsvpForm = {
            /**
             * Values that were entered in the RSVP form.
             */
            inputValues: Rsvp.InputValue[];
        };
        /**
         * An object representing a response to creating an RSVP.
         */
        type RsvpResponse = {
            /**
             * RSVP ID
             */
            id: string;
            /**
             * Whether the guest's personal information has been removed.
             */
            anonymized: boolean;
            /**
             * Contact ID of the guest who created the RSVP.
             */
            contactId: string;
            /**
             * Date when the RSVP was created.
             */
            createdDate: Date;
            /**
             * Email address to the guest who created the RSVP.
             */
            email: string;
            /**
             * ID of the event the RSVP is for.
             */
            eventId: string;
            /**
             * First name of the guest who created the RSVP.
             */
            firstName: string;
            /**
             * Last name of the guest who created the RSVP.
             */
            lastName: string;
            /**
             * All of the guests included in the RSVP.
             */
            guests: RsvpForm.Guest[];
            /**
             * A representation of the RSVP form that was created.
             */
            rsvpForm: RsvpForm.RsvpForm;
            /**
             * Member ID of the guest who created the RSVP form if the guest is a site member.
             */
            memberId: string;
            /**
             * Date when RSVP was last modified.
             */
            updatedDate: Date;
            /**
             * RSVP status.
             */
            status: string;
            /**
             * Total number of guests included in the RSVP.
             */
            totalGuests: number;
        };
    }
    /**
     * **Deprecated:** A form for creating an RSVP to an event.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-events.RsvpForm.html#)
     */
    namespace RsvpForm {
        /**
         * **Deprecated:** An object containing information about a label for a complex input field type.
         */
        type AdditionalLabel = {
            /**
             * Additional label name.
             */
            name: string;
            /**
             * Additional label value.
             */
            label: string;
        };
        /**
         * **Deprecated:** An object representing an error that occurred during validation of an RSVP form's fields.
         */
        type FieldValidationError = {
            /**
             * Error message.
             */
            message: string;
            /**
             * List of fields that caused the error when the form does not pass validation.
             */
            fields: string[];
        };
        /**
         * **Deprecated:** An object containing information about form value to submit.
         */
        type FormValue = {
            /**
             * Form field name.
             */
            name: string;
            /**
             * Form field value.
             */
            value: string;
        };
        /**
         * **Deprecated:** An object representing a guest on an event RSVP.
         */
        type Guest = {
            /**
             * Index of the guest in the RSVP guest list. Indices are zero-based.
             */
            index: number;
            /**
             * Guest ID, which is unique within the RSVP.
             */
            id: number;
            /**
             * Full name of the guest.
             */
            fullName: string;
        };
        /**
         * **Deprecated:** An object representing a submitted RSVP form input value.
         */
        type InputValue = {
            /**
             * Name of the form input.
             */
            inputName: string;
            /**
             * Value of the form input, when there is just one value.
             */
            value: string;
            /**
             * Value of the form input, when there are multiple values.
             */
            values: string[];
        };
        /**
         * **Deprecated:** An object representing the details needed to create an RSVP form for an event.
         */
        type RsvpData = {
            /**
             * Information about the input fields needed to create an RSVP form.
             */
            rsvpFormInputs: RsvpForm.RsvpInputItem[];
            /**
             * Allowed RSVP statuses for an event.
             *  One of:
             *
             *  + `"YES_AND_NO"`: Guests can RSVP for the event with a "Yes" or "No".
             *  + `"YES_ONLY"`: Guests can only RSVP for the event with a "Yes".
             *  + `"WAITING"`: The guest limit has been reached, but there is an open waitlist.
             */
            rsvpStatusOptions: string;
            /**
             * Event registration status.
             *  One of:
             *
             *  + `"OPEN_RSVP"`: Registration is open and guest limit has not been reached.
             *  + `"OPEN_RSVP_WAITLIST"`: Registration is open, guest limit has been reached,
             *    and additional registering guests are added to the waitlist.
             *  + `"CLOSED"`: Registration is closed because the guest limit has been reached.
             *  + `"CLOSED_MANUALLY"`: Registration was closed manually.
             */
            registrationStatus: string;
        };
        /**
         * **Deprecated:** An object representing a submitted RSVP form.
         */
        type RsvpForm = {
            /**
             * Values that were entered in the RSVP form.
             */
            inputValues: RsvpForm.InputValue[];
        };
        /**
         * **Deprecated:** An object containing information about an input field in an RSVP form.
         */
        type RsvpInputItem = {
            /**
             * Unique input identifier.
             */
            _id: string;
            /**
             * Whether the input field's value is an array.
             */
            array: boolean;
            /**
             * Input field display label.
             */
            label: string;
            /**
             * Addition field display labels for complex fields.
             */
            additionalLabels: RsvpForm.AdditionalLabel[];
            /**
             * List of value options where applicable.
             */
            options: string[];
            /**
             * Maximum length of the input field's value. A value of `0` indicates no maximum length.
             */
            maxLength: number;
            /**
             * Input field name.
             */
            name: string;
            /**
             * Whether the input field is required.
             */
            required: boolean;
            /**
             * The type of the input field.
             *  One of:
             *
             *  + `"NAME"`
             *  + `"INPUT"`
             *  + `"RADIO"`
             *  + `"CHECKBOX"`
             *  + `"DROPDOWN"`
             *  + `"GUEST_CONTROL"`
             *  + `"ADDRESS_FULL"`
             *  + `"TEXTAREA"`
             *  + `"DATE"`
             */
            controlType: string;
        };
        /**
         * **Deprecated:** An object representing a response to submitting an RSVP.
         */
        type RsvpResponse = {
            /**
             * RSVP ID
             */
            id: string;
            /**
             * Indicates whether the guest's personal information has been deleted or not.
             */
            anonymized: boolean;
            /**
             * Contact ID of the guest who submitted the RSVP form.
             */
            contactId: string;
            /**
             * Date when the RSVP was submitted.
             */
            createdDate: Date;
            /**
             * Email address to the guest who submitted the RSVP form.
             */
            email: string;
            /**
             * ID of the event the RSVP is for.
             */
            eventId: string;
            /**
             * First name of the guest who submitted the RSVP form.
             */
            firstName: string;
            /**
             * Last name of the guest who submitted the RSVP form.
             */
            lastName: string;
            /**
             * All of the guests included in the RSVP.
             */
            guests: RsvpForm.Guest[];
            /**
             * A representation of the RSVP form that was submitted.
             */
            rsvpForm: RsvpForm.RsvpForm;
            /**
             * Member ID of the guest who submitted the RSVP form if the guest is a site member.
             */
            memberId: string;
            /**
             * Date when RSVP was last modified.
             */
            updatedDate: Date;
            /**
             * RSVP status.
             */
            status: string;
            /**
             * Total number of guests included in the RSVP.
             */
            totalGuests: number;
        };
        /**
         * **Deprecated:** An object representing an error that occurred during an RSVP form submission.
         */
        type SubmissionError = {
            /**
             * Error message.
             */
            message: string;
            /**
             * Error type.
             *  One of:
             *
             *  + `"RSVP_CLOSED"`: Event registration is closed.
             *  + `"GUEST_LIMIT_REACHED"`: The maximum number of guests has already been reached.
             *  + `"MEMBER_ALREADY_REGISTERED"`: The current registrant is already registered as a guest.
             *  + `"WAITING_LIST_UNAVAILABLE"`: The maximum number of guests has already been reached and
             *    there is no waitlist.
             *  + `"UNKNOWN_ERROR"`: Unknown error.
             */
            errorType: string;
        };
        /**
         * **Deprecated:** An object representing the result of a form validation.
         */
        type ValidationResult = {
            /**
             * Indicates that the RSVP form fields are valid.
             */
            valid: boolean;
        };
        /**
         * **Deprecated:** An object representing an error that occurred during validation of an RSVP form's values.
         */
        type ValueValidationError = {
            /**
             * Error message.
             */
            message: string;
            /**
             * ID of the input field that failed validation.
             */
            inputId: string;
            /**
             * Error type.
             *  One of:
             *
             *  + `"EMPTY_INPUT"`: A required field is missing its value.
             *  + `"INVALID_INPUT_VALUE"`: The value is not valid for the field type.
             *  + `"INPUT_TOO_LONG"`: The value is too long.
             *  + `"INVALID_OPTION"`: The value does not match one of the defined options for the field.
             *  + `"INVALID_STATUS"`: The status value is not valid.
             *  + `"INVALID_NUMBER_OF_GUESTS"`: The number of guests does not match the number defined for the form.
             */
            errorType: string;
        };
    }
    /**
     * An object containing ticketing functionality.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-events.Tickets.html#)
     */
    namespace Tickets {
        /**
         * An object containing information about a checkout.
         */
        type CheckoutInfo = {
            /**
             * Field names and values for a registration form.
             */
            formValues: Form.FormValue[];
            /**
             * Coupon to be used during checkout.
             */
            coupon?: string;
        };
        /**
         * An object containing information about a checkout performed using the [`checkout()`](#reserve) function.
         */
        type CheckoutResponse = {
            /**
             * Ticket reservations.
             */
            reservations: Tickets.Reservation[];
            /**
             * Ticket order.
             */
            order: Tickets.Order;
            /**
             * Time the reservations expire.
             */
            expirationTime: Date;
        };
        /**
         * An object representing a discount.
         */
        type Discount = {
            /**
             * Discount amount.
             */
            amount: Tickets.Money;
            /**
             * Amount after discount.
             */
            afterDiscount: Tickets.Money;
            /**
             * Discount code.
             */
            code: string;
            /**
             * Discount name.
             */
            name: string;
            /**
             * ID of the coupon used in the discount.
             */
            couponId: string;
        };
        /**
         * An object containing information about a discount error.
         */
        type DiscountError = {
            /**
             * Error code.
             *
             * One of:
             *
             * + `"ERROR_COUPON_DOES_NOT_EXIST"`
             * + `"ERROR_COUPON_IS_DISABLED"`
             * + `"ERROR_COUPON_USAGE_EXCEEDED"`
             * + `"ERROR_COUPON_HAS_EXPIRED"`
             */
            code: string;
        };
        /**
         * An object containing information about discount errors.
         */
        type DiscountErrors = {
            /**
             * Invoice the coupon is used in.
             */
            error: Tickets.DiscountError[];
        };
        /**
         * An object representing a fee.
         */
        type Fee = {
            /**
             * Fee name. Value is `"WIX_FEE"`: Wix service fee applied to the item.
             */
            name: string;
            /**
             * Fee calculation method.
             *  One of:
             *
             *  + `"FEE_ADDED"`: Fee is added to the ticket price at checkout.
             *  + `"FEE_INCLUDED"`: Seller absorbs the fee. It is deducted from the ticket price.
             */
            type: string;
            /**
             * Rate percentage. Possible values are between `"0.01"` and `"100"`, using up to 2 decimal places.
             */
            rate: string;
            /**
             * Total amount of fee charges.
             */
            amount: Tickets.Money;
        };
        /**
         * An object representing a ticket order invoice.
         */
        type Invoice = {
            /**
             * Invoice items.
             */
            items: Tickets.InvoiceItem[];
            /**
             * Invoice total.
             */
            total: Tickets.Money;
            /**
             * Invoice applied discount.
             */
            discount?: Tickets.Discount;
            /**
             * Invoice tax.
             */
            tax?: Tickets.Tax;
            /**
             * Invoice subtotal amount before discount, tax, and fees.
             */
            subTotal: Tickets.Money;
            /**
             * Invoice total amount after discount, tax, and fees.
             *  Grand total is calculated in the following manner:
             *
             *  1. Total price of all items in the cart.
             *  2. Discount is subtracted from the cart (if applicable).
             *  3. Tax is added (if applicable).
             *  4. Wix service fee is added.
             */
            grandTotal: Tickets.Money;
            /**
             * Invoice applied fee charges.
             */
            fees: Tickets.Fee[];
            /**
             * Total revenue with taxes, excluding fees. Payment provider fees are not deducted.
             */
            revenue: Tickets.Money;
        };
        /**
         * An object representing a ticket order invoice item.
         */
        type InvoiceItem = {
            /**
             * Invoice item ID.
             */
            id: string;
            /**
             * Invoice item quantity.
             */
            quantity: number;
            /**
             * Invoice item name.
             */
            name: string;
            /**
             * Invoice item price.
             */
            price: Tickets.Money;
            /**
             * Invoice item total.
             */
            total: Tickets.Money;
            /**
             * Invoice item applied discount.
             */
            discount?: Tickets.Discount;
            /**
             * Invoice item tax.
             */
            tax?: Tickets.Tax;
            /**
             * Invoice item applied fee charges.
             */
            fees: Tickets.Fee[];
        };
        /**
         * An object representing a monetary amount.
         */
        type Money = {
            /**
             * Decimal amount.
             */
            amount: string;
            /**
             * ISO 4217 currency format. For example, "USD".
             */
            currency: string;
        };
        /**
         * An object containing information about a ticket order.
         */
        type Order = {
            /**
             * Order number.
             */
            orderNumber: string;
            /**
             * ID of the reservation used in the order.
             */
            reservationId: string;
            /**
             * ID of the checkout payment.
             */
            paymentId: string;
            /**
             * ID of the event the tickets are for.
             */
            eventId: string;
            /**
             * ID of the contact associated with the order.
             */
            contactId: string;
            /**
             * ID of the member associated with the order.
             */
            memberId: string;
            /**
             * Time the order was created.
             */
            createdDate: string;
            /**
             * First name associated with the order.
             */
            firstName: string;
            /**
             * Last name associated with the order.
             */
            lastName: string;
            /**
             * Full name associated with the order.
             */
            fullName: string;
            /**
             * Email address associated with the order.
             */
            email: string;
            /**
             * Form values used in the order.
             */
            checkoutForm: Form.FormValue[];
            /**
             * Whether the order is confirmed.
             */
            confirmed: boolean;
            /**
             * Status of the order.
             *
             * One of:
             *
             * + `"INITIATED"`
             * + `"FREE"`
             * + `"PENDING"`
             * + `"PAID"`
             * + `"OFFLINE_PENDING"`
             */
            status: string;
            /**
             * Payment method.
             */
            paymentMethod: string;
            /**
             * Number of tickets in the order.
             */
            ticketQuantity: number;
            /**
             * Order price.
             */
            price: Tickets.Money;
            /**
             * URL of the tickets PDF.
             */
            ticketsPdf: string;
            /**
             * Whether the order is archived.
             */
            archived: boolean;
            /**
             * Indicates whether personal information has been removed.
             */
            anonymized: boolean;
            /**
             * Order invoice.
             */
            invoice: Tickets.Invoice;
            /**
             * Whether all ticket holders in the order have checked in.
             */
            fullyCheckedIn: boolean;
            /**
             * Transaction ID.
             */
            transactionId: string;
        };
        /**
         * An object representing ticket reservations.
         */
        type Reservation = {
            /**
             * Ticket quantity.
             */
            quantity: number;
            /**
             * Reserved ticket.
             */
            ticket: Tickets.Ticket;
        };
        /**
         * An object containing information about a reservation created using the [`reserve()`](#reserve) function.
         */
        type ReservationResponse = {
            /**
             * Reservation ID.
             */
            id: string;
            /**
             * Ticket reservations.
             */
            reservations: Tickets.Reservation[];
            /**
             * Ticket reservations invoice.
             */
            invoice: Tickets.Invoice;
            /**
             * Time the reservations expire.
             */
            expirationTime: Date;
        };
        /**
         * An object representing a tax.
         */
        type Tax = {
            /**
             * Tax type.
             *  One of:
             *
             *  + `"INCLUDED"`: Tax is included in the ticket price.
             *  + `"ADDED"`: Tax is added to the order at checkout.
             */
            type: string;
            /**
             * Tax name.
             */
            name: string;
            /**
             * Rate percentage. Possible values are between `"0.01"` and `"100"`, using up to 2 decimal places.
             */
            rate: string;
            /**
             * Taxable amount.
             */
            taxable: Tickets.Money;
            /**
             * Total tax amount.
             */
            amount: Tickets.Money;
        };
        /**
         * An object representing a ticket.
         */
        type Ticket = {
            /**
             * Ticket ID.
             */
            _id: number;
            /**
             * Ticket price.
             */
            price: Tickets.Money;
            /**
             * Whether the ticket is free.
             */
            free: boolean;
            /**
             * Ticket name.
             */
            name: string;
            /**
             * Ticket description.
             */
            description: string;
            /**
             * Number of tickets that can be checked out together.
             *  A value of `0` means there is no limit.
             */
            limitPerCheckout: number;
            /**
             * Order index.
             */
            orderIndex: number;
            /**
             * Ticket policy rules.
             */
            policy: string;
            /**
             * ID of the event the ticket is for.
             */
            eventId: string;
        };
        /**
         * An object representing an event ticket.
         */
        type TicketSelection = {
            /**
             * ID of the ticket.
             */
            ticketId: string;
            /**
             * Ticket quantity.
             */
            quantity: number;
        };
        /**
         * An object containing information about an order update.
         */
        type UpdateInfo = {
            /**
             * Field names and values for a registration form.
             */
            formValues: Form.FormValue[];
        };
        /**
         * An object containing information about an order updated using the [`updateOrder()`](#updateOrder) function.
         */
        type UpdateOrderResponse = {
            /**
             * Updated ticket order.
             */
            order: Tickets.Order;
        };
        /**
         * An object containing information about a coupon being verified using the [`verifyCoupon()`](#verifyCoupon) function.
         */
        type VerifyCouponResponse = {
            /**
             * Invoice the coupon is used in.
             */
            invoice?: Tickets.Invoice;
            /**
             * Discount errors.
             */
            discountErrors?: Tickets.DiscountErrors;
        };
    }
}

// /types/common/wix-data.d.ts
/**
 * The wix-data module contains functionality for working with data in collections.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#)
 */
declare module 'wix-data' {
    /**
     * Creates an aggregation.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#aggregate)
     */
    function aggregate(collectionId: string): WixDataAggregate;
    /**
     * Adds a number of items to a collection.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#bulkInsert)
     */
    function bulkInsert(collectionId: string, items: any[], options?: WixDataOptions): Promise<WixDataBulkResult>;
    /**
     * Removes a number of items from a collection.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#bulkRemove)
     */
    function bulkRemove(collectionId: string, itemIds: string[], options?: WixDataOptions): Promise<WixDataBulkRemoveResult>;
    /**
     * Inserts or updates a number of items in a collection.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#bulkSave)
     */
    function bulkSave(collectionId: string, items: any[], options?: WixDataOptions): Promise<WixDataBulkResult>;
    /**
     * Updates a number of items in a collection.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#bulkUpdate)
     */
    function bulkUpdate(collectionId: string, items: any[], options?: WixDataOptions): Promise<WixDataBulkResult>;
    /**
     * Creates a filter to be used with datasets and aggregations.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#filter)
     */
    function filter(): WixDataFilter;
    /**
     * Retrieves an item from a collection.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#get)
     */
    function get(collectionId: string, itemId: string, options?: WixDataOptions): Promise<any>;
    /**
     * Adds an item to a collection.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#insert)
     */
    function insert(collectionId: string, item: any, options?: WixDataOptions): Promise<any>;
    /**
     * Inserts a reference in the specified property.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#insertReference)
     */
    function insertReference(collectionId: string, propertyName: string, referringItem: any | string, referencedItem: any | string | any[] | string[], options?: WixDataOptions): Promise<void>;
    /**
     * Checks if a reference to the referenced item exists in the specified
     *   property of the referring item.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#isReferenced)
     */
    function isReferenced(collectionId: string, propertyName: string, referringItem: any | string, referencedItem: any | string, options?: WixDataOptions): Promise<boolean>;
    /**
     * Creates a query for retrieving items from a database collection.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#query)
     */
    function query(collectionId: string): WixDataQuery;
    /**
     * Gets the full items referenced in the specified property.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#queryReferenced)
     */
    function queryReferenced(collectionId: string, item: any | string, propertyName: string, options?: WixDataQueryReferencedOptions): Promise<WixDataQueryReferencedResult>;
    /**
     * Removes an item from a collection.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#remove)
     */
    function remove(collectionId: string, itemId: string, options?: WixDataOptions): Promise<any>;
    /**
     * Removes a reference from the specified property.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#removeReference)
     */
    function removeReference(collectionId: string, propertyName: string, referringItem: any | string, referencedItem: any | string | any[] | string[], options?: WixDataOptions): Promise<void>;
    /**
     * Replaces current references with references in the specified property.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#replaceReferences)
     */
    function replaceReferences(collectionId: string, propertyName: string, referringItem: any | string, referencedItem: any | string | any[] | string[], options?: WixDataOptions): Promise<void>;
    /**
     * Inserts or updates an item in a collection.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#save)
     */
    function save(collectionId: string, item: any, options?: WixDataOptions): Promise<any>;
    /**
     * Creates a sort to be used with the dataset `setSort()` function.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#sort)
     */
    function sort(): WixDataSort;
    /**
     * Removes all items from a collection.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#truncate)
     */
    function truncate(collectionId: string, options?: WixDataOptions): Promise<void>;
    /**
     * Updates an item in a collection.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.html#update)
     */
    function update(collectionId: string, item: any, options?: WixDataOptions): Promise<any>;
    /**
     * An object returned by the `bulkRemove()` function.
     */
    type WixDataBulkRemoveResult = {
        /**
         * The number of removed items.
         */
        removed: number;
        /**
         * The number of skipped items.
         */
        skipped: number;
        /**
         * List of IDs of removed items.
         */
        removedItemIds: string[];
        /**
         * List of errors.
         */
        errors: Error[];
    };
    /**
     * An object returned by Wix Data bulk operations.
     */
    type WixDataBulkResult = {
        /**
         * The number of inserted items.
         */
        inserted: number;
        /**
         * The number of updated items.
         */
        updated: number;
        /**
         * The number of skipped items.
         */
        skipped: number;
        /**
         * List of IDs of inserted items.
         */
        insertedItemIds: string[];
        /**
         * List of IDs of updated items.
         */
        updatedItemIds: string[];
        /**
         * List of errors.
         */
        errors: Error[];
    };
    /**
     * An object that you pass as the `options` parameter that modifies how an operation is performed.
     */
    type WixDataOptions = {
        /**
         * Prevents [permission](https://support.wix.com/en/article/about-collection-permissions) checks from running for the operation. Defaults to `false`. Can only be used in backend code.
         */
        suppressAuth?: boolean;
        /**
         * Prevents [hooks](https://support.wix.com/en/article/wix-code-how-to-use-data-hooks) from running for the operation. Can only be used in backend code.
         */
        suppressHooks?: boolean;
        /**
         * Optional filters specific to querying [Wix Stores Products Collection Fields](https://support.wix.com/en/article/velo-wix-stores-products-collection-fields).
         */
        appOptions?: WixStoresProductQuery;
    };
    /**
     * An object for controlling the order of returned referenced items.
     */
    type WixDataQueryReferencedOptions = {
        /**
         * The order of the returned referenced items. Either "asc" or "desc".
         */
        order: string;
        /**
         * Prevents [permission](https://support.wix.com/en/article/about-collection-permissions) checks from running for the operation. Defaults to `false`. Can only be used in backend code.
         */
        suppressAuth: boolean;
    };
    /**
     * An object that you pass as the `options.appOptions` parameter that allows for Wix Stores/Products query specificity.
     */
    type WixStoresProductQuery = {
        /**
         * Whether to include product variants in the query. Default is `false`.
         */
        includeVariants?: boolean;
        /**
         * Whether to include [hidden products](https://support.wix.com/en/article/wix-stores-changing-the-visibility-of-a-product) in the query. Default is `false`.
         */
        includeHiddenProducts?: boolean;
    };
    /**
     * Hooks that can be added to wix-data operations.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.Hooks.html#)
     */
    interface Hooks {
        /**
         * A hook that is triggered after a `count()` operation.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.Hooks.html#afterCount)
         */
        afterCount(count: number, context: Hooks.HookContext): Promise<number> & number;
        /**
         * A hook that is triggered after a `get()` operation.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.Hooks.html#afterGet)
         */
        afterGet(item: any, context: Hooks.HookContext): Promise<any> & any;
        /**
         * A hook that is triggered after an `insert()` operation.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.Hooks.html#afterInsert)
         */
        afterInsert(item: any, context: Hooks.HookContext): Promise<any> & any;
        /**
         * A hook that is triggered after a `find` operation, for each of the items in the query results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.Hooks.html#afterQuery)
         */
        afterQuery(item: any, context: Hooks.HookContext): Promise<any> & any;
        /**
         * A hook that is triggered after a `remove()` operation.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.Hooks.html#afterRemove)
         */
        afterRemove(item: any, context: Hooks.HookContext): Promise<any> & any;
        /**
         * A hook that is triggered after an `update()` operation.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.Hooks.html#afterUpdate)
         */
        afterUpdate(item: any, context: Hooks.UpdateHookContext): Promise<any> & any;
        /**
         * A hook that is triggered before a `count()` operation.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.Hooks.html#beforeCount)
         */
        beforeCount(query: WixDataQuery, context: Hooks.HookContext): Promise<WixDataQuery> & WixDataQuery;
        /**
         * A hook that is triggered before a `get()` operation.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.Hooks.html#beforeGet)
         */
        beforeGet(itemId: string, context: Hooks.HookContext): Promise<string> & string;
        /**
         * A hook that is triggered before an `insert()` operation.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.Hooks.html#beforeInsert)
         */
        beforeInsert(item: any, context: Hooks.HookContext): Promise<any> & any;
        /**
         * A hook that is triggered before a `find()` operation.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.Hooks.html#beforeQuery)
         */
        beforeQuery(query: WixDataQuery, context: Hooks.HookContext): Promise<WixDataQuery> & WixDataQuery;
        /**
         * A hook that is called before a `remove()` operation.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.Hooks.html#beforeRemove)
         */
        beforeRemove(itemId: string, context: Hooks.UpdateHookContext): Promise<string> & string;
        /**
         * A hook that is triggered before an `update()` operation.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.Hooks.html#beforeUpdate)
         */
        beforeUpdate(item: any, context: Hooks.UpdateHookContext): Promise<any> & any;
        /**
         * A hook that is triggered on any error or rejected Promise from any of the wix-data operations.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.Hooks.html#onFailure)
         */
        onFailure(error: Error, context: Hooks.HookContext): Promise<any>;
    }
    /**
     * Provides functionality for performing aggregations on collection data.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregate.html#)
     */
    interface WixDataAggregate {
        /**
         * Adds a sort to an aggregation, sorting by the items or groups by the specified properties in ascending order.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregate.html#ascending)
         */
        ascending(...propertyName: string[]): WixDataAggregate;
        /**
         * Refines a `WixDataAggregate` to only contain the average value from each aggregation group.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregate.html#avg)
         */
        avg(propertyName: string, projectedName?: string): WixDataAggregate;
        /**
         * Refines a `WixDataAggregate` to contain the item count of each group in the aggregation.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregate.html#count)
         */
        count(): WixDataAggregate;
        /**
         * Adds a sort to an aggregation, sorting by the items or groups by the specified properties in descending order.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregate.html#descending)
         */
        descending(...propertyName: string[]): WixDataAggregate;
        /**
         * Filters out items from being used in an aggregation.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregate.html#filter)
         */
        filter(filter: WixDataFilter): WixDataAggregate;
        /**
         * Groups items together in an aggregation.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregate.html#group)
         */
        group(...propertyName: string[]): WixDataAggregate;
        /**
         * Filters out groups from being returned from an aggregation.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregate.html#having)
         */
        having(filter: WixDataFilter): WixDataAggregate;
        /**
         * Limits the number of items or groups the aggregation returns.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregate.html#limit)
         */
        limit(limit: number): WixDataAggregate;
        /**
         * Refines a `WixDataAggregate` to only contain the maximum value from each aggregation group.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregate.html#max)
         */
        max(propertyName: string, projectedName?: string): WixDataAggregate;
        /**
         * Refines a `WixDataAggregate` to only contain the minimum value from each aggregation group.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregate.html#min)
         */
        min(propertyName: string, projectedName?: string): WixDataAggregate;
        /**
         * Runs the aggregation and returns the results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregate.html#run)
         */
        run(options?: WixDataAggregate.RunOptions): Promise<WixDataAggregateResult>;
        /**
         * Sets the number of items or groups to skip before returning aggregation results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregate.html#skip)
         */
        skip(skip: number): WixDataAggregate;
        /**
         * Refines a `WixDataAggregate` to contain the sum from each aggregation group.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregate.html#sum)
         */
        sum(propertyName: string, projectedName?: string): WixDataAggregate;
    }
    /**
     * The results of an aggregation, containing the aggregated values.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregateResult.html#)
     */
    interface WixDataAggregateResult {
        /**
         * Gets the aggregated values.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregateResult.html#items)
         */
        readonly items: any[];
        /**
         * Returns the number of values in the aggregate results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregateResult.html#length)
         */
        readonly length: number;
        /**
         * Indicates if the aggregation has more results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregateResult.html#hasNext)
         */
        hasNext(): boolean;
        /**
         * Retrieves the next page of aggregate results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregateResult.html#next)
         */
        next(): Promise<WixDataAggregateResult>;
    }
    /**
     * Provides functionality for refining a filter.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataFilter.html#)
     */
    interface WixDataFilter {
        /**
         * Adds an `and` condition to the query or filter.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataFilter.html#and)
         */
        and(query: WixDataQuery): WixDataQuery;
        /**
         * Refines a query or filter to match items whose specified property value is within a specified range.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataFilter.html#between)
         */
        between(propertyName: string, rangeStart: string | number | Date, rangeEnd: string | number | Date): WixDataQuery;
        /**
         * Refines a query or filter to match items whose specified property value contains a specified string.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataFilter.html#contains)
         */
        contains(propertyName: string, string: string): WixDataQuery;
        /**
         * Refines a query or filter to match items whose specified property value ends with a specified string.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataFilter.html#endsWith)
         */
        endsWith(propertyName: string, string: string): WixDataQuery;
        /**
         * Refines a query or filter to match items whose specified property value equals the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataFilter.html#eq)
         */
        eq(propertyName: string, value: any): WixDataQuery;
        /**
         * Refines a query or filter to match items whose specified property value is greater than or equal to the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataFilter.html#ge)
         */
        ge(propertyName: string, value: string | number | Date): WixDataQuery;
        /**
         * Refines a query or filter to match items whose specified property value is greater than the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataFilter.html#gt)
         */
        gt(propertyName: string, value: string | number | Date): WixDataQuery;
        /**
         * Refines a query or filter to match items whose specified property values equals all of the specified `value` parameters.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataFilter.html#hasAll)
         */
        hasAll(propertyName: string, value: string | number | Date | any[]): WixDataQuery;
        /**
         * Refines a query or filter to match items whose specified property value equals any of the specified `value` parameters.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataFilter.html#hasSome)
         */
        hasSome(propertyName: string, value: string | number | Date | any[]): WixDataQuery;
        /**
         * Refines a query or filter to match items whose specified property does not exist or does not have any value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataFilter.html#isEmpty)
         */
        isEmpty(propertyName: string): WixDataQuery;
        /**
         * Refines a query or filter to match items whose specified property has any value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataFilter.html#isNotEmpty)
         */
        isNotEmpty(propertyName: string): WixDataQuery;
        /**
         * Refines a query or filter to match items whose specified property value is less than or equal to the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataFilter.html#le)
         */
        le(propertyName: string, value: string | number | Date): WixDataQuery;
        /**
         * Refines a query or filter to match items whose specified property value is less than the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataFilter.html#lt)
         */
        lt(propertyName: string, value: string | number | Date): WixDataQuery;
        /**
         * Refines a query or filter to match items whose specified property value does not equal the specified value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataFilter.html#ne)
         */
        ne(propertyName: string, value: any): WixDataQuery;
        /**
         * Adds a `not` condition to the query or filter.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataFilter.html#not)
         */
        not(query: WixDataQuery): WixDataQuery;
        /**
         * Adds an `or` condition to the query or filter.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataFilter.html#or)
         */
        or(query: WixDataQuery): WixDataQuery;
        /**
         * Refines a query or filter to match items whose specified property value starts with a specified string.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataFilter.html#startsWith)
         */
        startsWith(propertyName: string, string: string): WixDataQuery;
    }
    /**
     * Contains functionality for refining a data query.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQuery.html#)
     */
    interface WixDataQuery extends WixDataFilter {
        /**
         * Adds a sort to a query or sort, sorting by the specified properties in ascending order.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQuery.html#ascending)
         */
        ascending(...propertyName: string[]): WixDataQuery;
        /**
         * Returns the number of items that match the query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQuery.html#count)
         */
        count(options?: WixDataOptions): Promise<number>;
        /**
         * Adds a sort to a query or sort, sorting by the specified properties in descending order.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQuery.html#descending)
         */
        descending(...propertyName: string[]): WixDataQuery;
        /**
         * Returns the distinct values that match the query, without duplicates.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQuery.html#distinct)
         */
        distinct(propertyName: string, options?: WixDataOptions): Promise<WixDataQueryResult>;
        /**
         * Returns the items that match the query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQuery.html#find)
         */
        find(options?: WixDataOptions): Promise<WixDataQueryResult>;
        /**
         * Includes referenced items for the specified properties in a query's results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQuery.html#include)
         */
        include(...propertyName: string[]): WixDataQuery;
        /**
         * Limits the number of items the query returns.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQuery.html#limit)
         */
        limit(limit: number): WixDataQuery;
        /**
         * Sets the number of items to skip before returning query results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQuery.html#skip)
         */
        skip(skip: number): WixDataQuery;
    }
    /**
     * The results of a data reference query, containing the retrieved items.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryReferencedResult.html#)
     */
    interface WixDataQueryReferencedResult {
        /**
         * Returns the items that match the reference query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryReferencedResult.html#items)
         */
        readonly items: any[];
        /**
         * Returns the total number of items that match the reference query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryReferencedResult.html#totalCount)
         */
        readonly totalCount: number;
        /**
         * Indicates if the reference query has more results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryReferencedResult.html#hasNext)
         */
        hasNext(): boolean;
        /**
         * Indicates if the reference query has previous results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryReferencedResult.html#hasPrev)
         */
        hasPrev(): boolean;
        /**
         * Retrieves the next page of reference query results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryReferencedResult.html#next)
         */
        next(): Promise<WixDataQueryReferencedResult>;
        /**
         * Retrieves the previous page of reference query results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryReferencedResult.html#prev)
         */
        prev(): Promise<WixDataQueryReferencedResult>;
    }
    /**
     * The results of a data query, containing the retrieved items.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryResult.html#)
     */
    interface WixDataQueryResult {
        /**
         * Returns the index of the current results page number.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryResult.html#currentPage)
         */
        readonly currentPage: number;
        /**
         * Returns the items that match the query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryResult.html#items)
         */
        readonly items: any[];
        /**
         * Returns the number of items in the current results page.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryResult.html#length)
         */
        readonly length: number;
        /**
         * Returns the query page size.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryResult.html#pageSize)
         */
        readonly pageSize: number;
        /**
         * Indicates if referenced items have been trimmed from the results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryResult.html#partialIncludes)
         */
        readonly partialIncludes: boolean;
        /**
         * Returns the query used to get the current results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryResult.html#query)
         */
        readonly query: WixDataQuery;
        /**
         * Returns the total number of items that match the query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryResult.html#totalCount)
         */
        readonly totalCount: number;
        /**
         * Returns the total number of pages the query produced.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryResult.html#totalPages)
         */
        readonly totalPages: number;
        /**
         * Indicates if the query has more results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryResult.html#hasNext)
         */
        hasNext(): boolean;
        /**
         * Indicates the query has previous results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryResult.html#hasPrev)
         */
        hasPrev(): boolean;
        /**
         * Retrieves the next page of query results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryResult.html#next)
         */
        next(): Promise<WixDataQueryResult>;
        /**
         * Retrieves the previous page of query results.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataQueryResult.html#prev)
         */
        prev(): Promise<WixDataQueryResult>;
    }
    /**
     * Provides functionality for sorting a query.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataSort.html#)
     */
    interface WixDataSort {
        /**
         * Adds a sort to a query or sort, sorting by the specified properties in ascending order.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataSort.html#ascending)
         */
        ascending(...propertyName: string[]): WixDataQuery;
        /**
         * Adds a sort to a query or sort, sorting by the specified properties in descending order.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataSort.html#descending)
         */
        descending(...propertyName: string[]): WixDataQuery;
    }
    /**
     * Hooks that can be added to wix-data operations.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.Hooks.html#)
     */
    namespace Hooks {
        /**
         * An object that contains contextual information about the hook being called.
         */
        type HookContext = {
            /**
             * The ID of the collection the hook affects.
             */
            collectionName: string;
            /**
             * The current site user ID. If no user is logged in to the site it may be null.
             */
            userId: string;
            /**
             * The permissions role of the current user. Possibilities are: `anonymous`, `siteMember`,  `siteOwner` and `dataOwner`.
             */
            userRole: string;
        };
        /**
         * An object that contains contextual information when calling the `beforeUpdate()`, `beforeRemove()`, or `afterUpdate()` hooks.
         */
        type UpdateHookContext = {
            /**
             * The ID of the collection the hook affects.
             */
            collectionName: string;
            /**
             * The current site user ID. If no user is logged in to the site it may be null.
             */
            userId: string;
            /**
             * The permissions role of the current user. Possibilities are: `anonymous`, `siteMember`,  `siteOwner` and `dataOwner`.
             */
            userRole: string;
            /**
             * The item stored in the database collection before an update or delete operation.
             */
            currentItem: any;
        };
    }
    /**
     * Provides functionality for performing aggregations on collection data.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-data.WixDataAggregate.html#)
     */
    namespace WixDataAggregate {
        /**
         * Options to use when running an aggregation.
         */
        type RunOptions = {
            /**
             * When `true`, prevents permission checks from running for the `run()` operation. Defaults to `false`.
             */
            suppressAuth?: boolean;
        };
    }
}

// /types/common/wix-crm-backend.d.ts
/**
 * The wix-crm-backend module contains functionality for working with
 *  [your site's contacts](https://support.wix.com/en/article/about-your-contact-list)
 *  from backend code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.html#)
 */
declare module 'wix-crm-backend' {
    /**
     * The Contacts API is used to manage a site's contacts.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.html#contacts)
     */
    const contacts: Contacts;
    /**
     * The Notifications API is used to send notifications to the site owner and contributors.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.html#notifications)
     */
    const notifications: Notifications;
    /**
     * The Tasks API is used to manage a site's tasks.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.html#tasks)
     */
    const tasks: Tasks;
    /**
     * The Triggered Emails API is used to send triggered emails to your site's contacts and members.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.html#triggeredEmails)
     */
    const triggeredEmails: TriggeredEmails;
    /**
     * The Workflows API is used to manage your site's
     * [workflows](https://support.wix.com/en/article/about-workflows).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.html#workflows)
     */
    const workflows: Workflows;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-crm-backend.contacts.createContact()](https://www.wix.com/velo/reference/wix-crm-backend/contacts/createcontact).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.html#createContact)
     */
    function createContact(contactInfo: ContactInfo): Promise<string>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-crm-backend.contacts.deleteContact()](https://www.wix.com/velo/reference/wix-crm-backend/contacts/deletecontact).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.html#deleteContact)
     */
    function deleteContact(contactId: string, options: DeleteOptions): Promise<void>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-crm-backend.triggeredEmails.emailContact()](https://www.wix.com/velo/reference/wix-crm-backend/triggeredemails/emailcontact).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.html#emailContact)
     */
    function emailContact(emailId: string, toContact: string, options?: TriggeredEmails.TriggeredEmailOptions): Promise<void>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-crm-backend.contacts.getContact()](https://www.wix.com/velo/reference/wix-crm-backend/contacts/getcontact).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.html#getContactById)
     */
    function getContactById(contactId: string): Promise<ContactInfo>;
    /**
     * **Deprecated.**
     * This function will continue to work, but a newer version is available at
     * [wix-crm-backend.contacts.updateContact()](https://www.wix.com/velo/reference/wix-crm-backend/contacts/updatecontact).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.html#updateContact)
     */
    function updateContact(contactId: string, contactInfo: ContactInfo): Promise<void>;
    /**
     * An object that contains information about a site contact.
     */
    type ContactInfo = {
        /**
         * Contact's first name.
         */
        firstName?: string;
        /**
         * Contact's last name.
         */
        lastName?: string;
        /**
         * Contact's image source.
         */
        picture?: string;
        /**
         * List of contact's email addresses. When
         *  creating a contact, if no phone number is
         *  provided, at least one email address must be provided.
         */
        emails?: string[];
        /**
         * Email address the contact who is also
         *  a member uses to log into the system.
         */
        loginEmail?: string;
        /**
         * List of contact's phone numbers. When
         *  creating a contact, if no email is
         *  provided, at least one phone number must be provided.
         */
        phones?: string[];
        /**
         * List of contact's labels. [Labels](https://support.wix.com/en/article/creating-contact-labels)
         *  are used to organize contacts. When setting the `labels` property, you can
         *  only list labels that already exist in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).
         */
        labels?: string[];
        /**
         * Any
         *  number of custom fields. [Custom fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)
         *  are used to store additional information about your site's contacts. When
         *  setting a custom field, use key:value pairs, where the key matches the display names
         *  in your site's [Contacts List](https://support.wix.com/en/article/accessing-your-contact-list).
         *  You can only set values for custom fields that already exist in the Contacts
         *  application.
         */
        customFields?: string | number | Date;
    };
    /**
     * An object that contains contact deletion options.
     */
    type DeleteOptions = {
        /**
         * Whether to perform the deletion when the contact is also a member. Defaults to `false`.
         */
        deleteMembers: boolean;
    };
    /**
     * The Contacts API is used to manage a site's contacts.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#)
     */
    interface Contacts {
        /**
         * Appends an existing contact or creates a contact if it doesn't exist.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#appendOrCreateContact)
         */
        appendOrCreateContact(contactInfo: Contacts.ContactInfo): Promise<Contacts.ContactIdentification>;
        /**
         * Creates a new contact.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#createContact)
         */
        createContact(contactInfo: Contacts.ContactInfo, options?: Contacts.Options): Promise<Contacts.Contact>;
        /**
         * Deletes a contact who is not a site member or contributor.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#deleteContact)
         */
        deleteContact(contactId: string, options?: Contacts.AuthOptions): Promise<void>;
        /**
         * Deletes an extended field.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#deleteExtendedField)
         */
        deleteExtendedField(key: string, options?: Contacts.AuthOptions): Promise<void>;
        /**
         * Deletes a label from the site and removes it from contacts it applies to.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#deleteLabel)
         */
        deleteLabel(key: string, options?: Contacts.AuthOptions): Promise<void>;
        /**
         * Retrieves a custom field with a given name, or creates one if it doesn't exist.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#findOrCreateExtendedField)
         */
        findOrCreateExtendedField(extendedFieldInfo: Contacts.ExtendedFieldInfo, options?: Contacts.AuthOptions): Promise<Contacts.FoundOrCreatedExtendedField>;
        /**
         * Retrieves a label with a given name, or creates one if it doesn't exist.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#findOrCreateLabel)
         */
        findOrCreateLabel(displayName: string, options?: Contacts.AuthOptions): Promise<Contacts.FoundOrCreatedLabel>;
        /**
         * Retrieves a contact.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#getContact)
         */
        getContact(contactId: string, options?: Contacts.AuthOptions): Promise<Contacts.Contact>;
        /**
         * Retrieves an extended field.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#getExtendedField)
         */
        getExtendedField(key: string, options?: Contacts.AuthOptions): Promise<Contacts.ExtendedField>;
        /**
         * Retrieves a label.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#getLabel)
         */
        getLabel(key: string, options?: Contacts.AuthOptions): Promise<Contacts.Label>;
        /**
         * Adds labels to a contact.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#labelContact)
         */
        labelContact(contactId: string, labelKeys: string[], options?: Contacts.AuthOptions): Promise<Contacts.Contact>;
        /**
         *  Creates a query to retrieve a list of contacts.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#queryContacts)
         */
        queryContacts(): Contacts.ContactsQueryBuilder;
        /**
         * Creates a query to retrieve a list of extended fields.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#queryExtendedFields)
         */
        queryExtendedFields(): Contacts.ExtendedFieldsQueryBuilder;
        /**
         * Creates a query to retrieve a list of labels.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#queryLabels)
         */
        queryLabels(): Contacts.LabelsQueryBuilder;
        /**
         *  Renames an extended field.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#renameExtendedField)
         */
        renameExtendedField(key: string, displayName: string, options?: Contacts.AuthOptions): Promise<Contacts.ExtendedField>;
        /**
         *  Renames a label.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#renameLabel)
         */
        renameLabel(key: string, displayName: string, options?: Contacts.AuthOptions): Promise<Contacts.Label>;
        /**
         * Removes labels from a contact.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#unlabelContact)
         */
        unlabelContact(contactId: string, labelKeys: string[], options?: Contacts.AuthOptions): Promise<Contacts.Contact>;
        /**
         * Updates a contact's properties.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#updateContact)
         */
        updateContact(identifiers: Contacts.Identifiers, contactInfo: Contacts.ContactInfo, options?: Contacts.Options): Promise<Contacts.Contact>;
    }
    /**
     * Events that are fired by actions relating to site contacts.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Events.html#)
     */
    interface Events {
        /**
         * An event that triggers when a new workflow card is created.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Events.html#onCardCreated)
         */
        onCardCreated(event: Events.CardCreatedEvent): void;
        /**
         * An event that triggers when a workflow card is moved.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Events.html#onCardMoved)
         */
        onCardMoved(event: Events.CardMovedEvent): void;
        /**
         * An event that triggers when a workflow card is moved.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Events.html#onCardRestored)
         */
        onCardRestored(event: Events.CardRestoredEvent): void;
        /**
         * An event that triggers when a new contact is created.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Events.html#onContactCreated)
         */
        onContactCreated(event: Events.ContactCreatedEvent): void;
        /**
         * An event that triggers when a contact is deleted.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Events.html#onContactDeleted)
         */
        onContactDeleted(event: Events.ContactDeletedEvent): void;
        /**
         * An event that triggers when one or more source contacts are merged into a target contact.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Events.html#onContactMerged)
         */
        onContactMerged(event: Events.ContactMergedEvent): void;
        /**
         * An event that triggers when a contact is updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Events.html#onContactUpdated)
         */
        onContactUpdated(event: Events.ContactUpdatedEvent): void;
        /**
         * An event that triggers when a site visitor submits a Wix Form.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Events.html#onFormSubmit)
         */
        onFormSubmit(event: Events.FormSubmitEvent): void;
    }
    /**
     * The Notifications API is used to send notifications to the site owner and contributors.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Notifications.html#)
     */
    interface Notifications {
        /**
         * Sends a notification.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Notifications.html#notify)
         */
        notify(body: string, channels: string[], options?: Notifications.NotificationOptions): Promise<void>;
    }
    /**
     * The Tasks API is used to manage a site's tasks.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Tasks.html#)
     */
    interface Tasks {
        /**
         * Sets a task as completed.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Tasks.html#completeTask)
         */
        completeTask(taskId: string): Promise<string>;
        /**
         * Creates a new task.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Tasks.html#createTask)
         */
        createTask(taskInfo: Tasks.TaskInfo): Promise<string>;
        /**
         * Gets a task by ID.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Tasks.html#getTask)
         */
        getTask(taskId: string): Promise<Tasks.Task>;
        /**
         * Removes an existing task.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Tasks.html#removeTask)
         */
        removeTask(taskId: string): Promise<string>;
        /**
         * Resets a task as not completed.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Tasks.html#resetTask)
         */
        resetTask(taskId: string): Promise<string>;
        /**
         * Updates the specified fields of an existing task.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Tasks.html#updateTaskFields)
         */
        updateTaskFields(taskId: string, taskInfo: Tasks.TaskInfo): Promise<string>;
    }
    /**
     * The Triggered Emails API is used to send triggered emails to your site's contacts and members.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.TriggeredEmails.html#)
     */
    interface TriggeredEmails {
        /**
         * Sends a triggered email to a contact.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.TriggeredEmails.html#emailContact)
         */
        emailContact(emailId: string, contactId: string, options?: TriggeredEmails.TriggeredEmailOptions): Promise<void>;
        /**
         * Sends a triggered email to a site member.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.TriggeredEmails.html#emailMember)
         */
        emailMember(emailId: string, memberId: string, options?: TriggeredEmails.TriggeredEmailOptions): Promise<void>;
    }
    /**
     * The Workflows API is used to manage your site's
     * [workflows](https://support.wix.com/en/article/about-workflows).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#)
     */
    interface Workflows {
        /**
         * Archives a workflow card.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#archiveCard)
         */
        archiveCard(cardId: string): Promise<void>;
        /**
         * Creates a new workflow card.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#createCard)
         */
        createCard(workflowId: string, phaseId: string, card: Workflows.Card, position?: number): Promise<string>;
        /**
         * Creates a new workflow phase.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#createPhase)
         */
        createPhase(workflowId: string, phase: Workflows.Phase, position?: number): Promise<string>;
        /**
         * Creates a new workflow.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#createWorkflow)
         */
        createWorkflow(workflowInfo: Workflows.WorkflowInfo): Promise<string>;
        /**
         * Deletes a workflow card by ID.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#deleteCard)
         */
        deleteCard(cardId: string): Promise<void>;
        /**
         * Deletes a workflow phase by ID.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#deletePhase)
         */
        deletePhase(phaseId: string): Promise<void>;
        /**
         * Deletes a workflow by ID.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#deleteWorkflow)
         */
        deleteWorkflow(workflowId: string): Promise<void>;
        /**
         * Gets a workflow card by ID.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#getCard)
         */
        getCard(cardId: string): Promise<Workflows.Card>;
        /**
         * Gets a phase info by ID.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#getPhaseInfo)
         */
        getPhaseInfo(phaseId: string): Promise<Workflows.Phase>;
        /**
         * Gets a workflow info by ID.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#getWorkflowInfo)
         */
        getWorkflowInfo(workflowId: string): Promise<Workflows.WorkflowInfo>;
        /**
         * Gets a list of a workflow's cards.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#listCards)
         */
        listCards(workflowId: string, options?: Workflows.ListCardOptions): Promise<Workflows.CardList>;
        /**
         * Gets a list of a workflow's phases.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#listPhasesInfo)
         */
        listPhasesInfo(workflowId: string, options?: Workflows.ListOptions): Promise<Workflows.PhaseList>;
        /**
         * Gets a list of the site's workflows info.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#listWorkflowsInfo)
         */
        listWorkflowsInfo(options?: Workflows.ListOptions): Promise<Workflows.WorkflowList>;
        /**
         * Moves a card to a new position within a workflow.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#moveCard)
         */
        moveCard(cardId: string, options: Workflows.MoveCardOptions): Promise<void>;
        /**
         * Moves a phase to a new position with a workflow.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#movePhase)
         */
        movePhase(phaseId: string, options: Workflows.MovePhaseOptions): Promise<void>;
        /**
         * Restores an archived workflow card.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#restoreCard)
         */
        restoreCard(cardId: string, options: Workflows.MoveCardOptions): Promise<void>;
        /**
         * Updates an existing workflow card.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#updateCardFields)
         */
        updateCardFields(cardId: string, card: Workflows.Card): Promise<void>;
        /**
         * Updates an existing workflow phase.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#updatePhaseFields)
         */
        updatePhaseFields(phaseId: string, phase: Workflows.Phase): Promise<void>;
        /**
         * Updates an existing workflow.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#updateWorkflowFields)
         */
        updateWorkflowFields(workflowId: string, workflowInfo: Workflows.WorkflowInfo): Promise<void>;
    }
    /**
     * The Contacts API is used to manage a site's contacts.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.html#)
     */
    namespace Contacts {
        type Address = {
            /**
             * Street address ID.
             */
            _id: string;
            /**
             *
             *
             *
             * Address type.
             * `"UNTAGGED"` is shown as "Other" in the Contact List.
             *
             * One of:
             *
             * - `"UNTAGGED"`
             * - `"HOME"`
             * - `"WORK"`
             * - `"BILLING"`
             * - `"SHIPPING"`
             *
             */
            tag: string;
            /**
             * Street address.
             */
            address: Contacts.AddressDetails;
        };
        /**
         * Street address.
         */
        type AddressDetails = {
            /**
             * Main address line, usually street and number, as free text.
             */
            addressLine1?: string;
            /**
             * Street address object, with number and name in separate fields.
             */
            streetAddress?: Contacts.StreetAddressInfo;
            /**
             * Human-readable address string.
             *  If not provided, the value is generated from the available address data.
             */
            formatted?: string;
            /**
             * Free text providing more detailed address information,
             *  such as apartment, suite, or floor.
             */
            addressLine2?: string;
            /**
             * Coordinates of the physical address.
             */
            location?: Contacts.AddressLocation;
            /**
             * City name.
             */
            city?: string;
            /**
             * Code for a subdivision (such as state, prefecture, or province) in an
             *  [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) format.
             */
            subdivision?: string;
            /**
             * 2-letter country code in an
             *  [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
             */
            country?: string;
            /**
             * Postal or zip code.
             */
            postalCode?: string;
        };
        type AddressInfo = {
            /**
             *
             *
             *
             * Address type.
             * `"UNTAGGED"` is shown as "Other" in the Contact List.
             *
             * One of:
             *
             * - `"UNTAGGED"`
             * - `"HOME"`
             * - `"WORK"`
             * - `"BILLING"`
             * - `"SHIPPING"`
             *
             */
            tag: string;
            /**
             * Street address.
             */
            address: Contacts.AddressDetails;
        };
        /**
         * Coordinates of the physical address.
         */
        type AddressLocation = {
            /**
             * Address's latitude.
             */
            latitude?: number;
            /**
             * Address's longitude.
             */
            longitude?: number;
        };
        /**
         * Authorization options.
         */
        type AuthOptions = {
            /**
             * When `true`, prevents permission checks from running for the operation. Defaults to `false`.
             */
            suppressAuth?: boolean;
        };
        /**
         * Contact.
         */
        type Contact = {
            /**
             * Contact ID.
             */
            _id: string;
            /**
             * Revision number, which increments by 1 each time the contact is updated.
             *  To prevent conflicting changes,
             *  the existing `revision` must be used when updating a contact.
             */
            revision: number;
            /**
             * Details about the contact's source.
             */
            source: Contacts.Source;
            /**
             * Date and time the contact was created.
             */
            _createdDate: Date;
            /**
             * Date and time the contact was last updated.
             */
            _updatedDate: Date;
            /**
             * Details about the contact's last action in the site.
             */
            lastActivity: Contacts.LastActivity;
            /**
             * Contact's primary phone and email.
             */
            primaryInfo?: Contacts.PrimaryInfo;
            /**
             * Contact's details.
             */
            info: Contacts.Info;
        };
        type ContactIdentification = {
            /**
             * ID of the contact that was found or created.
             */
            contactId: string;
            /**
             * Identity type of the returned contact.
             *
             *
             *
             *
             * One of:
             *
             * - `"CONTACT"`: The returned contact ID belongs to a new or existing contact.
             * - `"MEMBER"`: The returned contact ID belongs to the currently logged-in site member.
             * - `"NOT_AUTHENTICATED_MEMBER"`: The returned contact ID belongs to a site member who is not currently logged in.
             *
             */
            identityType: string;
        };
        /**
         * Contact's information.
         */
        type ContactInfo = {
            /**
             * Contact's first and last name.
             */
            name?: Contacts.Name;
            /**
             * Contact's company name.
             */
            company?: string;
            /**
             * Contact's job title.
             *  Corresponds to the **Position** field in the Dashboard.
             */
            jobTitle?: string;
            /**
             * Contact's locale, formatted as an
             *  [IETF BCP 47 language tag](https://tools.ietf.org/html/rfc5646).
             *  Typically, this is a lowercase 2-letter language code,
             *  followed by a hyphen,
             *  followed by an uppercase 2-letter country code.
             *
             *  For example, German from Germany is formatted as `de-DE`,
             *  and U.S. English is formatted as `en-US`.
             */
            locale?: string;
            /**
             * Contact's birthdate, formatted as `"YYYY-MM-DD"`.
             *
             *  Example: `"2020-03-15"` for March 15, 2020.
             */
            birthdate?: string;
            /**
             * **Deprecated.** Use `profilePicture` instead.
             */
            picture?: Contacts.Picture;
            /**
             * List of up to 50 email addresses.
             */
            emails?: Contacts.EmailInfo[];
            /**
             * List of up to 50 phone numbers.
             */
            phones?: Contacts.PhoneInfo[];
            /**
             * List of up to 50 addresses.
             */
            addresses?: Contacts.AddressInfo[];
            /**
             * List of contact label keys.
             * [Contact labels](https://support.wix.com/en/article/adding-labels-to-contacts-in-your-contact-list)
             * help categorize contacts.
             *
             *
             *
             *
             * Label keys must exist to be added to the contact.
             * Contact labels can be created or retrieved with
             * [`findOrCreateLabel()`](wix-crm-backend/contacts/findorcreatelabel)
             * or
             * [`queryLabels()`](wix-crm-backend/contacts/queryLabels).
             *
             */
            labelKeys?: string[];
            /**
             * Set of key-value pairs.
             *
             *
             *
             * Contact's
             * [extended fields](wix-crm-backend/contacts/introduction#about-extended-fields),
             * which allow you to store additional information about your contacts.
             *
             * To view or create extended fields, use
             * [`findOrCreateExtendedField()`](wix-crm-backend/contacts/findorcreateextendedfield),
             * [`getExtendedField()`](wix-crm-backend/contacts/getextendedfield), or
             * [`queryExtendedFields()`](wix-crm-backend/contacts/queryextendedfields).
             *
             */
            extendedFields?: any;
            /**
             * Contact's profile picture URL.
             */
            profilePicture?: string;
        };
        /**
         * Contact's profile picture.
         */
        type ContactPicture = {
            /**
             * Image source. Can be either a Media Manager URL or external URL.
             */
            image: string;
            /**
             * Indicates whether the image is retrieved from Wix Media
             * or an external provider.
             *
             *
             *
             *
             * One of:
             *
             * - `"EXTERNAL"`: The image is retrieved from an external provider.
             * - `"WIX_MEDIA"`: The image is retrieved from Wix Media.
             *
             */
            imageProvider: string;
        };
        type Email = {
            /**
             * Email ID.
             */
            _id: string;
            /**
             * Email type.
             *
             *
             *
             *
             * `"UNTAGGED"` is shown as "Other" in the Contact List.
             *
             * One of:
             *
             * - `"UNTAGGED"`
             * - `"MAIN"`
             * - `"HOME"`
             * - `"WORK"`
             *
             */
            tag: string;
            /**
             * Email address.
             */
            email: string;
            /**
             * Indicates whether this is the contact's primary email address.
             *  When changing `primary` to `true` for an email,
             *  the contact's other emails become `false`.
             */
            primary: boolean;
        };
        type EmailInfo = {
            /**
             * Email type.
             *
             *
             *
             *
             * `"UNTAGGED"` is shown as "Other" in the Contact List.
             *
             * One of:
             *
             * - `"UNTAGGED"`
             * - `"MAIN"`
             * - `"HOME"`
             * - `"WORK"`
             *
             */
            tag?: string;
            /**
             * Email address.
             */
            email?: string;
            /**
             * Indicates whether this is the contact's primary email address.
             *  When changing `primary` to `true` for an email,
             *  the contact's other emails become `false`.
             */
            primary?: boolean;
        };
        /**
         * Extended field that was found or created.
         */
        type ExtendedField = {
            /**
             * Extended field key.
             *
             * When accessing contact data,
             * extended field data is available at `extendedFields[key]`.
             * For example, if the key is "custom.notes",
             * the value can be accessed at `extendedFields["custom.notes"]`.
             *
             * `key` is generated when the extended field is created
             * and cannot be modified, even if `displayName` changes.
             */
            key: string;
            /**
             * Extended field display name shown in the Contact List.
             */
            displayName: string;
            /**
             * Type of data the field holds.
             *
             *
             *
             *
             * One of:
             *
             * - `"TEXT"`: Accepts strings.
             * - `"URL"`: Accepts web addresses. Prepends `https://` if no protocol is included.
             * - `"DATE"`: Accepts dates formatted as `"YYYY-MM-DD"`.
             * - `"NUMBER"`: Accepts floats.
             *
             */
            dataType: string;
            /**
             *
             *
             *
             * Indicates whether the extended field is a
             * [system field or custom field](wix-crm-backend/contacts/introduction#about-extended-fields).
             *
             * One of:
             *
             * - `"SYSTEM"`: The field is a system field managed by Wix. System fields cannot be modified by 3rd-party apps or site contributors.
             * - `"USER_DEFINED"`: The field is a custom field and can be modified by 3rd-party apps or site contributors.
             *
             */
            fieldType: string;
            /**
             * Date and time the field was created.
             */
            _createdDate: Date;
            /**
             * Date and time the field was last updated.
             */
            _updatedDate: Date;
            /**
             *
             *
             *
             * Extended field [namespace](wix-crm-backend/contacts/introduction#the-namespace-and-key-properties-in-labels-and-extended-fields).
             *
             *
             * Extended fields created by site contributors or 3rd-party apps
             * are automatically assigned to the `custom` namespace.
             */
            namespace: string;
            /**
             * Field description, if the field is a system field.
             */
            description: string;
        };
        /**
         * Custom field to find or create.
         */
        type ExtendedFieldInfo = {
            /**
             * Display name to find or create.
             *
             *  If an existing custom field is an exact match
             *  for the specified `displayName`,
             *  the existing field is returned.
             *  If not, a new field is created and returned.
             */
            displayName: string;
            /**
             * Type of data the field holds.
             * Ignored if an existing field is an exact match
             * for the specified display name.
             *
             *
             *
             *
             * One of:
             *
             * - `"TEXT"`: Accepts strings.
             * - `"URL"`: Accepts web addresses. Prepends `https://` if no protocol is included.
             * - `"DATE"`: Accepts dates formatted as `"YYYY-MM-DD"`.
             * - `"NUMBER"`: Accepts floats.
             *
             */
            dataType?: string;
        };
        /**
         * List of extended fields.
         */
        type ExtendedFieldList = {
            /**
             * List of extended fields.
             */
            items: Contacts.ExtendedField[];
            /**
             * Metadata for the page of results.
             */
            pagingMetadata: Contacts.PagingMetadata;
        };
        /**
         * Extended field that was found or created.
         */
        type FoundOrCreatedExtendedField = {
            /**
             * Extended field that was found or created.
             */
            extendedField: Contacts.ExtendedField;
            /**
             * Indicates whether the extended field was just created or already existed.
             *
             *  If the field was just created, returns `true`.
             *  If it already existed, returns `false`.
             */
            newExtendedField: boolean;
        };
        /**
         * Label that was found or created.
         */
        type FoundOrCreatedLabel = {
            /**
             * Label that was found or created.
             */
            label: Contacts.Label;
            /**
             * Indicates whether the label was just created or already existed.
             *
             *  If the label was just created, returns `true`.
             *  If it already existed, returns `false`.
             */
            newLabel: boolean;
        };
        type Identifiers = {
            /**
             * ID of the contact to update.
             */
            contactId: string;
            /**
             * Revision number.
             *  When updating, include the existing `revision`
             *  to prevent conflicting updates.
             */
            revision: number;
        };
        /**
         * Contact's details.
         */
        type Info = {
            /**
             * Contact's first and last name.
             */
            name?: Contacts.Name;
            /**
             * Contact's company name.
             */
            company?: string;
            /**
             * Contact's job title.
             *  Corresponds to the **Position** field in the Dashboard.
             */
            jobTitle?: string;
            /**
             * Contact's locale, formatted as an
             *  [IETF BCP 47 language tag](https://tools.ietf.org/html/rfc5646).
             *  Typically, this is a lowercase 2-letter language code,
             *  followed by a hyphen,
             *  followed by an uppercase 2-letter country code.
             *
             *  For example, German from Germany is formatted as `de-DE`,
             *  and U.S. English is formatted as `en-US`.
             */
            locale?: string;
            /**
             * Contact's birthdate, formatted as `"YYYY-MM-DD"`.
             *
             *  Example: `"2020-03-15"` for March 15, 2020.
             */
            birthdate?: string;
            /**
             * **Deprecated.** Use `profilePicture` instead.
             */
            picture: Contacts.Picture;
            /**
             * List of up to 50 email addresses.
             */
            emails?: Contacts.Email[];
            /**
             * List of up to 50 phone numbers.
             */
            phones?: Contacts.Phone[];
            /**
             * List of up to 50 addresses.
             */
            addresses?: Contacts.Address[];
            /**
             * List of contact label keys.
             * [Contact labels](https://support.wix.com/en/article/adding-labels-to-contacts-in-your-contact-list)
             * help categorize contacts.
             *
             *
             *
             *
             * Label keys must exist to be added to the contact.
             * Contact labels can be created or retrieved with
             * [`findOrCreateLabel()`](wix-crm-backend/contacts/findorcreatelabel)
             * or
             * [`queryLabels()`](wix-crm-backend/contacts/queryLabels).
             *
             */
            labelKeys?: string[];
            /**
             * Set of key-value pairs.
             *
             *
             *
             * Contact's
             * [extended fields](wix-crm-backend/contacts/introduction#about-extended-fields),
             * which allow you to store additional information about your contacts.
             *
             * To view or create extended fields, use
             * [`findOrCreateExtendedField()`](wix-crm-backend/contacts/findorcreateextendedfield),
             * [`getExtendedField()`](wix-crm-backend/contacts/getextendedfield), or
             * [`queryExtendedFields()`](wix-crm-backend/contacts/queryextendedfields).
             *
             */
            extendedFields: any;
            /**
             * Contact's profile picture URL.
             */
            profilePicture?: string;
        };
        /**
         * Label that was found or created.
         */
        type Label = {
            /**
             * Label key.
             *
             * `key` is generated when the label is created
             * and cannot be modified, even if `displayName` changes.
             */
            key: string;
            /**
             * Label display name shown in the Dashboard.
             */
            displayName: string;
            /**
             * Label type.
             *
             *
             *
             *
             * One of:
             *
             * - `"SYSTEM"`: The label is a predefined system label for the Contact List.
             * - `"USER_DEFINED"`: The label was created by a site contributor or app.
             * - `"WIX_APP_DEFINED"`: The label was created by a Wix app.
             *
             */
            labelType: string;
            /**
             * Date and time the label was created.
             */
            _createdDate: Date;
            /**
             * Date and time the label was last updated.
             */
            _updatedDate: Date;
            /**
             *
             *
             *
             * Label [namespace](wix-crm-backend/contacts/introduction#the-namespace-and-key-properties-in-labels-and-extended-fields).
             *
             *
             * Labels created by site contributors or 3rd-party apps
             * are automatically assigned to the `custom` namespace.
             */
            namespace: string;
        };
        /**
         * List of labels.
         */
        type LabelList = {
            /**
             * List of labels.
             */
            items: Contacts.Label[];
            /**
             * Metadata for the page of results.
             */
            pagingMetadata: Contacts.PagingMetadata;
        };
        /**
         * Details about the contact's last action in the site.
         */
        type LastActivity = {
            /**
             * Date and time of the last action.
             */
            activityDate: Date;
            /**
             * Contact's last action in the site.
             *
             *
             *
             *
             * Some possible values:
             * `"GENERAL"`, `"CONTACT_CREATED"`, `"MEMBER_LOGIN"`, `"MEMBER_REGISTER"`,
             * `"MEMBER_STATUS_CHANGED"`, `"FORM_SUBMITTED"`, `"INBOX_FORM_SUBMITTED"`,
             * `"INBOX_PAYMENT_REQUEST_PAID"`, `"INBOX_MESSAGE_TO_CUSTOMER"`,
             * `"INBOX_MESSAGE_FROM_CUSTOMER"`, `"NEWSLETTER_SUBSCRIPTION_FORM_SUBMITTED"`,
             * `"NEWSLETTER_SUBSCRIPTION_UNSUBSCRIBE"`, `"ECOM_PURCHASE"`,
             * `"ECOM_CART_ABANDON"`, `"ECOM_CHECKOUT_BUYER"`, `"BOOKINGS_APPOINTMENT"`,
             * `"HOTELS_RESERVATION"`, `"HOTELS_PURCHASE"`, `"HOTELS_CONFIRMATION"`,
             * `"HOTELS_CANCEL"`, `"VIDEO_PURCHASE"`, `"VIDEO_RENT"`,
             * `"CASHIER_BUTTON_PURCHASE"`, `"ARENA_NEW_LEAD"`, `"EVENTS_RSVP"`,
             * `"INVOICE_PAY"`, `"INVOICE_OVERDUE"`, `"PRICE_QUOTE_ACCEPT"`,
             * `"PRICE_QUOTE_EXPIRE"`, `"RESTAURANTS_ORDER"`, `"RESTAURANTS_RESERVATION"`,
             * `"SHOUTOUT_OPEN"`, `"SHOUTOUT_CLICK"`, `"CONTACT_MERGED"`.
             *
             */
            activityType: string;
        };
        /**
         * Paging options.
         */
        type ListOptions = {
            /**
             * Number of items to return.
             *
             *  Defaults to `100`.
             */
            limit?: number;
            /**
             * Number of items to skip in the current sort order.
             *
             *  Defaults to `0`.
             */
            skip?: number;
            /**
             * Sorting options.
             */
            sort?: Contacts.SortingOptions;
            /**
             * When `true`, prevents permission checks from running for the operation. Defaults to `false`.
             */
            suppressAuth?: boolean;
        };
        /**
         * Contact's first and last name.
         */
        type Name = {
            /**
             * Contact's first name.
             */
            first?: string;
            /**
             * Contact's last name.
             */
            last?: string;
        };
        /**
         * Contact creation options.
         */
        type Options = {
            /**
             * Controls whether the call will succeed
             * if the new contact information contains an email already used by another contact.
             *
             * If set to `true`,
             * the call will succeed even if an email address is used by another contact.
             * If set to `false`,
             * the call will fail if an email address is used by another contact.
             *
             * Defaults to `false`.
             */
            allowDuplicates?: boolean;
            /**
             * When `true`, prevents permission checks from running for the operation. Defaults to `false`.
             */
            suppressAuth?: boolean;
        };
        /**
         * Metadata for the page of results.
         */
        type PagingMetadata = {
            /**
             * Number of items returned.
             */
            length: number;
            /**
             * Number of items that matched the query.
             */
            totalCount: number;
            /**
             * Indicates if `total` calculation timed out before the response was sent.
             *  Typically this happens if there is a large set of results.
             */
            tooManyToCount: boolean;
        };
        type Phone = {
            /**
             * Phone ID.
             */
            _id: string;
            /**
             * Phone type.
             *
             *
             *
             *
             * `"UNTAGGED"` is shown as "Other" in the Contact List.
             *
             * One of:
             *
             * - `"UNTAGGED"`
             * - `"MAIN"`
             * - `"HOME"`
             * - `"MOBILE"`
             * - `"WORK"`
             * - `"FAX"`
             *
             */
            tag: string;
            /**
             * [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.
             */
            countryCode?: string;
            /**
             * Phone number.
             */
            phone: string;
            /**
             * [ITU E.164-formatted](https://www.itu.int/rec/T-REC-E.164/)
             *  phone number.
             *  Automatically generated using `phone` and `countryCode`,
             *  as long as both of those values are valid.
             */
            e164Phone?: string;
            /**
             * Whether this is the contact's primary phone number.
             *  When changing `primary` to `true` for a phone,
             *  the contact's other phones become `false`.
             */
            primary: boolean;
        };
        type PhoneInfo = {
            /**
             * Phone type.
             *
             *
             *
             *
             * `"UNTAGGED"` is shown as "Other" in the Contact List.
             *
             * One of:
             *
             * - `"UNTAGGED"`
             * - `"MAIN"`
             * - `"HOME"`
             * - `"MOBILE"`
             * - `"WORK"`
             * - `"FAX"`
             *
             */
            tag?: string;
            /**
             * [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.
             */
            countryCode?: string;
            /**
             * Phone number.
             */
            phone?: string;
            /**
             * Whether this is the contact's primary phone number.
             *  When changing `primary` to `true` for a phone,
             *  the contact's other phones become `false`.
             */
            primary?: boolean;
        };
        /**
         * todo
         */
        type Picture = {
            /**
             * **Deprecated.** Use `profilePicture` instead.
             */
            image?: string;
            /**
             * **Deprecated.**
             */
            imageProvider?: string;
        };
        /**
         * Contact's primary phone and email.
         */
        type PrimaryInfo = {
            /**
             * Primary email address.
             *
             *
             *
             *
             * This property reflects the email address in `contactInfo.emails`
             * where `primary` is `true`.
             *
             */
            email?: string;
            /**
             * Primary phone number.
             *
             *
             *
             *
             * This property reflects the phone number in `contactInfo.phones`
             * where `primary` is `true`.
             *
             */
            phone?: string;
        };
        /**
         * Sorting options.
         */
        type SortingOptions = {
            /**
             * Name of the field to sort by.
             */
            fieldName?: string;
            /**
             * Sort order.
             *
             *
             *
             *
             * One of:
             *
             * - `"ASC"`: Ascending order
             * - `"DESC"`: Descending order
             *
             * Defaults to `"ASC"`.
             *
             */
            order?: string;
        };
        /**
         * Details about the contact's source.
         */
        type Source = {
            /**
             * Source type.
             *
             *
             * Some possible values:
             * `"OTHER"`, `"ADMIN"`, `"WIX_APP"`, `"IMPORT"`, `"THIRD_PARTY"`,
             * `"WIX_BOOKINGS"`, `"WIX_CHAT"`, `"WIX_EMAIL_MARKETING"`, `"WIX_EVENTS"`,
             * `"WIX_FORMS"`, `"WIX_GROUPS"`, `"WIX_HOTELS"`, `"WIX_MARKET_PLACE"`,
             * `"WIX_MUSIC"`, `"WIX_RESTAURANTS"`, `"WIX_SITE_MEMBERS"`, `"WIX_STORES"`.
             *
             */
            sourceType: string;
            /**
             * App ID, if the contact was created by an app.
             */
            appId: string;
        };
        /**
         * Street address object, with number and name in separate fields.
         */
        type StreetAddress = {
            /**
             * Street number.
             */
            number: string;
            /**
             * Street name.
             */
            name: string;
        };
        /**
         * Street address object, with number and name in separate fields.
         */
        type StreetAddressInfo = {
            /**
             * Street number.
             */
            number?: string;
            /**
             * Street name.
             */
            name?: string;
        };
        /**
         * Contains functionality for refining a contacts query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#)
         */
        interface ContactsQueryBuilder {
            /**
             * Adds an `and` condition to the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#and)
             */
            and(query: Contacts.ContactsQueryBuilder): Contacts.ContactsQueryBuilder;
            /**
             * Adds a sort to a query, sorting by the specified properties in ascending order.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#ascending)
             */
            ascending(...propertyName: string[]): Contacts.ContactsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value is within a specified range.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#between)
             */
            between(propertyName: string, rangeStart: Date, rangeEnd: Date): Contacts.ContactsQueryBuilder;
            /**
             * Adds a sort to a query, sorting by the specified properties in descending order.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#descending)
             */
            descending(...propertyName: string[]): Contacts.ContactsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value equals the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#eq)
             */
            eq(propertyName: string, value: any): Contacts.ContactsQueryBuilder;
            /**
             * Returns the items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#find)
             */
            find(options?: Contacts.AuthOptions): Promise<Contacts.ContactsQueryResult>;
            /**
             * Refines a query to match items whose specified property value is greater than or equal to the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#ge)
             */
            ge(propertyName: string, value: Date): Contacts.ContactsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value is greater than the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#gt)
             */
            gt(propertyName: string, value: Date): Contacts.ContactsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value contains all of the specified values.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#hasAll)
             */
            hasAll(propertyName: string, values: string[]): Contacts.ContactsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value contains any of the specified values.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#hasSome)
             */
            hasSome(propertyName: string, values: string[]): Contacts.ContactsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value is less than or equal to the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#le)
             */
            le(propertyName: string, value: Date): Contacts.ContactsQueryBuilder;
            /**
             * Limits the number of items the query returns.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#limit)
             */
            limit(limit: string): Contacts.ContactsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value is less than the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#lt)
             */
            lt(propertyName: string, value: Date): Contacts.ContactsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value does not equal the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#ne)
             */
            ne(propertyName: string, value: any): Contacts.ContactsQueryBuilder;
            /**
             * Adds an `not` condition to the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#not)
             */
            not(query: Contacts.ContactsQueryBuilder): Contacts.ContactsQueryBuilder;
            /**
             * Adds an `or` condition to the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#or)
             */
            or(query: Contacts.ContactsQueryBuilder): Contacts.ContactsQueryBuilder;
            /**
             * Sets the number of items to skip before returning query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#skip)
             */
            skip(skip: string): Contacts.ContactsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value starts with a specified string.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#startsWith)
             */
            startsWith(propertyName: string, value: string): Contacts.ContactsQueryBuilder;
        }
        /**
         * The results of a contacts query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryResult.html#)
         */
        interface ContactsQueryResult {
            /**
             * Returns the items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryResult.html#items)
             */
            readonly items: Contacts.Contact[];
            /**
             * Returns the number of items in the current results page.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryResult.html#length)
             */
            readonly length: number;
            /**
             * Returns the query page size.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryResult.html#pageSize)
             */
            readonly pageSize: number;
            /**
             * Returns the `ContactsQueryBuilder` object used to get the current results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryResult.html#query)
             */
            readonly query: Contacts.ContactsQueryBuilder;
            /**
             * Indicates if the query has more results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryResult.html#hasNext)
             */
            hasNext(): boolean;
            /**
             * Indicates if the query has previous results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryResult.html#hasPrev)
             */
            hasPrev(): boolean;
            /**
             * Retrieves the next page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryResult.html#next)
             */
            next(): Promise<Contacts.ContactsQueryResult>;
            /**
             * Retrieves the previous page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryResult.html#prev)
             */
            prev(): Promise<Contacts.ContactsQueryResult>;
        }
        /**
         * Contains functionality for refining an extended fields query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ExtendedFieldsQueryBuilder.html#)
         */
        interface ExtendedFieldsQueryBuilder {
            /**
             * Adds a sort to a query, sorting by the specified properties in ascending order.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ExtendedFieldsQueryBuilder.html#ascending)
             */
            ascending(...propertyName: string[]): Contacts.ExtendedFieldsQueryBuilder;
            /**
             * Adds a sort to a query, sorting by the specified properties in descending order.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ExtendedFieldsQueryBuilder.html#descending)
             */
            descending(...propertyName: string[]): Contacts.ExtendedFieldsQueryBuilder;
            /**
             * Returns the items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ExtendedFieldsQueryBuilder.html#find)
             */
            find(options?: Contacts.AuthOptions): Promise<Contacts.ExtendedFieldsQueryResult>;
            /**
             * Limits the number of items the query returns.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ExtendedFieldsQueryBuilder.html#limit)
             */
            limit(limit: string): Contacts.ExtendedFieldsQueryBuilder;
            /**
             * Sets the number of items to skip before returning query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ExtendedFieldsQueryBuilder.html#skip)
             */
            skip(skip: string): Contacts.ExtendedFieldsQueryBuilder;
        }
        /**
         * The results of a contacts query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ExtendedFieldsQueryResult.html#)
         */
        interface ExtendedFieldsQueryResult {
            /**
             * Returns the items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ExtendedFieldsQueryResult.html#items)
             */
            readonly items: Contacts.ExtendedField[];
            /**
             * Returns the number of items in the current results page.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ExtendedFieldsQueryResult.html#length)
             */
            readonly length: number;
            /**
             * Returns the query page size.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ExtendedFieldsQueryResult.html#pageSize)
             */
            readonly pageSize: number;
            /**
             * Returns the `ExtendedFieldsQueryBuilder` object used to get the current results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ExtendedFieldsQueryResult.html#query)
             */
            readonly query: Contacts.ExtendedFieldsQueryBuilder;
            /**
             * Indicates if the query has more results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ExtendedFieldsQueryResult.html#hasNext)
             */
            hasNext(): boolean;
            /**
             * Indicates if the query has previous results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ExtendedFieldsQueryResult.html#hasPrev)
             */
            hasPrev(): boolean;
            /**
             * Retrieves the next page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ExtendedFieldsQueryResult.html#next)
             */
            next(): Promise<Contacts.ExtendedFieldsQueryResult>;
            /**
             * Retrieves the previous page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ExtendedFieldsQueryResult.html#prev)
             */
            prev(): Promise<Contacts.ExtendedFieldsQueryResult>;
        }
        /**
         * Contains functionality for refining a labels query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.LabelsQueryBuilder.html#)
         */
        interface LabelsQueryBuilder {
            /**
             * Adds a sort to a query, sorting by the specified properties in ascending order.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.LabelsQueryBuilder.html#ascending)
             */
            ascending(...propertyName: string[]): Contacts.LabelsQueryBuilder;
            /**
             * Adds a sort to a query, sorting by the specified properties in descending order.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.LabelsQueryBuilder.html#descending)
             */
            descending(...propertyName: string[]): Contacts.LabelsQueryBuilder;
            /**
             * Returns the items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.LabelsQueryBuilder.html#find)
             */
            find(options?: Contacts.AuthOptions): Promise<Contacts.LabelsQueryResult>;
            /**
             * Limits the number of items the query returns.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.LabelsQueryBuilder.html#limit)
             */
            limit(limit: string): Contacts.LabelsQueryBuilder;
            /**
             * Sets the number of items to skip before returning query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.LabelsQueryBuilder.html#skip)
             */
            skip(skip: string): Contacts.LabelsQueryBuilder;
        }
        /**
         * The results of a contacts query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.LabelsQueryResult.html#)
         */
        interface LabelsQueryResult {
            /**
             * Returns the items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.LabelsQueryResult.html#items)
             */
            readonly items: Contacts.Label[];
            /**
             * Returns the number of items in the current results page.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.LabelsQueryResult.html#length)
             */
            readonly length: number;
            /**
             * Returns the query page size.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.LabelsQueryResult.html#pageSize)
             */
            readonly pageSize: number;
            /**
             * Returns the `LabelsQueryBuilder` object used to get the current results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.LabelsQueryResult.html#query)
             */
            readonly query: Contacts.LabelsQueryBuilder;
            /**
             * Indicates if the query has more results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.LabelsQueryResult.html#hasNext)
             */
            hasNext(): boolean;
            /**
             * Indicates if the query has previous results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.LabelsQueryResult.html#hasPrev)
             */
            hasPrev(): boolean;
            /**
             * Retrieves the next page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.LabelsQueryResult.html#next)
             */
            next(): Promise<Contacts.LabelsQueryResult>;
            /**
             * Retrieves the previous page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.LabelsQueryResult.html#prev)
             */
            prev(): Promise<Contacts.LabelsQueryResult>;
        }
        /**
         * Contains functionality for refining a contacts query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryBuilder.html#)
         */
        namespace ContactsQueryBuilder {
        }
        /**
         * The results of a contacts query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ContactsQueryResult.html#)
         */
        namespace ContactsQueryResult {
        }
        /**
         * Contains functionality for refining an extended fields query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ExtendedFieldsQueryBuilder.html#)
         */
        namespace ExtendedFieldsQueryBuilder {
        }
        /**
         * The results of a contacts query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.ExtendedFieldsQueryResult.html#)
         */
        namespace ExtendedFieldsQueryResult {
        }
        /**
         * Contains functionality for refining a labels query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.LabelsQueryBuilder.html#)
         */
        namespace LabelsQueryBuilder {
        }
        /**
         * The results of a contacts query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Contacts.LabelsQueryResult.html#)
         */
        namespace LabelsQueryResult {
        }
    }
    /**
     * Events that are fired by actions relating to site contacts.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Events.html#)
     */
    namespace Events {
        /**
         * An object representing a created card.
         */
        type CardCreatedEvent = {
            /**
             * ID of the card's workflow.
             */
            workflowId: string;
            /**
             * Name of the card's workflow.
             */
            workflowName: string;
            /**
             * ID of the card's phase.
             */
            phaseId: string;
            /**
             * Name of the card's phase.
             */
            phaseName: string;
            /**
             * The card that was created.
             */
            card: Workflows.Card;
        };
        /**
         * An object representing a moved card.
         */
        type CardMovedEvent = {
            /**
             * ID of the card's workflow.
             */
            workflowId: string;
            /**
             * Name of the card's workflow.
             */
            workflowName: string;
            /**
             * ID of the card's new phase.
             */
            newPhaseId: string;
            /**
             * Name of the card's new phase.
             */
            newPhaseName: string;
            /**
             * ID of the card's old phase.
             */
            previousPhaseId: string;
            /**
             * Name of the card's old phase.
             */
            previousPhaseName: string;
            /**
             * The card that was moved.
             */
            card: Workflows.Card;
        };
        /**
         * An object representing a moved card.
         */
        type CardRestoredEvent = {
            /**
             * ID of the workflow the card was restored to.
             */
            workflowId: string;
            /**
             * Name of the workflow the card was restored to.
             */
            workflowName: string;
            /**
             * ID of the phase the card was restored to.
             */
            phaseId: string;
            /**
             * Name of the phase the card was restored to.
             */
            phaseName: string;
            /**
             * The card that was restored.
             */
            card: Workflows.Card;
        };
        type ContactCreatedEvent = {
            /**
             * Event metadata.
             */
            metadata: Events.EventMetadata;
            /**
             * Created contact.
             */
            entity: Contacts.Contact;
        };
        type ContactDeletedEvent = {
            /**
             * Event metadata.
             */
            metadata: Events.UpdateAndDeleteMetadata;
        };
        type ContactMergedData = {
            /**
             * IDs of the source contacts.
             */
            sourceContactIds: string[];
            /**
             * ID of the target contact.
             */
            targetContactId: string;
            /**
             * Updated target contact.
             */
            targetContact: Contacts.Contact;
        };
        type ContactMergedEvent = {
            /**
             * Event metadata.
             */
            metadata: Events.EventMetadata;
            /**
             * Information about the source and target contacts.
             */
            data: Events.ContactMergedData;
        };
        type ContactUpdatedEvent = {
            /**
             * Event metadata.
             */
            metadata: Events.UpdateAndDeleteMetadata;
            /**
             * Updated contact.
             */
            entity: Contacts.Contact;
        };
        /**
         * Event metadata.
         */
        type EventMetadata = {
            /**
             * Event ID.
             */
            id: string;
            /**
             * Contact ID associated with the event.
             */
            entityId: string;
            /**
             * Event timestamp.
             */
            eventTime: string;
            /**
             * Whether the event was triggered as a result of a privacy regulation application
             * (for example, [GDPR](https://support.wix.com/en/article/gdpr-frequently-asked-questions)).
             * For advanced users.
             */
            triggeredByAnonymizeRequest?: boolean;
        };
        /**
         * An object representing an attachment to a Wix Form.
         */
        type FormAttachment = {
            /**
             * Name of the attachment.
             */
            name: string;
            /**
             * Type of attachment.
             * One of:
             *
             * + `"UNDEFINED"`
             * + `"DOCUMENT"`
             * + `"IMAGE"`
             * + `"VIDEO"`
             */
            type: string;
            /**
             * URL of the attachment.
             */
            url: string;
        };
        /**
         * An object representing a Wix Form field.
         */
        type FormField = {
            /**
             * Name of the field.
             */
            fieldName: string;
            /**
             * Value of the field.
             */
            fieldValue: string;
        };
        /**
         * An object representing a Wix Form.
         */
        type FormSubmitEvent = {
            /**
             * Contact ID of the site visitor submitting the Wix Form.
             */
            contactId: string;
            /**
             * Name of the Wix Form.
             */
            formName: string;
            /**
             * Date and time that the Wix Form was submitted.
             */
            submissionTime: Date;
            /**
             * Data submitted in the Wix Form. The object contains key:value pairs where the key is the field name and the value is the contents of the field.
             */
            submissionData: Events.FormField[];
            /**
             * The Wix Form's attachments.
             */
            attachments: Events.FormAttachment[];
        };
        /**
         * Event metadata.
         */
        type UpdateAndDeleteMetadata = {
            /**
             * Event ID.
             */
            id: string;
            /**
             * Contact ID associated with the event.
             */
            entityId: string;
            /**
             * Event timestamp.
             */
            eventTime: string;
            /**
             * If present and set to `"merge"`,
             * indicates the event was triggered by a merge.
             *
             * See [`onContactMerged()`](#onContactMerged) for information on handling
             * merge events.
             */
            originatedFrom?: string;
            /**
             * Whether the event was triggered as a result of a privacy regulation application
             * (for example, [GDPR](https://support.wix.com/en/article/gdpr-frequently-asked-questions)).
             * For advanced users.
             */
            triggeredByAnonymizeRequest?: boolean;
        };
    }
    /**
     * The Notifications API is used to send notifications to the site owner and contributors.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Notifications.html#)
     */
    namespace Notifications {
        /**
         * An object containing information about where to navigate when a notification is clicked.
         */
        type ActionTarget = {
            /**
             * URL to navigate to when the `actionTitle` text is clicked.
             */
            url?: string;
        };
        /**
         * An object representing notification options.
         */
        type NotificationOptions = {
            /**
             * Notification title. Only displayed on mobile and browser notifications. Max length: 512 characters.
             */
            title?: string;
            /**
             * Call to action text to be clicked on. When clicked, navigates to the `actionTarget` URL. Max length: 512 characters.
             */
            actionTitle?: string;
            /**
             * Where to navigate to when the `actionTitle` text is clicked.
             */
            actionTarget?: Notifications.ActionTarget;
            /**
             * Contributor that will receive the notifications, based on their assigned roles.
             *  One of:
             *
             *  + `"All_Contributors"`: All site contributors, including the site owner.
             *  + `"Owner"`: Only the site owner.
             */
            recipients?: Notifications.SiteContributors;
        };
        /**
         * An object containing information about which contributors will receive a notification.
         */
        type SiteContributors = {
            /**
             * Roles to receive the notification.
             * One of:
             *
             * + `"All_Contributors"`: All site contributors (default).
             * + `"Owner"`: Only the site owner.
             */
            role?: string;
        };
    }
    /**
     * The Tasks API is used to manage a site's tasks.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Tasks.html#)
     */
    namespace Tasks {
        /**
         * An object representing a task.
         */
        type Task = {
            /**
             * Unique task identifier.
             */
            _id: string;
            /**
             * Task title.
             */
            title: string;
            /**
             * Date the task is due.
             */
            dueDate: Date;
            /**
             * Unique identifier of the site contact
             *  that this task is linked to.
             */
            contactId: string;
            /**
             * Indicates whether the task has been
             *  completed.
             */
            isCompleted: boolean;
            /**
             * Running task version number. Each time an
             *  action is performed on a task its version number is incremented.
             */
            version: number;
            /**
             * Type of the task's creator. `"USER"`
             *  if the task was created using the site's dashboard. `"APP"` if the task was
             *  created using the [`createTask()`](#createTask) function or if it was created
             *  by an app installed on the site.
             */
            creatorType: string;
            /**
             * When `creatorType` is `"USER"`, the unique
             *  identifier of the user that created the task in the dashboard. Otherwise, `userId` is not
             *  present.
             */
            userId?: string;
            /**
             * When `creatorType` is `"APP"`, the unique
             *  identifier of the application that created the task. Otherwise, `applicationId` is not
             *  present.
             */
            applicationId?: string;
        };
        /**
         * An object representing information for creating or updating a task.
         */
        type TaskInfo = {
            /**
             * Task title.
             */
            title?: string;
            /**
             * Date the task is due.
             */
            dueDate?: Date;
            /**
             * Unique identifier of the site contact
             *  that this task is linked to.
             */
            contactId?: string;
        };
    }
    /**
     * The Triggered Emails API is used to send triggered emails to your site's contacts and members.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.TriggeredEmails.html#)
     */
    namespace TriggeredEmails {
        type TriggeredEmailOptions = {
            /**
             * An object with `key:value` pairs. Each
             *  `key` is a variable in the email template created in Triggered Emails, and its
             *  corresponding `value` is the value to insert into the template in place of the
             *  variable. The values must be strings.
             *
             * Example: `{ firstName: 'John', lastName: 'Doe' }`
             */
            variables: any;
        };
    }
    /**
     * The Workflows API is used to manage your site's
     * [workflows](https://support.wix.com/en/article/about-workflows).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-crm-backend.Workflows.html#)
     */
    namespace Workflows {
        /**
         * An object containing card information.
         */
        type Card = {
            /**
             * Unique card identifier.
             */
            id: string;
            /**
             * Name of the card.
             */
            name?: string;
            /**
             * Source that created the card.
             *
             *  Some possible values:
             *
             *  + `"Contacts"`
             *  + `"Corvid"`
             *  + `"Inbox"`
             *  + `"Invoices"`
             *  + `"Marketplace"`
             *  + `"Price Quotes"`
             *  + `"Wix Forms"`
             */
            source: string;
            /**
             * ID of the contact associated with the card.
             */
            contactId: string;
            /**
             * Date the card was created.
             */
            createdDate: Date;
            /**
             * Date the card was last updated.
             */
            updatedDate: Date;
            /**
             * ID of the phase which contains the card.
             */
            phaseId: string;
        };
        /**
         * An object containing a list of cards and pagination info.
         */
        type CardList = {
            /**
             * List of cards matching the list options.
             */
            items: Workflows.Card[];
            /**
             * Number of items in the current results page.
             */
            length: number;
            /**
             * Total number of cards in the specified workflow and phase.
             */
            totalCount: number;
            /**
             * Number of items returned per page with the current list options.
             */
            pageSize: number;
            /**
             * Total number of results pages.
             */
            totalPages: number;
            /**
             * Index of the current page. Indices are zero-based.
             */
            currentPage: number;
        };
        /**
         * An object contains ListCards request data.
         */
        type ListCardOptions = {
            /**
             * ID of phase to retrieve cards from. If omitted, will retrieve cards from all phases. Not to be used with `fetchOnlyArchived`.
             */
            phaseId?: string;
            /**
             * Whether to retrieve only archived cards. Not to be used with `phaseId`.
             */
            fetchOnlyArchived?: boolean;
            /**
             * Maximum number of cards to retrieve. Defaults to `50`.
             */
            limit?: number;
            /**
             * Number of cards to skip before the retrieved items. Defaults to `0`.
             */
            skip?: number;
            /**
             * Ordering options.
             */
            order?: Workflows.OrderOptions;
        };
        /**
         * An object containing options used when requesting a list of workflows or phases.
         */
        type ListOptions = {
            /**
             * Maximum number of items to retrieve. Defaults to `50` for phases and `100` for workflows.
             */
            limit?: number;
            /**
             * Number of items to skip before the retrieved items. Defaults to `0`.
             */
            skip?: number;
            /**
             * Ordering options.
             */
            order?: Workflows.OrderOptions;
        };
        /**
         * An object containing information used when moving a card.
         */
        type MoveCardOptions = {
            /**
             * ID of the phase to move the card to. If omitted, the card remains in the same phase.
             */
            newPhaseId?: string;
            /**
             * Position within the phase to move the card to. If omitted, the card is moved to the top of the phase.
             */
            newPosition?: number;
        };
        /**
         * An object containing information used when moving a phase.
         */
        type MovePhaseOptions = {
            /**
             * ID of the workflow to move the phase to.
             */
            workflowId: string;
            /**
             * Position within the workflow to move the phase to.
             */
            newPosition: number;
        };
        /**
         * An object containing sort order options.
         */
        type OrderOptions = {
            /**
             * Field to sort on.
             */
            field: string;
            /**
             * Order of sort. Either `"asc"` or `"desc"` (defaults to `"asc"`).
             */
            sort: string;
        };
        /**
         * An object containing phase information.
         */
        type Phase = {
            /**
             * Unique phase identifier.
             */
            id: string;
            /**
             * Name of the phase.
             */
            name: string;
        };
        /**
         * An object containing a list of phases and pagination info.
         */
        type PhaseList = {
            /**
             * List of phases matching the list options.
             */
            items: Workflows.Phase[];
            /**
             * Number of items in the current results page.
             */
            length: number;
            /**
             * Total number of phases in the specified workflow.
             */
            totalCount: number;
            /**
             * Number of items returned per page with the current list options.
             */
            pageSize: number;
            /**
             * Total number of results pages.
             */
            totalPages: number;
            /**
             * Index of the current page. Indices are zero-based.
             */
            currentPage: number;
        };
        /**
         * An object representing a workflow.
         */
        type Workflow = {
            /**
             * Workflow information.
             */
            workflowInfo: Workflows.WorkflowInfo;
            /**
             * ID of the win phase.
             */
            winPhaseId: string;
        };
        /**
         * An object containing information about a workflow.
         */
        type WorkflowInfo = {
            /**
             * Unique workflow identifier.
             */
            id: string;
            /**
             * Name of the workflow.
             */
            name: string;
            /**
             * Workflow description.
             */
            description?: string;
            /**
             * Date the workflow was created.
             */
            createdDate?: Date;
        };
        /**
         * An object containing a list of workflows and pagination info.
         */
        type WorkflowList = {
            /**
             * List of workflows matching the list options.
             */
            items: Workflows.WorkflowInfo[];
            /**
             * Number of items in the current results page.
             */
            length: number;
            /**
             * Total number of workflows in the site.
             */
            totalCount: number;
            /**
             * Number of items returned per page with the current list options.
             */
            pageSize: number;
            /**
             * Total number of results pages.
             */
            totalPages: number;
            /**
             * Index of the current page. Indices are zero-based.
             */
            currentPage: number;
        };
    }
}

// /types/common/wix-configs-backend.d.ts
/**
 * The wix-configs-backend module contains functionality for working with user-configured data in Velo package code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-configs-backend.html#)
 */
declare module 'wix-configs-backend' {
    /**
     * Retrieves the value of a specific key in a package's `config.json` file.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-configs-backend.html#getPackageConfig)
     */
    function getPackageConfig(key: string): Promise<any>;
}

// /types/common/wix-http-functions.d.ts
/**
 * HTTP functions are used to expose an API of your site's functionality.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.html#)
 */
declare module 'wix-http-functions' {
    /**
     * An object representing an incoming request received by a call to an HTTP function.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.html#wixHttpFunctionRequest)
     */
    const wixHttpFunctionRequest: WixHttpFunctionRequest;
    /**
     * Returns a response with status code 400 (Bad Request) and the information from the options parameter.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.html#badRequest)
     */
    function badRequest(options: WixHttpFunctionResponseOptions): WixHttpFunctionResponse;
    /**
     * Returns a response with status code 201 (Created) and the information from the options parameter.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.html#created)
     */
    function created(options: WixHttpFunctionResponseOptions): WixHttpFunctionResponse;
    /**
     * A function that responds to requests made with the HTTP DELETE method.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.html#delete)
     */
    /* Illegal function name 'delete' can't be used here
    function delete(request: WixHttpFunctionRequest): WixHttpFunctionResponse;
    */
    /**
     * Returns a response with status code 403 (Forbidden) and the information from the options parameter.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.html#forbidden)
     */
    function forbidden(options: WixHttpFunctionResponseOptions): WixHttpFunctionResponse;
    /**
     * A function that responds to requests made with the HTTP GET method.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.html#get)
     */
    function get(request: WixHttpFunctionRequest): WixHttpFunctionResponse;
    /**
     * Returns a response with status code 404 (Not Found) and the information from the options parameter.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.html#notFound)
     */
    function notFound(options: WixHttpFunctionResponseOptions): WixHttpFunctionResponse;
    /**
     * Returns a response with status code 200 (OK) and the information from the options parameter.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.html#ok)
     */
    function ok(options?: WixHttpFunctionResponseOptions): WixHttpFunctionResponse;
    /**
     * A function that responds to requests made with the HTTP OPTIONS method.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.html#options)
     */
    function options(request: WixHttpFunctionRequest): WixHttpFunctionResponse;
    /**
     * A function that responds to requests made with the HTTP POST method.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.html#post)
     */
    function post(request: WixHttpFunctionRequest): WixHttpFunctionResponse;
    /**
     * A function that responds to requests made with the HTTP PUT method.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.html#put)
     */
    function put(request: WixHttpFunctionRequest): WixHttpFunctionResponse;
    /**
     * Returns a response populated with the information from the options parameter.
     *  The `response()` function creates a custom response built with the
     *  information passed to the `options` parameter in a `WixHttpFunctionCustomResponseOptions`
     *  object.
     *
     *  Use the `response()` function to create a response to return from an HTTP
     *  function.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.html#response)
     */
    function response(options: WixHttpFunctionCustomResponseOptions): WixHttpFunctionResponse;
    /**
     * Returns a response with status code 500 (Internal Server Error) and the information from the options parameter.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.html#serverError)
     */
    function serverError(options: WixHttpFunctionResponseOptions): WixHttpFunctionResponse;
    /**
     * A function that responds to requests made with any HTTP method.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.html#use)
     */
    function use(request: WixHttpFunctionRequest): WixHttpFunctionResponse;
    /**
     * An object used to customize a response to an HTTP function call, including a HTTP response code you select.
     */
    type WixHttpFunctionCustomResponseOptions = {
        /**
         * The response's HTTP status code.
         */
        status?: number;
        /**
         * The response's body.
         */
        body?: string | Buffer | any;
        /**
         * The response's header fields. The `headers` property contains an object of `key:value` pairs where the `key` is the header field name and the `value` is the header field value.
         */
        headers?: any;
    };
    /**
     * An object used to set up a standard response to an HTTP function call, including a pre-set (unchangeable) HTTP response code.
     */
    type WixHttpFunctionResponseOptions = {
        /**
         * The response's body.
         */
        body?: string | Buffer | any;
        /**
         * The response's header fields. The `headers` property contains an object of `key:value` pairs where the `key` is the header field name and the `value` is the header field value.
         */
        headers?: any;
    };
    /**
     * An object representing an incoming request received by a call to an HTTP function.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionRequest.html#)
     */
    interface WixHttpFunctionRequest {
        /**
         * Returns the base URL of a call to an HTTP function.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionRequest.html#baseUrl)
         */
        readonly baseUrl: string;
        /**
         * Returns an object representing the body of the incoming call to an HTTP function.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionRequest.html#body)
         */
        readonly body: WixHttpFunctionRequest.WixHttpFunctionRequestBody;
        /**
         * Returns the function name of a call to an HTTP function.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionRequest.html#functionName)
         */
        readonly functionName: string;
        /**
         * Returns the HTTP header fields used in a call to an HTTP function.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionRequest.html#headers)
         */
        readonly headers: any;
        /**
         * Returns the IP address of the client who called the HTTP function.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionRequest.html#ip)
         */
        readonly ip: string;
        /**
         * Returns the HTTP method used in calling an HTTP function.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionRequest.html#method)
         */
        readonly method: string;
        /**
         * Returns the path of the URL used to call an HTTP function.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionRequest.html#path)
         */
        readonly path: string[];
        /**
         * Returns the query fields and values of the URL used to call an HTTP function.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionRequest.html#query)
         */
        readonly query: any;
        /**
         * Returns the full URL of a call to an HTTP function.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionRequest.html#url)
         */
        readonly url: string;
    }
    /**
     * An object representing a response to an HTTP function request.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionResponse.html#)
     */
    interface WixHttpFunctionResponse {
        /**
         * Sets or gets the body of the response as a string, object or binary buffer.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionResponse.html#body)
         */
        body: string | Buffer | any;
        /**
         * Sets or gets the HTTP response header fields.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionResponse.html#headers)
         */
        headers: any;
        /**
         * Sets or gets the HTTP status code of the response.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionResponse.html#status)
         */
        status: number;
    }
    /**
     * An object representing an incoming request received by a call to an HTTP function.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionRequest.html#)
     */
    namespace WixHttpFunctionRequest {
        /**
         * [Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionRequest.WixHttpFunctionRequestBody.html#)
         */
        interface WixHttpFunctionRequestBody {
            /**
             * Returns a Promise which resolves to the body of the call in binary as a Node.js [Buffer](https://nodejs.org/docs/latest-v14.x/api/buffer.html) object.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionRequest.WixHttpFunctionRequestBody.html#buffer)
             */
            buffer(): Promise<any>;
            /**
             * Returns a Promise which resolves to the body of the call as a JSON object.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionRequest.WixHttpFunctionRequestBody.html#json)
             */
            json(): Promise<any>;
            /**
             * Returns a Promise which resolves to the body of the call as a string.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionRequest.WixHttpFunctionRequestBody.html#text)
             */
            text(): Promise<string>;
        }
        /**
         * [Read more](https://www.wix.com/corvid/reference/wix-http-functions.WixHttpFunctionRequest.WixHttpFunctionRequestBody.html#)
         */
        namespace WixHttpFunctionRequestBody {
        }
    }
}

// /types/common/wix-chat-backend.d.ts
/**
 * The wix-chat-backend module contains functionality for working with the [Wix Chat](https://support.wix.com/en/article/about-wix-chat) application from backend code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-chat-backend.html#)
 */
declare module 'wix-chat-backend' {
    /**
     * Sends a chat message from the backend.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-chat-backend.html#sendMessage)
     */
    function sendMessage(messageInfo: MessageInfo): Promise<void>;
    /**
     * An object representing a chat message to be sent.
     */
    type MessageInfo = {
        /**
         * The content of the message.
         */
        messageText: string;
        /**
         * The ID of the channel to send the message to. Currently only IDs of business channels are supported.
         */
        channelId: string;
        /**
         * An object representing additional contextual message information included in a chat message. The site visitor does not see the metadata.
         */
        metadata?: any;
        /**
         * Indicates whether the message is sent from the visitor to the business. If `sendAsVisitor` is `true`, the message is sent from the site visitor to the business. If `sendAsVisitor` is `undefined` or `false`, the message is sent from the business to the site visitor. The default is `undefined`.
         */
        sendAsVisitor?: boolean;
    };
    /**
     * Events that are fired by actions relating to chat messages.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-chat-backend.Events.html#)
     */
    interface Events {
        /**
         * An event that fires when a chat message is sent to or from the business.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-chat-backend.Events.html#onMessage)
         */
        onMessage(event: Events.SendMessageEvent): void;
    }
    /**
     * Events that are fired by actions relating to chat messages.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-chat-backend.Events.html#)
     */
    namespace Events {
        /**
         * The content of a chat message.
         */
        type MessagePayload = {
            /**
             * Text of the chat message.
             */
            text: string;
        };
        /**
         * An object representing a chat message that was sent.
         */
        type SendMessageEvent = {
            /**
             * ID of the channel on which the message was sent.
             */
            channelId: string;
            /**
             * Direction of the message.
             * One of the following:
             *
             *  + `"VisitorToBusiness"`: From a site visitor to the business.
             *  + `"BusinessToVisitor"`: From the business to a site visitor.
             */
            direction: string;
            /**
             * Type of message. Currently only `TEXT` is supported.
             */
            type: string;
            /**
             * First 250 characters of the chat message. Currently only text is included in the summary.
             */
            summary: string;
            /**
             * The sender's member ID. For a message sent from the site's business, the site owner's member ID.
             */
            participantId: string;
            /**
             * Date and time the message was sent.
             */
            createdAt: Date;
            /**
             * Content of the message.
             * Currently only content of type text is included in the `payload`.
             */
            payload: Events.MessagePayload;
            /**
             * An object representing additional contextual message information included in a chat message. The site visitor does not see the metadata.
             */
            metadata?: any;
        };
    }
}

// /types/common/wix-captcha-backend.d.ts
/**
 * The wix-captcha-backend module contains functionality for working with the reCAPTCHA element from backend code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-captcha-backend.html#)
 */
declare module 'wix-captcha-backend' {
    /**
     * Authorizes the CAPTCHA token.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-captcha-backend.html#authorize)
     */
    function authorize(token: string): Promise<SuccessReport>;
    /**
     * An object representing a CAPTCHA authorization error message.
     */
    type ErrorReport = {
        /**
         * Error message.
         */
        error: string;
    };
    /**
     * An object representing a CAPTCHA authorization success message.
     */
    type SuccessReport = {
        /**
         * Value is `true` when authorization is successful.
         */
        success: boolean;
    };
}

// /types/common/wix-bookings-backend.d.ts
/**
 * The wix-bookings-backend module contains functionality for working with bookings from backend code.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.html#)
 */
declare module 'wix-bookings-backend' {
    /**
     * The Bookings API provides functionality for updating and managing bookings created in the Wix Bookings app.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.html#bookings)
     */
    const bookings: Bookings;
    /**
     * [Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.html#events)
     */
    const events: Events;
    /**
     * The Resources API provides functionality for creating and managing wix-bookings resources.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.html#resources)
     */
    const resources: Resources;
    /**
     * The Bookings API provides functionality for creating and managing wix-bookings sessions.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.html#sessions)
     */
    const sessions: Sessions;
    /**
     * Custom [address](https://www.wix.com/velo/reference/$w/addressinput/value), used when location_type is `"OWNER_CUSTOM"`.
     */
    type Address = {
        /**
         * String containing the full address of this location.
         */
        formatted: string;
        /**
         * Main address line, usually street and number, as free text.
         */
        addressLine1?: string;
        /**
         * Free text providing more detailed address info. Usually contains Apt, Suite, and Floor.
         */
        addressLine2: string;
        /**
         * Street name, number and apartment number.
         */
        streetAddress?: StreetAddress;
        /**
         * Coordinates of the physical address.
         */
        location: AddressLocation;
        /**
         * City name.
         */
        city: string;
        /**
         * Subdivision. Usually state, region, prefecture or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2).
         */
        subdivision: string;
        /**
         * Country code.
         */
        country: string;
        /**
         * Zip/postal code.
         */
        postalCode: string;
    };
    /**
     * Coordinates of the physical address.
     */
    type AddressLocation = {
        /**
         * Address latitude.
         */
        latitude: number;
        /**
         * Address longitude.
         */
        longitude: number;
    };
    /**
     * Coordinates of the physical address.
     */
    type AddressLocationInfo = {
        /**
         * Address latitude.
         */
        latitude?: number;
        /**
         * Address longitude.
         */
        longitude?: number;
    };
    /**
     * Attendance information.
     */
    type AttendanceInfo = {
        /**
         * Whether the booked contact attended the session.
         */
        attendanceStatus: boolean;
        /**
         * Number of attendees that attended the session. This can be greater than 1 when the booking is made for a group of people.
         */
        numberOfAttendees: number;
    };
    /**
     * The final price, currency, down payment, and amount received.
     */
    type Balance = {
        /**
         * Required payment amount, currency, and any down payment required.
         */
        finalPrice: Price;
        /**
         * Current total amount paid.
         */
        amountReceived: string;
    };
    /**
     * An object describing the entity that was booked.
     */
    type BookedEntity = {
        /**
         * Price options offered to book this session at the time of booking.
         */
        rate: Rate;
        /**
         * Location of the session.
         */
        location: Location;
        /**
         * List of tags for the booking.
         */
        tags: string[];
        /**
         * ID of the booked schedule.
         */
        scheduleId: string;
        /**
         * Session title at the time of booking.
         */
        title: string;
        /**
         * Start and end time of the booked sessions.
         */
        singleSession?: SingleSession;
        /**
         * First start and last end time of the booked sessions.
         */
        setOfSessions?: SetOfSessions;
        /**
         * ID of the booked service.
         */
        serviceId: string;
        /**
         * Online conference information.
         */
        onlineConference?: OnlineConference;
    };
    type BookedResource = {
        /**
         * Booked resource ID.
         */
        _id: string;
        /**
         * Resource's name at the time of booking.
         */
        name: string;
        /**
         * Resource's email at the time of booking.
         */
        email: string;
    };
    type Booking = {
        /**
         * Booking ID.
         */
        _id: string;
        /**
         * An object describing the entity that was booked.
         */
        bookedEntity: BookedEntity;
        /**
         * List of booked resources. Currently, only one is supported. The booked resource would be the staff-member giving the session.
         */
        bookedResources: BookedResource[];
        /**
         * Form information submitted when booking. FormInfo contains contact details, participants, and other form fields, set up for the service.
         */
        formInfo?: Form;
        /**
         * Payment Details.
         */
        paymentDetails?: PaymentDetails;
        /**
         * Booking status.
         *
         *  One of:
         *  - `"PENDING_CHECKOUT"` The booking is waiting to be checked out.
         *  - `"CONFIRMED"` The booking has beed approved by the owner.
         *  - `"CANCELED"` The booking has been canceled.
         *  - `"PENDING"` The booking has been created.
         *  - `"PENDING_APPROVAL"` The booking is waiting for the owner to approve or decline.
         *  - `"DECLINED"` The booking was declined by the owner.
         *
         */
        status: string;
        /**
         * Attendance information.
         */
        attendanceInfo: AttendanceInfo;
        /**
         * An object describing the platform and application that made the booking.
         */
        bookingSource: BookingSource;
        /**
         * External ID provided by the client app on creation.
         */
        externalUserId?: string;
        /**
         * Date and time the booking was created.
         */
        _createdDate: Date;
    };
    /**
     * An object describing the platform and application that made the booking.
     */
    type BookingSource = {
        /**
         * Platform from which a booking was created
         *
         *  One of:
         *  - `"WEB"` Desktop browser.
         *  - `"MOBILE_APP"` Mobile application.
         *
         */
        platform: string;
        /**
         * Actor that created this booking.
         *
         * One of:
         *  - `"BUSINESS"`
         *  - `"CUSTOMER"`
         *
         */
        actor: string;
        /**
         * Wix site ID of the application that created this booking.
         */
        appDefId: string;
        /**
         * Name of the application that created this booking, as saved in Wix-dev-center at the time of booking.
         */
        appName: string;
    };
    /**
     * An object describing the business location.
     */
    type BusinessLocation = {
        /**
         * ID of the location.
         */
        _id: string;
        /**
         * Display name of the location.
         */
        name: string;
        /**
         * Free text describing the location.
         */
        description: string;
        /**
         * Status of the location. Default is `"ACTIVE"`.
         * One of:
         *  + `"ACTIVE"`
         *  + `"IN_ACTIVE"`
         */
        status: string;
        /**
         * Type of the location.
         * One of:
         *  + `"UNKNOWN"`
         *  + `"BRANCH"`
         *  + `"OFFICES"`
         *  + `"RECEPTION"`
         *  + `"HEADQUARTERS"`
         */
        locationType: string;
        /**
         * Fax number.
         */
        fax: string;
        /**
         * Time zone.
         */
        timeZone: string;
        /**
         * Email address.
         */
        email: string;
        /**
         * Phone number.
         */
        phone: string;
        /**
         * Address.
         */
        address: Address;
        /**
         * Location revision, represents the number of changes to the location.
         */
        revision: string;
        /**
         * Whether the location is archived.
         * Archived locations can't be updated.
         */
        archived: boolean;
        /**
         * Whether this is the default location.
         * There can only be one default location per site. Changes to the default location are made on the **Site Properties** page of the dashboard.
         * The default location can't be deleted.
         */
        default: boolean;
    };
    /**
     * An object specifying the start date and time of the session. If the session is a recurring session, `start` must contain a `localDateTime`.
     */
    type CalendarDateTime = {
        /**
         * UTC date-time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)) format. If a timezone offset is specified, the time is converted to UTC. For example, if you specify  `new Date('2021-01-06T16:00:00.000-07:00')`, the stored value will be `"2021-01-06T23:00:00.000Z"`.
         * Required if `localDateTime` is not specified.
         * If `localDateTime` is specified, `timestamp` is calculated as `localDateTime`, using the business's timezone.
         */
        timestamp: Date;
        /**
         * An object containing the local date and time for the business's timezone.
         */
        localDateTime: LocalDateTime;
    };
    /**
     * An object specifying the start date and time of the session. If the session is a recurring session, `start` must contain a `localDateTime`.
     */
    type CalendarDateTimeInfo = {
        /**
         * UTC date-time in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)) format. If a timezone offset is specified, the time is converted to UTC. For example, if you specify  `new Date('2021-01-06T16:00:00.000-07:00')`, the stored value will be `"2021-01-06T23:00:00.000Z"`.
         * Required if `localDateTime` is not specified.
         * If `localDateTime` is specified, `timestamp` is calculated as `localDateTime`, using the business's timezone.
         */
        timestamp?: Date;
        /**
         * An object containing the local date and time for the business's timezone.
         */
        localDateTime?: LocalDateTimeInfo;
    };
    /**
     * Contact details of the customer making the booking.
     */
    type ContactDetails = {
        /**
         * Contact's ID.
         */
        contactId: string;
        /**
         * Contact's first name. When populated from a standard booking form, this property corresponds to the **Name** field.
         */
        firstName: string;
        /**
         * Contact's last name.
         */
        lastName: string;
        /**
         * Contact's email, used to create a new contact or get existing one from teh [CRM API](wix-crm/introduction).
         */
        email: string;
        /**
         * Contact's phone number.
         */
        phone: string;
        /**
         * Contact's time zone.
         */
        timeZone: string;
        /**
         * Contact's country in [ISO 3166-1 alpha-2 code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
         */
        countryCode: string;
        /**
         * Custom [address](https://www.wix.com/velo/reference/$w/addressinput/value), used when location_type is `"OWNER_CUSTOM"`.
         */
        address: Address;
    };
    /**
     * Coupon details, if a coupon was used to pay for the booking.
     */
    type CouponDetails = {
        /**
         * Coupon name.
         */
        couponName: string;
        /**
         * Coupon code.
         */
        couponCode: string;
        /**
         * Coupon discount amount.
         */
        couponDiscount: string;
        /**
         * Coupon ID.
         */
        couponId: string;
    };
    type CustomFormField = {
        /**
         * ID of the form field as defined in the form.
         */
        _id: string;
        /**
         * Value that was submitted for this field.
         */
        value: string;
        /**
         * Form field's label at the time of submission.
         */
        label: string;
        /**
         *
         * One of:
         *  - `"SHORT_TEXT"`
         *  - `"LONG_TEXT"`
         *  - `"CHECK_BOX"`
         *
         */
        valueType: string;
    };
    type CustomFormFieldInfo = {
        /**
         * ID of the form field as defined in the form.
         */
        _id?: string;
        /**
         * Value that was submitted for this field.
         */
        value?: string;
        /**
         *
         * One of:
         *  - `"SHORT_TEXT"`
         *  - `"LONG_TEXT"`
         *  - `"CHECK_BOX"`
         *
         */
        valueType?: string;
    };
    /**
     * Form information submitted when booking. FormInfo contains contact details, participants, and other form fields, set up for the service.
     */
    type Form = {
        /**
         * Contact details of the customer making the booking.
         */
        contactDetails?: ContactDetails;
        /**
         * List of rates and the number of participants for each rate.
         */
        paymentSelection: PaymentSelection[];
        /**
         * Additional custom fields submitted with the form.
         */
        additionalFields?: CustomFormField[];
    };
    type LinkedResourceScheduleInfo = {
        /**
         * Schedule ID.
         */
        scheduleId?: string;
    };
    /**
     * An object containing the local date and time for the business's timezone.
     */
    type LocalDateTime = {
        /**
         * Year. 4-digit format.
         */
        year: number;
        /**
         * Month number, from 1-12.
         */
        monthOfYear: number;
        /**
         * Day of the month, from 1-31.
         */
        dayOfMonth: number;
        /**
         * Hour of the day in 24-hour format, from 0-23.
         */
        hourOfDay: number;
        /**
         * Minute, from 0-59.
         */
        minutesOfHour: number;
    };
    /**
     * An object containing the local date and time for the business's timezone.
     */
    type LocalDateTimeInfo = {
        /**
         * Year. 4-digit format.
         */
        year?: number;
        /**
         * Month number, from 1-12.
         */
        monthOfYear?: number;
        /**
         * Day of the month, from 1-31.
         */
        dayOfMonth?: number;
        /**
         * Hour of the day in 24-hour format, from 0-23.
         */
        hourOfDay?: number;
        /**
         * Minute, from 0-59.
         */
        minutesOfHour?: number;
    };
    /**
     * The location of the session.
     */
    type Location = {
        /**
         * Location type.
         *
         *  One of:
         *  - `"OWNER_BUSINESS"` The business address as set in the site’s general settings.
         *  - `"OWNER_CUSTOM"` The address as set when creating the service.
         *  - `"CUSTOM"` The address set for the individual session.
         *
         */
        locationType: string;
        /**
         * An object describing the business location.
         * Valid when `locationType` is `"OWNER_BUSINESS"`. Defaults to the business's default location.
         */
        businessLocation: BusinessLocation;
        /**
         * Custom [address](https://www.wix.com/velo/reference/$w/addressinput/value), used when location_type is `"OWNER_CUSTOM"`.
         */
        customAddress: Address;
    };
    /**
     * Online conference information.
     */
    type OnlineConference = {
        /**
         * Participant url.
         */
        guestUrl: string;
        /**
         * Online conference provider identifier.
         */
        providerId: string;
        /**
         * Online conference password.
         */
        password: string;
        /**
         * Online conference description.
         */
        description: string;
    };
    /**
     * Authorization options.
     */
    type Options = {
        /**
         * When `true`, prevents permission checks from running for the operation. Defaults to `false`.
         */
        suppressAuth?: boolean;
    };
    /**
     * Plan details.
     */
    type PaidPlan = {
        /**
         * Order ID when the Pricing Plan was purchased.
         */
        orderId: string;
        /**
         * Benefit ID.
         */
        benefitId: string;
        /**
         * ID of the pricing plan.
         */
        planId: string;
    };
    /**
     * Pricing plan details, if a pricing plan was used to pay for the booking.
     */
    type PaidPlanDetails = {
        /**
         * Plan details.
         */
        plan: PaidPlan;
        /**
         * Plan name.
         */
        planName: string;
        /**
         * Transaction ID created in the Pricing Plans service when the member redeemed a benefit to pay for this booking.
         */
        transactionId: string;
    };
    /**
     * Whether to notify the participants about the booking confirmation, and an optional custom message.
     */
    type ParticipantNotificationInfo = {
        /**
         * Whether to notify participants about the change.
         */
        notifyParticipants?: boolean;
        /**
         * Custom message to send to the participants.
         */
        message?: string;
    };
    /**
     * Payment Details.
     */
    type PaymentDetails = {
        /**
         * Checkout ID.
         */
        _id: string;
        /**
         * Final price, currency, down payment, and amount received.
         */
        balance: Balance;
        /**
         * Coupon details, if a coupon was used to pay for the booking.
         */
        couponDetails: CouponDetails;
        /**
         * Checkout current state.
         *
         *  One of:
         *  - `"COMPLETE"` Amount paid in full.
         *  - `"PENDING_CASHIER"` An online payment is in progress and awaiting a response.
         *  - `"REJECTED"` The checkout request was rejected by the online payment process.
         *  - `"READY"` All online checkout requirements were met. For example, when the service uses pay in person, or a partial or down payment was paid online.
         *  - `"CANCELED"`  Checkout canceled.
         *  - `"REFUNDED"` When using Pricing Plans, if the booking was canceled, it will be automatically refunded.
         *  - `"PENDING_MERCHANT"` An online payment was made, but the owner has not set up the necessary details.
         *  - `"WIX_PAY_FAILURE"` Online payment failure.
         *  - `"PENDING_MARK_AS_PAID"` Offline transaction. The transaction will be complete when explicitly marked as paid.
         *  - `"PENDING_BUYER"`  The transaction started, but is waiting for confirmation on the buyer's side. This can be due to credit or fraud checking on the provider's side, a long bank transfer, or similar processes.
         *
         */
        state: string;
        /**
         * In case of wix-pay service, holds all payment history for a booking.
         */
        wixPayMultipleDetails: WixPayDetails[];
        /**
         * Pricing plan details, if a pricing plan was used to pay for the booking.
         */
        pricingPlanDetails: PaidPlanDetails;
    };
    type PaymentSelection = {
        /**
         * Label corresponding to the booking rate. Default is free/custom.
         */
        rateLabel: string;
        /**
         * Number of participants for this rate.
         */
        numberOfParticipants: number;
    };
    type PaymentSelectionInfo = {
        /**
         * Label corresponding to the booking rate. Default is free/custom.
         */
        rateLabel?: string;
        /**
         * Number of participants for this rate.
         */
        numberOfParticipants?: number;
    };
    /**
     * `key` of type string, `value` of type object
     */
    type Price = {
        /**
         * Required payment amount.
         */
        amount: string;
        /**
         * Currency in which the amount is quoted.
         */
        currency: string;
        /**
         * Amount of a down payment or deposit as part of the transaction.
         */
        downPayAmount: string;
    };
    /**
     * Price options offered to book this session at the time of booking.
     */
    type Rate = {
        /**
         * Set of key-value pairs.Mapping between a named price option, for example, adult or child prices, and the price, currency, and down payment amount.
         */
        labeledPriceOptions: any;
        /**
         * Textual price information used when **Price Per Session** is set to **Custom Price** in the app's service details page.
         */
        priceText: string;
    };
    /**
     * Resource details.
     */
    type Resource = {
        /**
         * Resource ID.
         */
        _id: string;
        /**
         * Resource name.
         */
        name: string;
        /**
         * Resource email address.
         */
        email?: string;
        /**
         * Resource phone number.
         */
        phone?: string;
        /**
         * Resource description.
         */
        description?: string;
        /**
         * Resource tags. Tags are used to identify, group, and filter the different types of resources. For example, 'staff' or 'room'.
         */
        tags?: string[];
        /**
         * List of IDs of schedules owned by this resource.
         */
        scheduleIds: string[];
        /**
         * Resource status.
         *
         *  One of:
         *  - `"CREATED"` Default status.
         *  - `"DELETED"` The resource was deleted.
         *  - `"UPDATED"` The resource was updated.
         *
         */
        status: string;
    };
    /**
     * First start and last end time of the booked sessions.
     */
    type SetOfSessions = {
        /**
         * Start time of the first session.
         */
        firstSessionStart: Date;
        /**
         * End time of the last session.
         */
        lastSessionEnd: Date;
    };
    /**
     * Start and end time of the booked sessions.
     */
    type SingleSession = {
        sessionId: string;
        /**
         * Start time of the session.
         */
        start: Date;
        /**
         * End time of the session.
         */
        end: Date;
    };
    /**
     * Street name, number and apartment number.
     */
    type StreetAddress = {
        /**
         * Street number.
         */
        number: string;
        /**
         * Street name.
         */
        name: string;
        /**
         * Apartment number.
         */
        apt: string;
    };
    /**
     * Street name, number and apartment number.
     */
    type StreetAddressInfo = {
        /**
         * Street number.
         */
        number?: string;
        /**
         * Street name.
         */
        name?: string;
        /**
         * Apartment number.
         */
        apt?: string;
    };
    type WixPayDetails = {
        /**
         * Wix Pay payment transaction ID.
         */
        txId: string;
        /**
         * Wix Pay payment order ID.
         */
        orderId: string;
        /**
         * Order amount sent to the Wix Pay system.
         */
        orderAmount: string;
        /**
         * Transaction status
         *
         *  One of:
         *  - `"CREATED"`  The transaction has been started.
         *  - `"PENDING_MERCHANT"` An online payment was made, but the owner has not set up the necessary details.
         *  - `"COMPLETE"`  The current part of the payment was completed.
         *  - `"FAILED"`  The Wix online payment system is unavailable or failed processing.
         *  - `"DECLINED"` The payment was declined.
         *  - `"PENDING_MARK_AS_PAID"` Offline transaction. The transaction will be complete when explicitly marked as paid.
         *  - `"CANCELED"` The transaction was canceled.
         *
         */
        orderStatus: string;
        /**
         * Date and time that the order was approved.
         */
        orderApprovalTime: Date;
        /**
         * Payment vendor name. The company processing the payment, such as Pay Pal or a credit card company. `inPerson` is used for cash payments.
         */
        paymentVendorName: string;
    };
    /**
     * The Bookings API provides functionality for updating and managing bookings created in the Wix Bookings app.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.html#)
     */
    interface Bookings {
        /**
         * Cancels an existing booking.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.html#cancelBooking)
         */
        cancelBooking(bookingId: string, options: Bookings.CancelBookingOptions): Promise<Bookings.CancelBookingResult>;
        /**
         * Confirms a booking request.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.html#confirmBooking)
         */
        confirmBooking(bookingId: string, options: Bookings.ConfirmBookingOptions): Promise<string>;
        /**
         * Declines a pending booking request.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.html#declineBooking)
         */
        declineBooking(bookingId: string, options: Bookings.DeclineBookingOptions): Promise<Bookings.DeclineBookingResult>;
        /**
         * Creates a query to retrieve a list of bookings.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.html#queryBookings)
         */
        queryBookings(): Bookings.BookingsQueryBuilder;
        /**
         * Sets the number of people who actually attended the session for the given booking.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.html#setAttendance)
         */
        setAttendance(bookingId: string, attendanceInfo: Bookings.AttendanceInfo, options?: Options): Promise<Booking>;
        /**
         * Marks a booking as fully paid.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.html#setBookingAsPaid)
         */
        setBookingAsPaid(bookingId: string, options?: Options): Promise<Booking>;
        /**
         * Updates the customer's information for a booking.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.html#updateCustomerInfo)
         */
        updateCustomerInfo(bookingId: string, formInfo: Bookings.FormInfo, options?: Options): Promise<Booking>;
    }
    /**
     * Events that are fired by actions related to Wix Bookings.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Events.html#)
     */
    interface Events {
        /**
         * An event that fires when a booking is canceled.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Events.html#onBookingCanceled)
         */
        onBookingCanceled(event: Events.BookingEvent): void;
        /**
         * An event that fires when a booking request is confirmed.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Events.html#onBookingConfirmed)
         */
        onBookingConfirmed(event: Events.BookingEvent): void;
        /**
         * An event that fires when a booking request is declined.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Events.html#onBookingDeclined)
         */
        onBookingDeclined(event: Events.BookingEvent): void;
        /**
         * An event that fires when a booking request is created.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Events.html#onBookingRequestCreated)
         */
        onBookingRequestCreated(event: Events.BookingEvent): void;
        /**
         * An event that fires when a booking's schedule is updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Events.html#onBookingScheduleUpdated)
         */
        onBookingScheduleUpdated(event: Events.BookingEvent): void;
        /**
         * An event that fires when a booking's details are updated.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Events.html#onBookingUpdated)
         */
        onBookingUpdated(event: Events.BookingEvent): void;
    }
    /**
     * The Bookings Resources API provides functionality for creating, managing, and querying resources.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.html#)
     */
    interface Resources {
        /**
         * Creates a resource.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.html#createResource)
         */
        createResource(resourceInfo: Resources.ResourceInfo, scheduleInfo: Resources.ResourceScheduleInfo[], options?: Options): Promise<Resource>;
        /**
         * Deletes a resource.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.html#deleteResource)
         */
        deleteResource(resourceId: string, options?: Options): Promise<string>;
        /**
         * Creates a query to retrieve extended resource information.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.html#queryResourceCatalog)
         */
        queryResourceCatalog(): Resources.ResourceCatalogQueryBuilder;
        /**
         * Updates a resource.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.html#updateResource)
         */
        updateResource(id: string, resourceInfo: Resources.UpdateResourceInfo, options?: Options): Promise<Resource>;
        /**
         * Updates a resource's schedule.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.html#updateResourceSchedule)
         */
        updateResourceSchedule(resourceId: string, scheduleId: string, scheduleInfo: Resources.ResourceScheduleInfo, options?: Options): Promise<Resources.ResourceSchedule>;
    }
    /**
     * The Sessions API provides functionality for creating, managing, and querying sessions.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.html#)
     */
    interface Sessions {
        /**
         * Creates a session.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.html#createSession)
         */
        createSession(sessionInfo: Sessions.SessionInfo, options?: Options): Promise<Sessions.Session>;
        /**
         * Deletes a session from a schedule.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.html#deleteSession)
         */
        deleteSession(sessionId: string, options?: Sessions.DeleteSessionOptions): Promise<string>;
        /**
         * Gets a session.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.html#getSession)
         */
        getSession(sessionId: string, options?: Options): Promise<Sessions.Session>;
        /**
         * Retrieves a list of the sessions according to the specified filters and paging.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.html#querySessions)
         */
        querySessions(): Sessions.SessionQueryBuilder;
        /**
         * Updates a session.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.html#updateSession)
         */
        updateSession(sessionId: string, sessionInfo: Sessions.UpdateSessionInfo, options?: Options): Promise<Sessions.Session>;
    }
    /**
     * The Bookings API provides functionality for updating and managing bookings created in the Wix Bookings app.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.html#)
     */
    namespace Bookings {
        /**
         * Attendance information for the booking
         */
        type AttendanceInfo = {
            /**
             * Whether the booked contact attended the session.
             */
            attended?: boolean;
            /**
             * Number of attendees that attended the session. This can be greater than 1 when the booking is made for a group of people.
             */
            numberOfAttendees?: number;
        };
        type CancelBookingOptions = {
            /**
             * Whether to notify the participants about the booking confirmation, and an optional custom message.
             */
            participantNotification?: ParticipantNotificationInfo;
            /**
             * Sets the cancel booking flow behavior.
             */
            flowControlSettings?: Bookings.FlowControlSettingsInfo;
            /**
             * When `true`, prevents permission checks from running for the operation. Defaults to `false`.
             */
            suppressAuth?: boolean;
        };
        type CancelBookingResult = {
            /**
             * ID of the canceled booking.
             */
            bookingId: string;
        };
        type ConfirmBookingOptions = {
            /**
             * Whether to notify the participants about the booking confirmation, and an optional custom message.
             */
            participantNotification?: ParticipantNotificationInfo;
            /**
             * When `true`, prevents permission checks from running for the operation. Defaults to `false`.
             */
            suppressAuth?: boolean;
        };
        /**
         * Contact details of the customer making the booking.
         */
        type ContactDetails = {
            /**
             * Contact's ID.
             */
            contactId?: string;
            /**
             * Contact's first name. When populated from a standard booking form, this property corresponds to the **Name** field.
             */
            firstName?: string;
            /**
             * Contact's last name.
             */
            lastName?: string;
            /**
             * Contact's email, used to create a new contact or get existing one from the [CRM API](wix-crm/introduction).
             */
            email?: string;
            /**
             * Contact's phone number.
             */
            phone?: string;
            /**
             * Contact's time zone.
             */
            timeZone?: string;
            /**
             * Contact's country in [ISO 3166-1 alpha-2 code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
             */
            countryCode?: string;
            /**
             * Contact's full [address](https://www.wix.com/velo/reference/$w/addressinput/value).
             */
            address?: Bookings.OwnerAddress;
        };
        type DeclineBookingOptions = {
            /**
             * Whether to notify the participants about the booking confirmation, and an optional custom message.
             */
            participantNotification?: ParticipantNotificationInfo;
            /**
             * When `true`, prevents permission checks from running for the operation. Defaults to `false`.
             */
            suppressAuth?: boolean;
        };
        type DeclineBookingResult = {
            /**
             * ID of the declined booking.
             */
            bookingId: string;
        };
        /**
         * Sets the cancel booking flow behavior.
         */
        type FlowControlSettingsInfo = {
            /**
             * Whether to ignore the service's cancellation policy.
             *
             *
             *  Requires "Manage Wix Bookings App" and "Manage Bookings' Calendar" [roles](https://support.wix.com/en/article/roles-permissions-overview#bookings-admin).
             *
             */
            ignoreCancellationPolicy?: boolean;
        };
        /**
         * Updated form info and contact details
         */
        type FormInfo = {
            /**
             * List of rates and the number of participants for each rate.
             */
            paymentSelection?: PaymentSelectionInfo[];
            /**
             * Additional custom fields submitted with the form.
             */
            additionalFields?: CustomFormFieldInfo[];
            /**
             * Contact details of the customer making the booking.
             */
            contactDetails?: Bookings.ContactDetails;
        };
        /**
         * Contact full [address](https://www.wix.com/velo/reference/$w/addressinput/value).
         */
        type OwnerAddress = {
            /**
             * Main address line, usually street and number, as free text.
             */
            addressLine1?: string;
            /**
             * Street name, number and apartment number.
             */
            streetAddress?: StreetAddressInfo;
            /**
             * String containing the full address of this location.
             */
            formatted?: string;
            /**
             * Free text providing more detailed address info. Usually contains Apt, Suite, and Floor.
             */
            addressLine2?: string;
            /**
             * Coordinates of the physical address.
             */
            location?: AddressLocationInfo;
            /**
             * City name.
             */
            city?: string;
            /**
             * Subdivision. Usually state, region, prefecture or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2).
             */
            subdivision?: string;
            /**
             * Country code.
             */
            country?: string;
            /**
             * Zip/postal code.
             */
            postalCode?: string;
        };
        /**
         * Contains functionality for refining a Bookings query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryBuilder.html#)
         */
        interface BookingsQueryBuilder {
            /**
             * Adds a sort to a query, sorting by the specified properties in ascending order.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryBuilder.html#ascending)
             */
            ascending(...propertyName: string[]): Bookings.BookingsQueryBuilder;
            /**
             * Adds a sort to a query or sort, sorting by the specified properties in descending order.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryBuilder.html#descending)
             */
            descending(...propertyName: string[]): Bookings.BookingsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value equals the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryBuilder.html#eq)
             */
            eq(propertyName: string, value: any): Bookings.BookingsQueryBuilder;
            /**
             * Returns the bookings that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryBuilder.html#find)
             */
            find(options?: BookingsQueryBuilder.QueryOptions): Promise<Bookings.BookingsQueryResult>;
            /**
             * Refines a query to match items whose specified property value is greater than or equal to the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryBuilder.html#ge)
             */
            ge(propertyName: string, value: string | number | Date): Bookings.BookingsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value is greater than the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryBuilder.html#gt)
             */
            gt(propertyName: string, value: string | number | Date): Bookings.BookingsQueryBuilder;
            /**
             * Refines a query to match items whose specified property contains any of the specified `value` parameters.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryBuilder.html#hasSome)
             */
            hasSome(propertyName: string, value: string[]): Bookings.BookingsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value is less than or equal to the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryBuilder.html#le)
             */
            le(propertyName: string, value: string | number | Date): Bookings.BookingsQueryBuilder;
            /**
             * Limits the number of items the query returns.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryBuilder.html#limit)
             */
            limit(limit: number): Bookings.BookingsQueryBuilder;
            /**
             * Refines a query to match items whose specified property value is less than the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryBuilder.html#lt)
             */
            lt(propertyName: string, value: string | number | Date): Bookings.BookingsQueryBuilder;
            /**
             * Sets the number of items to skip before returning query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryBuilder.html#skip)
             */
            skip(skip: number): Bookings.BookingsQueryBuilder;
        }
        /**
         * The results of a bookings query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryResult.html#)
         */
        interface BookingsQueryResult {
            /**
             * Returns the index of the current results page number.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryResult.html#currentPage)
             */
            readonly currentPage: number;
            /**
             * Returns an array of bookings that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryResult.html#items)
             */
            readonly items: Booking[];
            /**
             * Returns the number of items in the current results page.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryResult.html#length)
             */
            readonly length: number;
            /**
             * Returns the query page size.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryResult.html#pageSize)
             */
            readonly pageSize: number;
            /**
             * Returns the BookingsQueryBuilder object used to get the current results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryResult.html#query)
             */
            readonly query: Bookings.BookingsQueryBuilder;
            /**
             * Returns the total number of items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryResult.html#totalCount)
             */
            readonly totalCount: number;
            /**
             * Returns the total number of pages the query produced.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryResult.html#totalPages)
             */
            readonly totalPages: number;
            /**
             * Indicates if the query has more results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryResult.html#hasNext)
             */
            hasNext(): boolean;
            /**
             * Indicates the query has previous results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryResult.html#hasPrev)
             */
            hasPrev(): boolean;
            /**
             * Retrieves the next page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryResult.html#next)
             */
            next(): Promise<Bookings.BookingsQueryResult>;
            /**
             * Retrieves the previous page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryResult.html#prev)
             */
            prev(): Promise<Bookings.BookingsQueryResult>;
        }
        /**
         * Contains functionality for refining a Bookings query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryBuilder.html#)
         */
        namespace BookingsQueryBuilder {
            /**
             * Options to use when performing a query.
             */
            type QueryOptions = {
                /**
                 * Prevents permission checks from running for the `find()` operation. Defaults to `false`.
                 */
                suppressAuth?: boolean;
            };
        }
        /**
         * The results of a bookings query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Bookings.BookingsQueryResult.html#)
         */
        namespace BookingsQueryResult {
        }
    }
    /**
     * Events that are fired by actions related to Wix Bookings.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Events.html#)
     */
    namespace Events {
        /**
         * An object representing a booking event.
         */
        type BookingEvent = {
            /**
             * Action that triggered the event. Each event has its own set of possible trigger values.
             */
            trigger: string;
            /**
             * Booking object after the event was triggered.
             */
            booking: Booking;
            /**
             * Booking object before the event was triggered.
             */
            previousBooking: Booking;
        };
    }
    /**
     * The Bookings Resources API provides functionality for creating, managing, and querying resources.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.html#)
     */
    namespace Resources {
        type LinkedSchedulesInfo = {
            /**
             * Schedule ID.
             */
            scheduleId: string;
            /**
             * Owner ID, of the linked schedule.
             */
            scheduleOwnerId: string;
        };
        /**
         * Resource details.
         */
        type ResourceInfo = {
            /**
             * Resource name.
             */
            name: string;
            /**
             * Resource email address.
             */
            email?: string;
            /**
             * Resource phone number.
             */
            phone?: string;
            /**
             * Resource description.
             */
            description?: string;
            /**
             * Resource tags. Tags are used to identify, group, and filter the different types of resources. For example, 'staff' or 'room'.
             */
            tags?: string[];
        };
        /**
         * ResourceCatalog query results.
         */
        type ResourceQueryResults = {
            /**
             * Resource.
             */
            resource: Resource;
            /**
             * Resource's schedules.
             */
            schedules: Resources.ResourceSchedule[];
            /**
             * History of slugified resource names.
             */
            slugs: Resources.Slug[];
        };
        type ResourceSchedule = {
            /**
             * Schedule ID.
             */
            _id: string;
            /**
             * ID of the schedule's owner entity. This may be a resource ID or a service ID.
             */
            scheduleOwnerId: string;
            /**
             * An object describing how to calculate the schedule's availability.
             * An empty object indicates that the schedule is not available for booking.
             */
            availability: Resources.ResourceScheduleAvailability;
        };
        /**
         * An object describing how to calculate the schedule's availability.
         */
        type ResourceScheduleAvailability = {
            /**
             * Date and time the schedule starts to be available for booking.
             */
            start: Date;
            /**
             * Other schedules that impact the availability calculation. Relevant only when there are availability constraints.
             */
            linkedSchedules: LinkedResourceScheduleInfo[];
        };
        /**
         * An object describing how to calculate the schedule's availability.
         */
        type ResourceScheduleAvailabilityInfo = {
            /**
             * Date and time the schedule starts to be available for booking.
             */
            start?: Date;
            /**
             * Other schedules that impact the availability calculation. Relevant only when there are availability constraints.
             */
            linkedSchedules?: LinkedResourceScheduleInfo[];
        };
        type ResourceScheduleInfo = {
            /**
             * An object describing how to calculate the schedule's availability.
             * An empty object indicates that the schedule is not available for booking.
             */
            availability?: Resources.ResourceScheduleAvailability;
        };
        /**
         * Slugified resource name.
         */
        type Slug = {
            /**
             * Slugified resource name.
             */
            name: string;
            /**
             * Date and time the resource name was created.
             */
            _createdDate: Date;
        };
        /**
         * Resource details.
         */
        type UpdateResourceInfo = {
            /**
             * Resource name.
             */
            name?: string;
            /**
             * Resource email address.
             */
            email?: string;
            /**
             * Resource phone number.
             */
            phone?: string;
            /**
             * Resource description.
             */
            description?: string;
            /**
             * Resource tags. Tags are used to identify, group, and filter the different types of resources. For example, 'staff' or 'room'.
             */
            tags?: string[];
        };
        /**
         * Contains functionality for refining a resource catalog query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryBuilder.html#)
         */
        interface ResourceCatalogQueryBuilder {
            /**
             * Refines a query to match items whose specified property value equals the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryBuilder.html#eq)
             */
            eq(propertyName: string, value: string): Resources.ResourceCatalogQueryBuilder;
            /**
             * Returns the resource catalog items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryBuilder.html#find)
             */
            find(options?: ResourceCatalogQueryBuilder.QueryOptions): Promise<Resources.ResourceCatalogQueryResult>;
            /**
             * Refines a query to match items whose specified property contains any of the specified `value` parameters.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryBuilder.html#hasSome)
             */
            hasSome(propertyName: string, value: string[]): Resources.ResourceCatalogQueryBuilder;
            /**
             * Limits the number of items the query returns.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryBuilder.html#limit)
             */
            limit(limit: number): Resources.ResourceCatalogQueryBuilder;
            /**
             * Sets the number of items to skip before returning query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryBuilder.html#skip)
             */
            skip(skip: number): Resources.ResourceCatalogQueryBuilder;
        }
        /**
         * The results of a resource catalog query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryResult.html#)
         */
        interface ResourceCatalogQueryResult {
            /**
             * Returns the index of the current results page number.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryResult.html#currentPage)
             */
            readonly currentPage: number;
            /**
             * Returns an array of resources, slugs, and schedules that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryResult.html#items)
             */
            readonly items: Resources.ResourceQueryResults[];
            /**
             * Returns the number of items in the current results page.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryResult.html#length)
             */
            readonly length: number;
            /**
             * Returns the query page size.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryResult.html#pageSize)
             */
            readonly pageSize: number;
            /**
             * Returns the ResourceCatalogQueryBuilder object used to get the current results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryResult.html#query)
             */
            readonly query: Resources.ResourceCatalogQueryBuilder;
            /**
             * Returns the total number of items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryResult.html#totalCount)
             */
            readonly totalCount: number;
            /**
             * Returns the total number of pages the query produced.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryResult.html#totalPages)
             */
            readonly totalPages: number;
            /**
             * Indicates if the query has more results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryResult.html#hasNext)
             */
            hasNext(): boolean;
            /**
             * Indicates the query has previous results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryResult.html#hasPrev)
             */
            hasPrev(): boolean;
            /**
             * Retrieves the next page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryResult.html#next)
             */
            next(): Promise<Resources.ResourceCatalogQueryResult>;
            /**
             * Retrieves the previous page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryResult.html#prev)
             */
            prev(): Promise<Resources.ResourceCatalogQueryResult>;
        }
        /**
         * Contains functionality for refining a resource catalog query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryBuilder.html#)
         */
        namespace ResourceCatalogQueryBuilder {
            /**
             * Options to use when performing a query.
             */
            type QueryOptions = {
                /**
                 * When `true`, prevents permission checks from running for the operation. Defaults to `false`.
                 */
                suppressAuth?: boolean;
            };
        }
        /**
         * The results of a resource catalog query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Resources.ResourceCatalogQueryResult.html#)
         */
        namespace ResourceCatalogQueryResult {
        }
    }
    /**
     * The Sessions API provides functionality for creating, managing, and querying sessions.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.html#)
     */
    namespace Sessions {
        type DeleteSessionOptions = {
            /**
             * Whether to notify participants about the change, and an optional custom message.
             */
            participantNotification?: ParticipantNotificationInfo;
            /**
             * When `true`, prevents permission checks from running for the operation. Defaults to `false`.
             */
            suppressAuth?: boolean;
        };
        type Session = {
            /**
             * Session ID.
             */
            _id: string;
            /**
             * ID of the schedule that the session belongs to.
             */
            scheduleId: string;
            /**
             * ID of the resource or service that the session's schedule belongs to.
             */
            scheduleOwnerId: string;
            /**
             * Tags for the session.
             * The value is inherited from the schedule and can be overridden unless the session is a recurring session.
             */
            tags: string[];
            /**
             * Additional information about the session.
             * Notes are not supported for recurring sessions.
             */
            notes: string;
            /**
             * Session status.
             *
             *  One of:
             *  - `"CONFIRMED"` Default value.
             *  - `"CANCELLED"` The session was deleted.
             *
             */
            status: string;
            /**
             * ID of the recurring session if this session is an instance of a recurrence. Use this ID to update the recurrence and all of the instances.
             */
            recurringSessionId?: string;
            /**
             * Session type.
             *
             *  One of:
             *  - `"EVENT"` Reserved period of time on the schedule. For example, an appointment, class, course, or blocked time. Events are visible in the Dashboard in the Bookings app's [Booking Calendar](https://support.wix.com/en/article/wix-bookings-about-the-wix-bookings-calendar) page.
             *  - `"WORKING_HOURS"` Placeholder for available time on a resource’s schedule.
             *
             */
            type: string;
            /**
             * String representing a recurrence rule (RRULE) for a recurring session, as defined in [iCalendar RFC 5545](https://icalendar.org/iCalendar-RFC-5545/3-3-10-recurrence-rule.html).
             * If the session is an instance of a recurrence pattern, the `instanceOfRecurrence` property will contain the recurrence rule and this property will be empty.
             * The RRULE defines a rule for repeating a session.
             * Supported parameters are:
             *
             * |Keyword|Description|Supported values|
             * |--|--|---|
             * |`FREQ`|The frequency at which the session is recurs. Required.|`WEEKLY`|
             * |`INTERVAL`|How often, in terms of `FREQ`, the session recurs. Default is 1. Optional.|
             * |`UNTIL`|The UTC end date and time of the recurrence. Optional.|
             * |`BYDAY`|Day of the week when the event should recur. Required.|One of: `MO`, `TU`, `WE`, `TH`, `FR`, `SA`, `SU`|
             *
             *
             *  For example, a session that repeats every second week on a Monday until January 7, 2022 at 8 AM:
             * `"FREQ=WEEKLY;INTERVAL=2;BYDAY=MO;UNTIL=20220107T080000Z"`
             *
             *
             */
            recurrence?: string;
            /**
             * String representing a recurrence rule (RRULE) if the session is an instance of a recurrence pattern.
             * Empty when the session is not an instance of a recurrence rule, or if the session defines a recurrence pattern, and `recurrence` is not empty.
             */
            instanceOfRecurrence?: string;
            /**
             * An object specifying the start date and time of the session. If the session is a recurring session, `start` must contain a `localDateTime`.
             */
            start: CalendarDateTime;
            /**
             * An object specifying the end date and time of the session. If the session is a recurring session, `end` must contain a `localDateTime`.
             */
            end: CalendarDateTime;
        };
        /**
         * Session.
         */
        type SessionInfo = {
            /**
             * ID of the schedule that the session belongs to.
             */
            scheduleId: string;
            /**
             * An object specifying the start date and time of the session. If the session is a recurring session, `start` must contain a `localDateTime`.
             */
            start: CalendarDateTimeInfo;
            /**
             * An object specifying the end date and time of the session. If the session is a recurring session, `end` must contain a `localDateTime`.
             */
            end: CalendarDateTimeInfo;
            /**
             * Tags for the session.
             * The value is inherited from the schedule and can be overridden unless the session is a recurring session.
             */
            tags?: string[];
            /**
             * Additional information about the session.
             * Notes are not supported for recurring sessions.
             */
            notes?: string;
            /**
             * Session type.
             *
             *  One of:
             *  - `"EVENT"` Reserved period of time on the schedule. For example, an appointment, class, course, or blocked time. Events are visible in the Dashboard in the Bookings app's [Booking Calendar](https://support.wix.com/en/article/wix-bookings-about-the-wix-bookings-calendar) page.
             *  - `"WORKING_HOURS"` Placeholder for available time on a resource’s schedule.
             *
             */
            type?: string;
            /**
             * String representing a recurrence rule (RRULE) for a recurring session, as defined in [iCalendar RFC 5545](https://icalendar.org/iCalendar-RFC-5545/3-3-10-recurrence-rule.html).
             * If the session is an instance of a recurrence pattern, the `instanceOfRecurrence` property will contain the recurrence rule and this property will be empty.
             * The RRULE defines a rule for repeating a session.
             * Supported parameters are:
             *
             * |Keyword|Description|Supported values|
             * |--|--|---|
             * |`FREQ`|The frequency at which the session is recurs. Required.|`WEEKLY`|
             * |`INTERVAL`|How often, in terms of `FREQ`, the session recurs. Default is 1. Optional.|
             * |`UNTIL`|The UTC end date and time of the recurrence. Optional.|
             * |`BYDAY`|Day of the week when the event should recur. Required.|One of: `MO`, `TU`, `WE`, `TH`, `FR`, `SA`, `SU`|
             *
             *
             *  For example, a session that repeats every second week on a Monday until January 7, 2022 at 8 AM:
             * `"FREQ=WEEKLY;INTERVAL=2;BYDAY=MO;UNTIL=20220107T080000Z"`
             *
             *
             */
            recurrence?: string;
        };
        /**
         * Session.
         */
        type UpdateSessionInfo = {
            /**
             * An object specifying the start date and time of the session. If the session is a recurring session, `start` must contain a `localDateTime`.
             */
            start?: CalendarDateTimeInfo;
            /**
             * An object specifying the start date and time of the session. If the session is a recurring session, `start` must contain a `localDateTime`.
             */
            end?: CalendarDateTimeInfo;
            /**
             * Tags for the session.
             * The value is inherited from the schedule and can be overridden unless the session is a recurring session.
             */
            tags?: string[];
            /**
             * Additional information about the session.
             * Notes are not supported for recurring sessions.
             */
            notes?: string;
            /**
             * Session type.
             *
             *  One of:
             *  - `"EVENT"` Reserved period of time on the schedule. For example, an appointment, class, course, or blocked time. Events are visible in the Dashboard in the Bookings app's [Booking Calendar](https://support.wix.com/en/article/wix-bookings-about-the-wix-bookings-calendar) page.
             *  - `"WORKING_HOURS"` Placeholder for available time on a resource’s schedule.
             *
             */
            type?: string;
            /**
             * String representing a recurrence rule (RRULE) for a recurring session, as defined in [iCalendar RFC 5545](https://icalendar.org/iCalendar-RFC-5545/3-3-10-recurrence-rule.html).
             * If the session is an instance of a recurrence pattern, the `instanceOfRecurrence` property will contain the recurrence rule and this property will be empty.
             * The RRULE defines a rule for repeating a session.
             * Supported parameters are:
             *
             * |Keyword|Description|Supported values|
             * |--|--|---|
             * |`FREQ`|The frequency at which the session is recurs. Required.|`WEEKLY`|
             * |`INTERVAL`|How often, in terms of `FREQ`, the session recurs. Default is 1. Optional.|
             * |`UNTIL`|The UTC end date and time of the recurrence. Optional.|
             * |`BYDAY`|Day of the week when the event should recur. Required.|One of: `MO`, `TU`, `WE`, `TH`, `FR`, `SA`, `SU`|
             *
             *
             *  For example, a session that repeats every second week on a Monday until January 7, 2022 at 8 AM:
             * `"FREQ=WEEKLY;INTERVAL=2;BYDAY=MO;UNTIL=20220107T080000Z"`
             *
             *
             */
            recurrence?: string;
        };
        /**
         * Contains functionality for refining a session query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryBuilder.html#)
         */
        interface SessionQueryBuilder {
            /**
             * Refines a query to match items whose specified property value equals the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryBuilder.html#eq)
             */
            eq(propertyName: string, value: any): Sessions.SessionQueryBuilder;
            /**
             * Returns the bookings that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryBuilder.html#find)
             */
            find(options?: SessionQueryBuilder.QueryOptions): Promise<Sessions.SessionQueryResult>;
            /**
             * Refines a query to match items whose specified property value is greater than or equal to the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryBuilder.html#ge)
             */
            ge(propertyName: string, value: Date): Sessions.SessionQueryBuilder;
            /**
             * Refines a query to match items whose specified property contains any of the specified `value` parameters.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryBuilder.html#hasSome)
             */
            hasSome(propertyName: string, value: string[]): Sessions.SessionQueryBuilder;
            /**
             * Limits the number of items the query returns.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryBuilder.html#limit)
             */
            limit(limit: number): Sessions.SessionQueryBuilder;
            /**
             * Refines a query to match items whose specified property value is less than the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryBuilder.html#lt)
             */
            lt(propertyName: string, value: Date): Sessions.SessionQueryBuilder;
            /**
             * Refines a query to match items whose specified property value does not equal the specified value.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryBuilder.html#ne)
             */
            ne(propertyName: string, value: any): Sessions.SessionQueryBuilder;
            /**
             * Sets the number of items to skip before returning query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryBuilder.html#skip)
             */
            skip(skip: number): Sessions.SessionQueryBuilder;
        }
        /**
         * The results of a session query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryResult.html#)
         */
        interface SessionQueryResult {
            /**
             * Returns the index of the current results page number.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryResult.html#currentPage)
             */
            readonly currentPage: number;
            /**
             * Returns an array of sessions that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryResult.html#items)
             */
            readonly items: Sessions.Session[];
            /**
             * Returns the query page size.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryResult.html#pageSize)
             */
            readonly pageSize: number;
            /**
             * Returns the `SessionQueryBuilder` object used to get the current results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryResult.html#query)
             */
            readonly query: Sessions.SessionQueryBuilder;
            /**
             * Returns the total number of items that match the query.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryResult.html#totalCount)
             */
            readonly totalCount: number;
            /**
             * Returns the total number of pages the query produced.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryResult.html#totalPages)
             */
            readonly totalPages: number;
            /**
             * Indicates if the query has more results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryResult.html#hasNext)
             */
            hasNext(): boolean;
            /**
             * Indicates the query has previous results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryResult.html#hasPrev)
             */
            hasPrev(): boolean;
            /**
             * Retrieves the next page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryResult.html#next)
             */
            next(): Promise<Sessions.SessionQueryResult>;
            /**
             * Retrieves the previous page of query results.
             * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryResult.html#prev)
             */
            prev(): Promise<Sessions.SessionQueryResult>;
        }
        /**
         * Contains functionality for refining a session query.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryBuilder.html#)
         */
        namespace SessionQueryBuilder {
            /**
             * Options to use when performing a query.
             */
            type QueryOptions = {
                /**
                 * When `true`, prevents permission checks from running for the `find()` operation. Defaults to `false`.
                 */
                suppressAuth?: boolean;
            };
        }
        /**
         * The results of a session query, containing the retrieved items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-bookings-backend.Sessions.SessionQueryResult.html#)
         */
        namespace SessionQueryResult {
        }
    }
}

// /types/common/wix-billing-backend.d.ts
/**
 * The wix-billing-backend module contains functionality for working with
 *  billing features, such as [price quotes](https://support.wix.com/en/article/wix-price-quotes-creating-and-sending-price-quotes-to-clients) and
 * [invoices](https://support.wix.com/en/article/about-wix-invoices).
 * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.html#)
 */
declare module 'wix-billing-backend' {
    /**
     * The wix-billing-backend module contains functionality for working with
     *  [your site's invoices](https://support.wix.com/en/article/about-wix-invoices)
     *  from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.html#invoices)
     */
    const invoices: Invoices;
    /**
     * The wix-billing-backend module contains functionality for working with
     *  your site's [price quotes](https://support.wix.com/en/article/wix-price-quotes-creating-and-sending-price-quotes-to-clients)
     *  from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.html#priceQuotes)
     */
    const priceQuotes: PriceQuotes;
    /**
     * Events that are fired by actions relating to billing.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Events.html#)
     */
    interface Events {
        /**
         * An event that fires when an invoice is created.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Events.html#onInvoiceCreated)
         */
        onInvoiceCreated(event: Invoices.Invoice): void;
        /**
         * An event that fires when an invoice is overdue.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Events.html#onInvoiceOverdue)
         */
        onInvoiceOverdue(event: Invoices.Invoice): void;
        /**
         * An event that fires when an invoice is paid.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Events.html#onInvoicePaid)
         */
        onInvoicePaid(event: Invoices.Invoice): void;
        /**
         * An event that fires when an invoice is sent.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Events.html#onInvoiceSent)
         */
        onInvoiceSent(event: Invoices.Invoice): void;
        /**
         * An event that fires when a price quote is accepted.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Events.html#onPriceQuoteAccepted)
         */
        onPriceQuoteAccepted(event: PriceQuotes.PriceQuote): void;
        /**
         * An event that fires when a price quote is created.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Events.html#onPriceQuoteCreated)
         */
        onPriceQuoteCreated(event: PriceQuotes.PriceQuote): void;
        /**
         * An event that fires when a price quote has expired.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Events.html#onPriceQuoteExpired)
         */
        onPriceQuoteExpired(event: PriceQuotes.PriceQuote): void;
        /**
         * An event that fires when a price quote is sent.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Events.html#onPriceQuoteSent)
         */
        onPriceQuoteSent(event: PriceQuotes.PriceQuote): void;
    }
    /**
     * The wix-billing-backend module contains functionality for working with
     *  [your site's invoices](https://support.wix.com/en/article/about-wix-invoices)
     *  from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Invoices.html#)
     */
    interface Invoices {
        /**
         * Adds a payment to the invoice and reports the payment to the payment provider.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Invoices.html#addPayment)
         */
        addPayment(id: Invoices.IdAndVersion, payment: Invoices.Payment): Promise<Invoices.Response>;
        /**
         * Creates a new invoice.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Invoices.html#createInvoice)
         */
        createInvoice(invoiceFields: Invoices.InvoiceFields): Promise<Invoices.Response>;
        /**
         * Creates a link that can be used by a customer to preview the invoice.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Invoices.html#createInvoicePreviewUrl)
         */
        createInvoicePreviewUrl(id: Invoices.IdAndVersion, options?: Invoices.AuthOptions): Promise<string>;
        /**
         * Deletes an invoice by ID.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Invoices.html#deleteInvoice)
         */
        deleteInvoice(id: string): Promise<void>;
        /**
         * Gets an existing invoice by ID.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Invoices.html#getInvoice)
         */
        getInvoice(id: string): Promise<Invoices.Invoice>;
        /**
         * Sends an invoice preview link to a customer via email.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Invoices.html#sendInvoice)
         */
        sendInvoice(id: Invoices.IdAndVersion, emailInfo: Invoices.EmailInfo): Promise<void>;
        /**
         * Update an existing invoice.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Invoices.html#updateInvoice)
         */
        updateInvoice(id: Invoices.IdAndVersion, invoiceFields: Invoices.InvoiceFields, fieldMask?: string[]): Promise<Invoices.Response>;
        /**
         * Voids an invoice.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Invoices.html#voidInvoice)
         */
        voidInvoice(id: Invoices.IdAndVersion): Promise<void>;
    }
    /**
     * The wix-billing-backend module contains functionality for working with
     *  your site's [price quotes](https://support.wix.com/en/article/wix-price-quotes-creating-and-sending-price-quotes-to-clients)
     *  from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.PriceQuotes.html#)
     */
    interface PriceQuotes {
        /**
         * Creates a new price quote.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.PriceQuotes.html#createPriceQuote)
         */
        createPriceQuote(priceQuoteInfo: PriceQuotes.PriceQuoteInfo): Promise<PriceQuotes.Response>;
        /**
         * Deletes a price quote by ID.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.PriceQuotes.html#deletePriceQuote)
         */
        deletePriceQuote(id: string): Promise<void>;
        /**
         * Gets an existing price quote by ID.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.PriceQuotes.html#getPriceQuote)
         */
        getPriceQuote(id: string): Promise<PriceQuotes.PriceQuote>;
        /**
         * Sends a price quote preview link to a customer via email.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.PriceQuotes.html#sendPriceQuote)
         */
        sendPriceQuote(id: PriceQuotes.IdAndVersion, emailInfo: PriceQuotes.EmailInfo): Promise<void>;
        /**
         * Updates an existing price quote.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.PriceQuotes.html#updatePriceQuote)
         */
        updatePriceQuote(id: PriceQuotes.IdAndVersion, priceQuoteInfo: PriceQuotes.PriceQuoteInfo, fieldMask?: string[]): Promise<PriceQuotes.Response>;
    }
    /**
     * The wix-billing-backend module contains functionality for working with
     *  [your site's invoices](https://support.wix.com/en/article/about-wix-invoices)
     *  from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.Invoices.html#)
     */
    namespace Invoices {
        /**
         * An object that contains address information.
         */
        type Address = {
            /**
             * Address line.
             */
            addressLine: string;
            /**
             * Secondary address line.
             */
            addressLine2: string;
            /**
             * Address subdivision.
             */
            subdivision: string;
            /**
             * Address city.
             */
            city: string;
            /**
             * Address postal code.
             */
            postalCode: string;
            /**
             * Address street address.
             */
            streetAddress: Invoices.StreetAddress;
            /**
             * Address country.
             */
            country: string;
            /**
             * Address in human readable format.
             */
            formatted: string;
        };
        type AuthOptions = {
            /**
             * Prevents permission checks from running for the operation. Defaults to `false`.
             */
            suppressAuth: boolean;
        };
        /**
         * An object that contains calculated tax information.
         */
        type CalculatedTax = {
            /**
             * Tax name.
             */
            name: string;
            /**
             * Tax rate.
             */
            rate: number;
            /**
             * Total value of taxable goods.
             */
            taxable: number;
            /**
             * Total amount of tax applied.
             */
            taxed: number;
            /**
             * Tax code.
             */
            code: string;
        };
        /**
         * An object that contains customer information.
         */
        type Customer = {
            /**
             * Contact ID.
             */
            contactId: string;
            /**
             * Email address.
             */
            email: string;
            /**
             * Physical address.
             */
            address?: Invoices.Address;
            /**
             * Physical billing address.
             */
            billingAddress?: Invoices.Address;
            /**
             * Physical shipping address.
             */
            shippingAddress?: Invoices.Address;
            /**
             * Phone number.
             */
            phone?: string;
            /**
             * Company name.
             */
            company?: string;
            /**
             * Company ID. Can be used to store company VAT ID.
             */
            companyId?: string;
            /**
             * Full name.
             */
            fullName?: string;
            /**
             * First name.
             */
            firstName?: string;
            /**
             * Last name.
             */
            lastName?: string;
        };
        /**
         * An object that contains discount information.
         */
        type Discount = {
            /**
             * Discount amount.
             */
            value: number;
            /**
             * Discount type.
             *
             * Either:
             *
             * + `"Fixed"`: A fixed amount is deducted.
             * + `"Percentage"`: A percentage of the total amount is deducted.
             */
            type: string;
        };
        /**
         * An object that contains information used to send an invoice to a customer.
         */
        type EmailInfo = {
            /**
             * Email subject.
             */
            subject: string;
            /**
             * Email body. Limited formatting in the email body can be
             * achieved using standard JavaScript string formatting.
             */
            body: string;
        };
        /**
         * An object that contains ID and version information.
         */
        type IdAndVersion = {
            /**
             * Invoice ID.
             */
            id: string;
            /**
             * Invoice version.
             */
            version: number;
        };
        /**
         * An object that represents an invoice.
         */
        type Invoice = {
            /**
             * ID and version of the invoice.
             */
            id: Invoices.IdAndVersion;
            /**
             * Status of the invoice.
             *  One of:
             *
             *  + `"Draft"`
             *  + `"Sent"`
             *  + `"Processing"`
             *  + `"Paid"`
             *  + `"Overdue"`
             *  + `"Void"`
             *  + `"Deleted"`
             *  + `"PartiallyPaid"`
             *  + `"PartialAndOverdue"`
             */
            status: string;
            /**
             * Number of the invoice, unique within your site.
             */
            number: string;
            /**
             * Title of the invoice.
             */
            title: string;
            /**
             * Currency code.
             */
            currency: string;
            /**
             * Locale information.
             */
            locale: Invoices.Locale;
            /**
             * Customer listed on the invoice.
             */
            customer: Invoices.Customer;
            /**
             * Line items listed on the invoice.
             */
            lineItems: Invoices.LineItem[];
            /**
             * Discount included in the invoice.
             */
            discount: Invoices.Discount;
            /**
             * List of payments already received from the customer.
             */
            payments: Invoices.Payment[];
            /**
             * List of taxes calculated based on the line items.
             */
            taxes: Invoices.CalculatedTax[];
            /**
             * Total values.
             */
            totals: Invoices.TotalPrice;
            /**
             * Invoice dynamic totals.
             */
            dynamicTotals: Invoices.InvoiceDynamicTotals;
            /**
             * Additional metadata included in the invoice.
             */
            metadata: Invoices.MetaData;
            /**
             * Invoice company ID.
             */
            companyId: string;
            /**
             * Whether the invoice was sent to the customer.
             */
            wasSent: boolean;
            /**
             * Dates associated with the invoice.
             */
            dates: Invoices.InvoiceDates;
        };
        /**
         * An object that contains date information for an invoice.
         */
        type InvoiceDates = {
            /**
             * Invoice issue date.
             */
            issueDate: Date;
            /**
             * Invoice due date.
             */
            dueDate: Date;
        };
        /**
         * An object that contains information about invoice totals that change when payments are received.
         */
        type InvoiceDynamicTotals = {
            /**
             * Amount paid.
             */
            paidAmount: number;
            /**
             * Balance amount.
             */
            balance: number;
        };
        /**
         * An object that contains information used when creating or updating an invoice.
         */
        type InvoiceFields = {
            /**
             * Invoice ID, as a UUID.
             */
            id?: string;
            /**
             * Title of the invoice.
             */
            title: string;
            /**
             * Customer listed on the invoice.
             */
            customer: Invoices.Customer;
            /**
             * Currency code.
             */
            currency: string;
            /**
             * Line items listed on the invoice.
             */
            lineItems: Invoices.LineItem[];
            /**
             * Discount included in the invoice.
             */
            discount?: Invoices.Discount;
            /**
             * Invoice payments.
             */
            payments: Invoices.Payment[];
            /**
             * Invoice metadata.
             */
            metadata?: Invoices.MetaData;
            /**
             * Dates associated with the invoice.
             */
            dates: Invoices.InvoiceDates;
        };
        /**
         * An object that contains itemized fee information.
         */
        type ItemizedFee = {
            /**
             * Item fee name.
             */
            name: string;
            /**
             * Item fee price.
             */
            price: number;
        };
        /**
         * An object that contains line item information.
         */
        type LineItem = {
            /**
             * Line item ID.
             */
            id: string;
            /**
             * Line item name.
             */
            name: string;
            /**
             * Line item description.
             */
            description: string;
            /**
             * Line item price.
             */
            price: number;
            /**
             * Line item quantity.
             */
            quantity: number;
            /**
             * Line item taxes.
             */
            taxes?: Invoices.LineItemTax[];
        };
        /**
         * An object that contains tax information for a line item.
         */
        type LineItemTax = {
            /**
             * Line item tax name.
             */
            name: string;
            /**
             * Line item tax rate.
             */
            rate: number;
            /**
             * Line item tax code.
             */
            code: string;
        };
        /**
         * An object that contains locale information.
         */
        type Locale = {
            /**
             * An IETF language tag.
             * Some common language tags include:
             *
             * + `"en-US"`: English, United States
             * + `"en-GB"`: English, British
             * + `"es-ES"`: Spanish, Spain
             * + `"de-DE"`: German, Germany
             * + `"ja-JP"`: Japanese, Japan
             * + `"fr-CH"`: French, Switzerland
             * + `"it-IT"`: Italian, Italy
             */
            language: string;
        };
        /**
         * An object that contains metadata information.
         */
        type MetaData = {
            /**
             * Invoice notes.
             */
            notes?: string;
            /**
             * Legal terms.
             */
            legalTerms?: string;
            /**
             * URL to legal terms.
             */
            sourceUrl?: string;
            /**
             * Source that triggered the action. For example, `"stores"`.
             */
            source?: string;
            /**
             * ID of the trigger source. For example, an order ID.
             */
            sourceRefId?: string;
        };
        /**
         * An object that contains information about an invoice payment.
         */
        type Payment = {
            /**
             * Payment id.
             */
            id: string;
            /**
             * Payment type, describing how the payment was made.
             */
            type: string;
            /**
             * Payment amount.
             */
            amount: number;
            /**
             * Payment date.
             */
            date: Date;
        };
        /**
         * An object that contains response information.
         */
        type Response = {
            /**
             * ID and version information.
             */
            id: Invoices.IdAndVersion;
        };
        /**
         * An object that contains street address information.
         */
        type StreetAddress = {
            /**
             * Street address information.
             */
            value: string;
            /**
             * Street address type. Either `"Number"` or `"Name"`.
             */
            type: string;
        };
        /**
         * An object that contains price totals.
         */
        type TotalPrice = {
            /**
             * Discount amount.
             */
            discountAmount: number;
            /**
             * List of itemized fees.
             */
            fees: Invoices.ItemizedFee[];
            /**
             * Sum of line item tax amounts.
             */
            taxedAmount: number;
            /**
             * Subtotal of the line items without the tax included.
             */
            subtotal: number;
            /**
             * Total price of the itemized fees and taxes.
             */
            total: number;
        };
    }
    /**
     * The wix-billing-backend module contains functionality for working with
     *  your site's [price quotes](https://support.wix.com/en/article/wix-price-quotes-creating-and-sending-price-quotes-to-clients)
     *  from backend code.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-billing-backend.PriceQuotes.html#)
     */
    namespace PriceQuotes {
        /**
         * An object that contains address information.
         */
        type Address = {
            /**
             * Address line.
             */
            addressLine: string;
            /**
             * Secondary address line.
             */
            addressLine2: string;
            /**
             * Address subdivision.
             */
            subdivision: string;
            /**
             * Address city.
             */
            city: string;
            /**
             * Address postal code.
             */
            postalCode: string;
            /**
             * Address street address.
             */
            streetAddress: PriceQuotes.StreetAddress;
            /**
             * Address country.
             */
            country: string;
            /**
             * Address in human readable format.
             */
            formatted: string;
        };
        /**
         * An object that contains calculated tax information.
         */
        type CalculatedTax = {
            /**
             * Tax name.
             */
            name: string;
            /**
             * Tax rate.
             */
            rate: number;
            /**
             * Total value of taxable goods.
             */
            taxable: number;
            /**
             * Total amount of tax applied.
             */
            taxed: number;
            /**
             * Tax code.
             */
            code: string;
        };
        /**
         * An object that contains customer information.
         */
        type Customer = {
            /**
             * Contact ID.
             */
            contactId: string;
            /**
             * Email address.
             */
            email: string;
            /**
             * Physical address.
             */
            address?: PriceQuotes.Address;
            /**
             * Physical billing address.
             */
            billingAddress?: PriceQuotes.Address;
            /**
             * Physical shipping address.
             */
            shippingAddress?: PriceQuotes.Address;
            /**
             * Phone number.
             */
            phone?: string;
            /**
             * Company name.
             */
            company?: string;
            /**
             * Company ID. Can be used to store company VAT ID.
             */
            companyId?: string;
            /**
             * Full name.
             */
            fullName?: string;
            /**
             * First name.
             */
            firstName?: string;
            /**
             * Last name.
             */
            lastName?: string;
        };
        /**
         * An object that contains discount information.
         */
        type Discount = {
            /**
             * Discount amount.
             */
            value: number;
            /**
             * Discount type.
             *
             * Either:
             *
             * + `"Fixed"`: A fixed amount is deducted.
             * + `"Percentage"`: A percentage of the total amount is deducted.
             */
            type: string;
        };
        /**
         * An object that contains information used to send a price quote to a customer.
         */
        type EmailInfo = {
            /**
             * Email subject.
             */
            subject: string;
            /**
             * Email body. Limited formatting in the email body can be
             * achieved using standard JavaScript string formatting.
             */
            body: string;
        };
        /**
         * An object that contains ID and version information.
         */
        type IdAndVersion = {
            /**
             * Price quote ID.
             */
            id: string;
            /**
             * Price quote version.
             */
            version: number;
        };
        /**
         * An object that contains itemized fee information.
         */
        type ItemizedFee = {
            /**
             * Item fee name.
             */
            name: string;
            /**
             * Item fee price.
             */
            price: number;
        };
        /**
         * An object that contains line item information.
         */
        type LineItem = {
            /**
             * Line item ID.
             */
            id: string;
            /**
             * Line item name.
             */
            name: string;
            /**
             * Line item description.
             */
            description: string;
            /**
             * Line item price.
             */
            price: number;
            /**
             * Line item quantity.
             */
            quantity: number;
            /**
             * Line item taxes.
             */
            taxes?: PriceQuotes.LineItemTax[];
        };
        /**
         * An object that contains tax information for a line item.
         */
        type LineItemTax = {
            /**
             * Line item tax name.
             */
            name: string;
            /**
             * Line item tax rate.
             */
            rate: number;
            /**
             * Line item tax code.
             */
            code: string;
        };
        /**
         * An object that contains locale information.
         */
        type Locale = {
            /**
             * An IETF language tag.
             * Some common language tags include:
             *
             * + `"en-US"`: English, United States
             * + `"en-GB"`: English, British
             * + `"es-ES"`: Spanish, Spain
             * + `"de-DE"`: German, Germany
             * + `"ja-JP"`: Japanese, Japan
             * + `"fr-CH"`: French, Switzerland
             * + `"it-IT"`: Italian, Italy
             */
            language: string;
        };
        /**
         * An object that contains metadata information.
         */
        type MetaData = {
            /**
             * Price quote notes.
             */
            notes?: string;
            /**
             * Legal terms.
             */
            legalTerms?: string;
            /**
             * URL to legal terms.
             */
            sourceUrl?: string;
            /**
             * Source that triggered the action. For example, `"stores"`.
             */
            source?: string;
            /**
             * ID of the trigger source. For example, an order ID.
             */
            sourceRefId?: string;
        };
        /**
         * An object that contains information about price quote payment terms.
         */
        type PaymentTerms = {
            /**
             * Price quote term type.
             *  One of:
             *
             *  + `"DueOnReceipt"`
             *  + `"NetPlus"`
             *  + `"TimeStamp"`
             *  + `"Other"`
             */
            termType: string;
            /**
             * Term data. When `termType` is `"NetPlus"`,
             *  `termData` contains a positive integer indicating how many days after the charge
             *  payment is due.
             */
            termData?: string;
        };
        /**
         * An object that represents a price quote.
         */
        type PriceQuote = {
            /**
             * ID and version of the price quote.
             */
            id: PriceQuotes.IdAndVersion;
            /**
             * Status of the price quote.
             *  One of:
             *
             *  + `"Draft"`
             *  + `"Sent"`
             *  + `"Processing"`
             *  + `"Accepted"`
             *  + `"Rejected"`
             *  + `"Expired"`
             *  + `"Void"`
             *  + `"Deleted"`
             *  + `"Invoiced"`
             */
            status: string;
            /**
             * Number of the price quote, unique within your site.
             */
            number: string;
            /**
             * Title of the price quote.
             */
            title: string;
            /**
             * Currency code.
             */
            currency: string;
            /**
             * Locale information.
             */
            locale: PriceQuotes.Locale;
            /**
             * Customer listed on the price quote.
             */
            customer: PriceQuotes.Customer;
            /**
             * Line items listed on the price quote.
             */
            lineItems: PriceQuotes.LineItem[];
            /**
             * Discount included in the price quote.
             */
            discount: PriceQuotes.Discount;
            /**
             * Payment terms.
             */
            paymentTerms: PriceQuotes.PaymentTerms;
            /**
             * List of taxes calculated based on the line items.
             */
            taxes: PriceQuotes.CalculatedTax[];
            /**
             * Total values.
             */
            totals: PriceQuotes.TotalPrice;
            /**
             * Additional metadata included in the price quote.
             */
            metadata: PriceQuotes.MetaData;
            /**
             * Price quote company ID.
             */
            companyId: string;
            /**
             * Price quote invoice ID, when converting price quote to invoice.
             */
            invoiceId: string;
            /**
             * Dates associated with the price quote.
             */
            dates: PriceQuotes.PriceQuoteDates;
        };
        /**
         * An object that contains date information for a price quote.
         */
        type PriceQuoteDates = {
            /**
             * Date the price quote was issued.
             */
            issueDate: Date;
            /**
             * Date that the price quote is valid until.
             */
            validThroughDate: Date;
            /**
             * Date the price quote was accepted.
             */
            acceptanceDate?: Date;
            /**
             * Date the price quote was last seen.
             */
            lastSeenDate?: Date;
        };
        /**
         * An object that contains information used when creating or updating a price quote.
         */
        type PriceQuoteInfo = {
            /**
             * Price quote ID, as a UUID.
             */
            id?: string;
            /**
             * Title of the price quote.
             */
            title: string;
            /**
             * Customer listed on the price quote.
             */
            customer: PriceQuotes.Customer;
            /**
             * Currency code.
             */
            currency: string;
            /**
             * Line items listed on the price quote.
             */
            lineItems: PriceQuotes.LineItem[];
            /**
             * Discount included in the price quote.
             */
            discount?: PriceQuotes.Discount;
            /**
             * Payment terms.
             */
            paymentTerms: PriceQuotes.PaymentTerms;
            /**
             * Price quote metadata.
             */
            metadata?: PriceQuotes.MetaData;
            /**
             * Dates associated with the price quote.
             */
            dates: PriceQuotes.PriceQuoteDates;
        };
        /**
         * An object that contains response information.
         */
        type Response = {
            /**
             * ID and version information.
             */
            id: PriceQuotes.IdAndVersion;
        };
        /**
         * An object that contains street address information.
         */
        type StreetAddress = {
            /**
             * Street address information.
             */
            value: string;
            /**
             * Street address type. Either `"Number"` or `"Name"`.
             */
            type: string;
        };
        /**
         * An object that contains price totals.
         */
        type TotalPrice = {
            /**
             * Discount amount.
             */
            discountAmount: number;
            /**
             * List of itemized fees.
             */
            fees: PriceQuotes.ItemizedFee[];
            /**
             * Sum of line item tax amounts.
             */
            taxedAmount: number;
            /**
             * Subtotal of the line items without the tax included.
             */
            subtotal: number;
            /**
             * Total price of the itemized fees and taxes.
             */
            total: number;
        };
    }
}

// /types/common/wix-window.d.ts
/**
 * The wix-window module contains functionality that pertains to the
 *  current browser window.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#)
 */
declare module 'wix-window' {
    /**
     * Gets the locale of the site visitor's browser.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#browserLocale)
     */
    const browserLocale: string;
    /**
     * The ConsentPolicy API is used to perform actions related to the user's allowed cookies and 3rd-party data transfer, such as for GDPR or CCPA purposes.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#consentPolicy)
     */
    const consentPolicy: ConsentPolicy;
    /**
     * Gets what kind of device is being used to view the page.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#formFactor)
     */
    const formFactor: string;
    /**
     * A [lightbox](https://support.wix.com/en/article/about-lightboxes) pops up on your site to grab your visitor's attention.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#lightbox)
     */
    const lightbox: Lightbox;
    /**
     * **Deprecated.** The `locale` property is being deprecated. Use the
     * [`browserLocale`](https://www.wix.com/velo/reference/wix-window/browserlocale) property instead.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#locale)
     */
    const locale: string;
    /**
     * The Multilingual API is used when working with the languages in a multilingual site.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#multilingual)
     */
    const multilingual: Multilingual;
    /**
     * Gets the HTTP referrer header field.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#referrer)
     */
    const referrer: string;
    /**
     * The [Rendering API](wix-window.html#rendering-obj) is used to control when code is run as a page is being loaded.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#rendering)
     */
    const rendering: Rendering;
    /**
     * Gets which mode the site is currently being viewed in.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#viewMode)
     */
    const viewMode: string;
    /**
     * The Warmup Data API is used to optimize data loading for sites that render both on the server and in the browser,
     *  allowing costly data fetching operations to be done only once.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#warmupData)
     */
    const warmupData: WarmupData;
    /**
     * Copies text to the site visitor's clipboard.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#copyToClipboard)
     */
    function copyToClipboard(text: string): Promise<void>;
    /**
     * Returns information about the window.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#getBoundingRect)
     */
    function getBoundingRect(): Promise<WindowSizeInfo>;
    /**
     * Returns the current geolocation of the user.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#getCurrentGeolocation)
     */
    function getCurrentGeolocation(): Promise<any>;
    /**
     * Returns the data that a router passed to the page in its response.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#getRouterData)
     */
    function getRouterData(): any;
    /**
     * Opens a lightbox and optionally passes it the given data.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#openLightbox)
     */
    function openLightbox(name: string, data?: any): Promise<any>;
    /**
     * Opens a modal window that displays the specified web page.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#openModal)
     */
    function openModal(url: string, options: OpenModalOptions): Promise<void>;
    /**
     * Sends a message to the page's parent.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#postMessage)
     */
    function postMessage(message: any, target?: string): Promise<any>;
    /**
     * Scrolls the page by a given number of pixels.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#scrollBy)
     */
    function scrollBy(x: number, y: number): Promise<void>;
    /**
     * Scrolls the page to a specific location on the page.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#scrollTo)
     */
    function scrollTo(x: number, y: number, options?: ScrollToOptions): Promise<void>;
    /**
     * Sends a tracking event to external analytics tools.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.html#trackEvent)
     */
    function trackEvent(eventName: string, parameters: trackingParameters.AddPaymentInfoEvent | trackingParameters.AddProductImpressionEvent | trackingParameters.AddToCartEvent | trackingParameters.ClickProductEvent | trackingParameters.CustomEvent | trackingParameters.InitiateCheckoutEvent | trackingParameters.PurchaseEvent | trackingParameters.RemoveFromCartEvent | trackingParameters.ViewContentEvent): void;
    /**
     * An object used when opening a modal window.
     */
    type OpenModalOptions = {
        /**
         * Width of the modal window.
         */
        width: number;
        /**
         * Height of the modal window.
         */
        height: number;
    };
    /**
     * An object used for providing options for the `scrollTo()` method.
     */
    type ScrollToOptions = {
        /**
         * Indicates whether to scroll with an animation. Defaults to `true`.
         */
        scrollAnimation: boolean;
    };
    /**
     * An object returned by the `getBoundingRect()` function that contains information about the window's size, the document's size, and the current scroll position.
     */
    type WindowSizeInfo = {
        /**
         * An object with `height` and `width` key:value pairs containing the size of the viewable area of the current browser window.
         */
        window: any;
        /**
         * An object with `height` and `width` key:value pairs containing the size of the actual body of the page, which may be larger or smaller than the current window.
         */
        document: any;
        /**
         * An object with `x` and `y` key:value pairs containing the scroll offset of the page within the window from the top-left corner.
         */
        scroll: any;
    };
    /**
     * The ConsentPolicy API is used to perform actions related to the user's allowed cookies and 3rd-party data transfer, such as for GDPR or CCPA purposes.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.ConsentPolicy.html#)
     */
    interface ConsentPolicy {
        /**
         * Gets the visitor's consent policy regarding allowed cookies and 3rd-party data transfer, such as for GDPR or CCPA purposes.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-window.ConsentPolicy.html#getCurrentConsentPolicy)
         */
        getCurrentConsentPolicy(): ConsentPolicy.PolicyDetails;
        /**
         * Sets the function that runs
         * when a visitor's consent policy was changed using
         * [`setConsentPolicy()`](#setConsentPolicy) or reset using
         * [`resetConsentPolicy()`](#resetConsentPolicy).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-window.ConsentPolicy.html#onConsentPolicyChanged)
         */
        onConsentPolicyChanged(handler: ConsentPolicy.ConsentPolicyChangedHandler): void;
        /**
         * Removes the current policy from the visitor's browser
         * and resets the visitor's consent policy to the default policy for the site.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-window.ConsentPolicy.html#resetConsentPolicy)
         */
        resetConsentPolicy(): Promise<void>;
        /**
         * Sets the current visitor's consent policy
         * regarding allowed cookies and data transfer to 3rd parties,
         * such as for GDPR or CCPA purposes.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-window.ConsentPolicy.html#setConsentPolicy)
         */
        setConsentPolicy(policy: ConsentPolicy.Policy): Promise<ConsentPolicy.PolicyDetails>;
    }
    /**
     * A [lightbox](https://support.wix.com/en/article/about-lightboxes) pops up on your site to grab your visitor's attention.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.Lightbox.html#)
     */
    interface Lightbox {
        /**
         * Closes the lightbox.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-window.Lightbox.html#close)
         */
        close(data?: any): void;
        /**
         * Returns the data object that was passed to a lightbox.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-window.Lightbox.html#getContext)
         */
        getContext(): any;
    }
    /**
     * The Multilingual API is used when working with the languages in a multilingual site.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.Multilingual.html#)
     */
    interface Multilingual {
        /**
         * Sets or gets the site's current display language.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-window.Multilingual.html#currentLanguage)
         */
        currentLanguage: string;
        /**
         * Gets whether the site has been set up to be shown in multiple languages.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-window.Multilingual.html#isEnabled)
         */
        readonly isEnabled: boolean;
        /**
         * Gets information about the site's languages.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-window.Multilingual.html#siteLanguages)
         */
        readonly siteLanguages: Multilingual.SiteLanguage[];
    }
    /**
     * The Rendering API is used to control when code is run as a page is being loaded.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.Rendering.html#)
     */
    interface Rendering {
        /**
         * Gets the current environment the rendering process is running in.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-window.Rendering.html#env)
         */
        readonly env: string;
        /**
         * **Deprecated:**  The `renderCycle` property no longer works as expected.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-window.Rendering.html#renderCycle)
         */
        readonly renderCycle: number;
        /**
         * **Deprecated:** This version of the `warmupData` property does not work as expected. A newer version is available at [`wix-window.warmupData`](wix-window.html#warmupData).
         * 	[Read more](https://www.wix.com/corvid/reference/wix-window.Rendering.html#warmupData)
         */
        readonly warmupData: boolean | number | string | any;
    }
    /**
     * The Warmup Data API is used to optimize data loading for sites that render both on the server and in the browser,
     *  allowing costly data fetching operations to be done only once.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.WarmupData.html#)
     */
    interface WarmupData {
        /**
         * Gets data from server-side code for use in client-side code.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-window.WarmupData.html#get)
         */
        get(key: string): any;
        /**
         * Sets data in server-side code for use in client-side code.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-window.WarmupData.html#set)
         */
        set(key: string, data: any): void;
    }
    /**
     * The ConsentPolicy API is used to perform actions related to the user's allowed cookies and 3rd-party data transfer, such as for GDPR or CCPA purposes.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.ConsentPolicy.html#)
     */
    namespace ConsentPolicy {
        /**
         * The event that occurred when the consent policy changed.
         */
        type ConsentPolicyChangedEvent = {};
        /**
         * The current user's consent policy settings.
         */
        type Policy = {
            /**
             * Consent for mandatory cookies for Wix websites, such as for security cookies. Wix places these cookies on your device and these cookies do not require user consent. Always `true`.
             */
            essential: boolean;
            /**
             * Consent for cookies placed on the user's device that "remember" user settings to improve user experience. For example, an indication that the user dismissed a popup. The default is `true`.
             */
            functional: boolean;
            /**
             * Consent for cookies used for analytics, such as Wix analytics, Google Analytics, Yandex Metrica, and so on. The default is `true`.
             */
            analytics: boolean;
            /**
             * Consent for cookies used for advertising purposes. This includes 3rd-party scripts and pixels that may potentially place advertising cookies on the device (such as Twitter page view and Facebook Pixel). The default is `true`.
             */
            advertising: boolean;
            /**
             * Consent for a user's personal data to be transferred to a 3rd party (such as Google Analytics, Facebook Pixel, and FullStory). The default is `true`.
             */
            dataToThirdParty: boolean;
        };
        /**
         * The complete details of the current user's consent policy.
         */
        type PolicyDetails = {
            /**
             * Whether the policy is the default consent policy set by the site owner. If `true`, either the user has not set a policy or the site owner has reset the policy.
             */
            defaultPolicy: boolean;
            /**
             * An object representing the user's current consent policy.
             */
            policy: ConsentPolicy.Policy;
            /**
             * If a cookie exists in the browser defining the current consent policy, the date the policy was set. Otherwise, undefined.
             */
            createdDate?: Date;
        };
        /**
         * Function that runs when a user's consent policy was changed using [`setConsentPolicy()`](#setConsentPolicy).
         */
        type ConsentPolicyChangedHandler = (event: ConsentPolicy.ConsentPolicyChangedEvent) => void;
    }
    /**
     * The Multilingual API is used when working with the languages in a multilingual site.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.Multilingual.html#)
     */
    namespace Multilingual {
        /**
         * An object returned by the `siteLanguages` property that contains information about the site's languages.
         */
        type SiteLanguage = {
            /**
             * The language's full name.
             */
            name: string;
            /**
             * The language's locale code, which represents a set of language-related formatting preferences.
             */
            locale: string;
            /**
             * The language's two-letter code.
             */
            languageCode: string;
            /**
             * The language's three-letter country code.
             */
            countryCode: string;
            /**
             * Whether the language is the site's primary language.
             */
            isPrimaryLanguage: boolean;
        };
    }
    /**
     * Objects used when calling the [`trackEvent()`](wix-window.html#trackEvent) function.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-window.trackingParameters.html#)
     */
    namespace trackingParameters {
        /**
         * An object used when sending an AddPaymentInfo track event.
         */
        type AddPaymentInfoEvent = {
            /**
             * Describes option information on a checkout page, such as selected payment method.
             */
            option?: string;
            /**
             * Origin of the event.
             */
            origin?: string;
        };
        /**
         * An object used when sending an AddProductImpression track event.
         */
        type AddProductImpressionEvent = {
            /**
             * Product information.
             */
            contents: trackingParameters.AddProductImpressionEventContents[];
            /**
             * Origin of the event.
             */
            origin?: string;
        };
        /**
         * An object used when sending an AddProductImpression track event.
         */
        type AddProductImpressionEventContents = {
            /**
             * Product ID.
             */
            id?: string;
            /**
             * Stock keeping unit code.
             */
            sku?: string;
            /**
             * Product name.
             */
            name: string;
            /**
             * Category of the page or product.
             */
            category?: string;
            /**
             * Product price.
             */
            price?: number;
            /**
             * Currency code.
             */
            currency?: string;
            /**
             * Brand name of the product.
             */
            brand?: string;
            /**
             * Variant of the product.
             */
            variant?: string;
            /**
             * List or collection the product is in.
             */
            list?: string;
            /**
             * Product's position in a list or collection.
             */
            position?: string;
        };
        /**
         * An object used when sending an AddToCart track event.
         */
        type AddToCartEvent = {
            /**
             * Product ID.
             */
            id?: string;
            /**
             * Stock keeping unit code.
             */
            sku?: string;
            /**
             * Product name.
             */
            name: string;
            /**
             * Product price.
             */
            price?: number;
            /**
             * Currency code.
             */
            currency?: string;
            /**
             * Category of the page or product.
             */
            category?: string;
            /**
             * Brand name of the product.
             */
            brand?: string;
            /**
             * Variant of the product.
             */
            variant?: string;
            /**
             * Product's position in a list or collection.
             */
            position?: string;
            /**
             * Product quantity.
             */
            quantity?: number;
            /**
             * Origin of the event.
             */
            origin?: string;
        };
        /**
         * An object used when sending an CheckoutStep track event.
         */
        type CheckoutStepEvent = {
            /**
             * Origin of the event.
             */
            origin?: string;
            /**
             * Checkout step number. Be sure to report
             *  consistent step values. For example, use `3` when this step follows
             *  `StartPayment` and `AddPaymentInfo` events.
             */
            step?: string;
            /**
             * Action the visitor has taken, such as `"Select shipping"`.
             */
            action?: string;
            /**
             * Describes option information on a checkout page, such as selected payment method.
             */
            option?: string;
        };
        /**
         * An object used when sending a ClickProduct track event.
         */
        type ClickProductEvent = {
            /**
             * Product ID.
             */
            id?: string;
            /**
             * Stock keeping unit code.
             */
            sku?: string;
            /**
             * Product name.
             */
            name: string;
            /**
             * Product price.
             */
            price?: number;
            /**
             * Currency code.
             */
            currency?: string;
            /**
             * Category of the page or product.
             */
            category?: string;
            /**
             * Brand name of the product.
             */
            brand?: string;
            /**
             * Variant of the product.
             */
            variant?: string;
            /**
             * List or collection the product is in.
             */
            list?: string;
            /**
             * Product's position in a list or collection.
             */
            position?: string;
            /**
             * Origin of the event.
             */
            origin?: string;
        };
        /**
         * An object used when sending a CustomEvent track event.
         */
        type CustomEvent = {
            /**
             * Product ID.
             */
            event: string;
            /**
             * The type of interaction. This parameter is required for Google Analytics.
             */
            eventAction?: string;
            /**
             * The event category. This parameter is optional for Google Analytics.
             */
            eventLabel?: string;
            /**
             * A numeric value associated with the event. This parameter is optional for Google Analytics.
             */
            eventValue?: number;
            /**
             * The object that was interacted with. This parameter is optional for Google Analytics.
             */
            eventCategory?: string;
        };
        /**
         * An object used when sending an InitiateCheckout track event.
         */
        type InitiateCheckoutEvent = {
            /**
             * Product information.
             */
            contents: trackingParameters.InitiateCheckoutEventContents[];
            /**
             * Origin of the event.
             */
            origin?: string;
        };
        /**
         * An object used when sending an InitiateCheckout track event.
         */
        type InitiateCheckoutEventContents = {
            /**
             * Product ID.
             */
            id?: string;
            /**
             * Stock keeping unit code.
             */
            sku?: string;
            /**
             * Product name.
             */
            name: string;
            /**
             * Category of the page or product.
             */
            category?: string;
            /**
             * Product price.
             */
            price?: number;
            /**
             * Currency code.
             */
            currency?: string;
            /**
             * Brand name of the product.
             */
            brand?: string;
            /**
             * Variant of the product.
             */
            variant?: string;
            /**
             * Product quantity.
             */
            quantity?: number;
        };
        /**
         * An object used when sending a Purchase track event.
         */
        type PurchaseEvent = {
            /**
             * Product ID.
             */
            id?: string;
            /**
             * Name of the store where the event occurred.
             */
            affiliation?: string;
            /**
             * Total amount of the purchase including shipping, taxes, etc.
             */
            revenue?: number;
            /**
             * Total tax charge.
             */
            tax?: number;
            /**
             * Total shipping charge.
             */
            shipping?: number;
            /**
             * Coupon code applied to the transaction.
             */
            coupon?: string;
            /**
             * Product information.
             */
            contents: trackingParameters.PurchaseEventContents[];
            /**
             * Origin of the event.
             */
            origin?: string;
        };
        /**
         * An object used when sending an Purchase track event.
         */
        type PurchaseEventContents = {
            /**
             * Product ID.
             */
            id?: string;
            /**
             * Product name.
             */
            name: string;
            /**
             * Category of the page or product.
             */
            category?: string;
            /**
             * Product price.
             */
            price?: number;
            /**
             * Currency code.
             */
            currency?: string;
            /**
             * Brand name of the product.
             */
            brand?: string;
            /**
             * Variant of the product.
             */
            variant?: string;
            /**
             * Product quantity.
             */
            quantity?: number;
        };
        /**
         * An object used when sending a RemoveFromCart track event.
         */
        type RemoveFromCartEvent = {
            /**
             * Product ID.
             */
            id?: string;
            /**
             * Product name.
             */
            name: string;
            /**
             * Product price.
             */
            price?: number;
            /**
             * Currency code.
             */
            currency?: string;
            /**
             * Category of the page or product.
             */
            category?: string;
            /**
             * Brand name of the product.
             */
            brand?: string;
            /**
             * Variant of the product.
             */
            variant?: string;
            /**
             * Product's position in a list or collection.
             */
            position?: string;
            /**
             * Product quantity.
             */
            quantity?: number;
            /**
             * Origin of the event.
             */
            origin?: string;
        };
        /**
         * An object used when sending an StartPayment track event.
         */
        type StartPaymentEvent = {
            /**
             * Origin of the event.
             */
            origin?: string;
            /**
             * Describes option information on a checkout page, such as selected payment method.
             */
            option?: string;
        };
        /**
         * An object used when sending a ViewContent track event.
         */
        type ViewContentEvent = {
            /**
             * Product ID.
             */
            id?: string;
            /**
             * Stock keeping unit code.
             */
            sku?: string;
            /**
             * Product name.
             */
            name: string;
            /**
             * Product price.
             */
            price?: number;
            /**
             * Currency code.
             */
            currency?: string;
            /**
             * Category of the page or product.
             */
            category?: string;
            /**
             * Brand name of the product.
             */
            brand?: string;
            /**
             * Variant of the product.
             */
            variant?: string;
            /**
             * List or collection the product is in.
             */
            list?: string;
            /**
             * Product's position in a list or collection.
             */
            position?: string;
            /**
             * Origin of the event.
             */
            origin?: string;
        };
    }
}

// /types/common/wix-storage.d.ts
/**
 * The wix-storage module contains functionality for the persistent
 *  storage of key/value data in the site visitor's browser.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-storage.html#)
 */
declare module 'wix-storage' {
    /**
     * Used for local storage of data.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-storage.html#local)
     */
    const local: Storage;
    /**
     * Used for memory storage of data.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-storage.html#memory)
     */
    const memory: Storage;
    /**
     * Used for session storage of data.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-storage.html#session)
     */
    const session: Storage;
    /**
     * Used for storing local, session, or memory key/value data in the visitor's browser.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-storage.Storage.html#)
     */
    interface Storage {
        /**
         * Removes **all** items from local, session, or memory storage.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-storage.Storage.html#clear)
         */
        clear(): void;
        /**
         * Gets an item from local, session, or memory storage.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-storage.Storage.html#getItem)
         */
        getItem(key: string): string;
        /**
         * Removes an item from local, session, or memory storage.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-storage.Storage.html#removeItem)
         */
        removeItem(key: string): void;
        /**
         * Stores an item in local, session, or memory storage.
         *  > **Note:** You can store up to 50kb of data in local and session storage and up to
         *  > 1mb in memory storage.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-storage.Storage.html#setItem)
         */
        setItem(key: string, value: string | number): void;
    }
}

// /types/common/wix-site.d.ts
/**
 * The wix-site module contains functionality for obtaining information about your site and its pages.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-site.html#)
 */
declare module 'wix-site' {
    import wixRouter from 'wix-router';
    /**
     * Gets a code representing the site's currency.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-site.html#currency)
     */
    const currency: string;
    /**
     * Gets information about the current page or lightbox.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-site.html#currentPage)
     */
    const currentPage: StructurePage | StructureLightbox;
    /**
     * Gets a code representing the site's language.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-site.html#language)
     */
    const language: string;
    /**
     * Gets the site's regional settings.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-site.html#regionalSettings)
     */
    const regionalSettings: string;
    /**
     * Gets the site revision ID.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-site.html#revision)
     */
    const revision: string;
    /**
     * Gets the site's timezone.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-site.html#timezone)
     */
    const timezone: string;
    /**
     * Gets the site display name.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-site.html#getSiteDisplayName)
     */
    function getSiteDisplayName(): string;
    /**
     * Returns information about the site's pages, prefixes, and lightboxes.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-site.html#getSiteStructure)
     */
    function getSiteStructure(): SiteStructure;
    /**
     * Optimizes resource fetching of pages and lightboxes in the site so they will load faster.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-site.html#prefetchPageResources)
     */
    function prefetchPageResources(prefetchItems: PrefetchItems): PrefetchResult;
    /**
     * Returns the sitemap for a router or dynamic page prefix.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-site.html#routerSitemap)
     */
    function routerSitemap(routerPrefix: string): Promise<wixRouter.WixRouterSitemapEntry[]>;
    /**
     * An object that contains information about which pages and lightboxes to
     *  prefetch resources for.
     */
    type PrefetchItems = {
        /**
         * The relative or absolute URLs of the pages in your site
         *  to prefetch resources for.
         */
        pages?: string[];
        /**
         * The names of the lightboxes in your site to prefetch
         *  resources for.
         *
         *  > **Note:** Pages are listed by relative or absolute URL, but lightboxes are listed by name.
         *  See [`wix-location.to()`](wix-location.html#to) to learn how to find a page's relative
         *  URL. You can find a lightbox's name by selecting the lightbox and clicking the settings button.
         */
        lightboxes?: string[];
    };
    /**
     * An object that is returned from a prefetch request.
     */
    type PrefetchResult = {
        /**
         * A success or failure message.
         */
        message: string;
        /**
         * The errors that occurred.
         */
        errors: PrefetchResultError;
    };
    /**
     * An object that is returned when a resource prefetch is unsuccessful.
     */
    type PrefetchResultError = {
        /**
         * The names of the pages for which prefetch failed.
         */
        pages: string[];
        /**
         * The names of the lightbox for which prefetch failed.
         */
        lightboxes: string[];
    };
    /**
     * An object that contains information about the site's prefixes.
     */
    type Prefix = {
        /**
         * The name of the prefix.
         */
        name: string;
        /**
         * The type of the prefix.
         *
         *  A site's routers, dynamic pages, and app pages all have prefixes.
         *
         *  One of:
         *
         *  + `"dynamicPages"`
         *  + `"router"`
         *  + `"app"`
         */
        type: string;
        /**
         * The prefix.
         */
        prefix: string;
        /**
         * If the prefix is an app's prefix, the `applicationId` property is the app's ID.
         */
        applicationId?: string;
    };
    /**
     * An object that contains information about the site's pages, prefixes, and lightboxes.
     */
    type SiteStructure = {
        /**
         * The pages of the site.
         *  Pages can be regular pages, dynamic pages, router pages, or pages from an app.
         */
        pages: StructurePage[];
        /**
         * The prefixes of the site's routers and dynamic pages.
         */
        prefixes: Prefix[];
        /**
         * The site's lightboxes.
         */
        lightboxes: StructureLightbox[];
    };
    /**
     * An object that contains information about a lightbox on the site.
     */
    type StructureLightbox = {
        /**
         * The name of the lightbox.
         */
        name: string;
    };
    /**
     * An object that contains information about a page on the site.
     */
    type StructurePage = {
        /**
         * The name of the page.
         */
        name: string;
        /**
         * The type of the page: `"static"` or `"template"`.
         */
        type: string;
        /**
         * The URL of the page. If the page is a `static` page the `url` property is the page's SEO URL.
         */
        url?: string;
        /**
         * If the page is an app page, the `applicationId` property is the app's ID.
         */
        applicationId?: string;
        /**
         * If the page is a router or dynamic page, the `prefix` property is the page's prefix.
         */
        prefix?: string;
        /**
         * If the page is the Home page, `isHomePage` is `true`. Otherwise, it does not exist.
         */
        isHomePage?: boolean;
    };
}

// /types/common/wix-location.d.ts
/**
 * The wix-location module contains functionality for getting information
 *  about the URL of the current page and for navigating to other pages.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-location.html#)
 */
declare module 'wix-location' {
    /**
     * Gets the base URL of the current page.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-location.html#baseUrl)
     */
    const baseUrl: string;
    /**
     * Gets the path of the current page's URL.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-location.html#path)
     */
    const path: string[];
    /**
     * Gets the prefix of a dynamic page's or router page's URL.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-location.html#prefix)
     */
    const prefix: string;
    /**
     * Gets the protocol of the current page's URL.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-location.html#protocol)
     */
    const protocol: string;
    /**
     * Gets an object that represents the query segment of the current page's URL.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-location.html#query)
     */
    const query: any;
    /**
     * Gets an object used to manage the query segment of the current page's URL.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-location.html#queryParams)
     */
    const queryParams: QueryParams;
    /**
     * Gets the full URL of the current page.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-location.html#url)
     */
    const url: string;
    /**
     * Adds an event handler that runs when an application page's URL changes.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-location.html#onChange)
     */
    function onChange(handler: LocationChangeHandler): void;
    /**
     * Directs the browser to navigate to the specified URL.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-location.html#to)
     */
    function to(url: string, options?: NavOptions): void;
    /**
     * An object containing information about a location.
     */
    type Location = {
        /**
         * Location path.
         */
        path: string;
    };
    /**
     * An object containing navigation and scrolling options.
     */
    type NavOptions = {
        /**
         * Whether the page scrolls to the top when navigating to the specified URL for a Wix page. Defaults to `false`. When `true`, the page remains at the same Y-axis position as the previously-viewed page. This setting does not affect scrolling for external URLs.
         */
        disableScrollToTop?: boolean;
    };
    /**
     * Handles location change events.
     */
    type LocationChangeHandler = (event: Location) => void;
    /**
     * An object used to manage the query segment of the current page's URL.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-location.QueryParams.html#)
     */
    interface QueryParams {
        /**
         * Adds query parameters to the current page's URL.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-location.QueryParams.html#add)
         */
        add(toAdd: any): void;
        /**
         * Removes query parameters from the current page's URL.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-location.QueryParams.html#remove)
         */
        remove(toRemove: string[]): void;
    }
}

// /types/common/$w.d.ts
import wixDataset from 'wix-dataset';
declare global {
    /**
     * The `$w` namespace contains everything you need in order to work
     *  with your site's components.
     * 	[Read more](https://www.wix.com/corvid/reference/$w.html#)
     */
    namespace $w {
        type dataset = wixDataset.Dataset;
        type router_dataset = wixDataset.DynamicDataset;
        type EventHandler = (event: Event, $w: $w) => void;
        type ForItemCallback = ($item: $w, itemData: any, index: number) => void;
        /**
         * Handles events fired when a gallery moves to a new image.
         */
        type GalleryItemChangedEventHandler = (event: GalleryItemChangedEvent, $w: $w) => void;
        /**
         * Handles events fired when an image in a gallery is clicked.
         */
        type GalleryItemClickedEventHandler = (event: GalleryItemClickedEvent, $w: $w) => void;
        /**
         * Handles events fired when the code in an HtmlComponent sends a message.
         */
        type HtmlComponentMessageEventHandler = (event: HtmlComponentMessageEvent, $w: $w) => void;
        type HtmlElementEventHandler = (event: HtmlComponentMessageEvent, $w: $w) => void;
        /**
         * Handles events fired when a user hovers over a star on the rating component.
         */
        type IconMouseInEventHandler = (event: IconMouseInEvent) => void;
        type ItemReadyEventHandler = ($item: $w, itemData: any, index: number) => void;
        type ItemRemovedEventHandler = (itemData: any) => void;
        /**
         * Handles events fired when the keyboard is pressed.
         */
        type KeyboardEventHandler = (event: KeyboardEvent, $w: $w) => void;
        /**
         * Handles events fired when the mouse is clicked.
         */
        type MouseEventHandler = (event: MouseEvent, $w: $w) => void;
        /**
         * Handles events fired when an item in a quick action bar is clicked.
         */
        type QuickActionBarItemClickedEventHandler = (event: QuickActionBarItemClickedEvent, $w: $w) => void;
        /**
         * Function that runs when all page elements have finished loading.
         */
        type ReadyHandler = () => Promise<void> | void;
        /**
         * Handles events fired when a table cell is selected.
         */
        type TableCellEventHandler = (event: TableCellEvent, $w: $w) => void;
        /**
         * Handles events fired when a table row is selected.
         */
        type TableRowEventHandler = (event: TableRowEvent, $w: $w) => void;
        /**
         * Function that runs when custom validation is checked.
         */
        type Validator = (value: string | UploadButton.File[] | boolean, reject: Function) => void;
        type ViewChangeEventHandler = (event: ViewChangeEvent) => void;
        type ViewChangeOperation = (options: AppointmentField.OperationOptions) => any;
        /**
         * The menu in a user profile.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.AccountNavBar.html#)
         */
        interface AccountNavBar extends Element, HiddenCollapsedMixin {
        }
        /**
         * `AddressInput` is used for entering addresses. It lets users type
         * an address, and suggests exact locations using Google Maps services.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.AddressInput.html#)
         */
        interface AddressInput extends LabelMixin, FormElement, DisabledMixin, RequiredMixin, ReadOnlyMixin, HiddenCollapsedMixin, FocusMixin, ClickableMixin {
            /**
             * Sets or gets the filter of the address input.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AddressInput.html#filter)
             */
            filter: AddressInput.AddressFilter;
            /**
             * Sets or gets the placeholder of the address input.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AddressInput.html#placeholder)
             */
            placeholder: string;
            /**
             * Sets or gets the value of the address input.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AddressInput.html#value)
             */
            value: AddressInput.Address;
        }
        /**
         * [Anchors](https://www.wix.com/support/html5/article/about-anchors)
         *  are invisible position markers which you can place anywhere on your site.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Anchor.html#)
         */
        interface Anchor extends Node, ViewportMixin {
            /**
             * Gets the name of an anchor.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Anchor.html#name)
             */
            readonly name: string;
        }
        /**
         * Use an `AppointmentField` to select dates, times, and timezones for scheduling appointments.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.AppointmentField.html#)
         */
        interface AppointmentField extends FormElement, HiddenCollapsedMixin, DisabledMixin, FocusMixin, ClickableMixin, RequiredMixin {
            /**
             * Sets or gets a list of dates and times that a site visitor can select.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AppointmentField.html#dateTimeRanges)
             */
            dateTimeRanges: AppointmentField.dateTimeRangeInfo;
            /**
             * Sets or gets a list of days in the week that are not selectable.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AppointmentField.html#disabledDaysOfWeek)
             */
            disabledDaysOfWeek: number[];
            /**
             * Sets or gets the latest date that a site visitor can select.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AppointmentField.html#maxDate)
             */
            maxDate: Date;
            /**
             * Sets or gets the earliest date that a site visitor can select.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AppointmentField.html#minDate)
             */
            minDate: Date;
            /**
             * Sets or gets the minimum amount of time before an appointment starts that a time slot is displayed.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AppointmentField.html#schedulingNotice)
             */
            schedulingNotice: number;
            /**
             * Sets  or gets the interval between the times displayed in the time picker.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AppointmentField.html#timeIncrements)
             */
            timeIncrements: number;
            /**
             * Sets or gets the title of an appointment field.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AppointmentField.html#title)
             */
            title: string;
            /**
             * Sets or gets the time format.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AppointmentField.html#useAmPmFormat)
             */
            useAmPmFormat: boolean;
            /**
             * Sets or gets the date and time value of the appointment field.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AppointmentField.html#value)
             */
            value: Date;
            /**
             * Sets or gets the timezone dropdown value.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AppointmentField.html#visitorTimeZone)
             */
            visitorTimeZone: string;
            /**
             * Adds an event handler that triggers when the appointment field's year or month changes.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AppointmentField.html#onViewChange)
             *  @eventType onViewChange
             */
            onViewChange(handler: ViewChangeEventHandler, operation?: ViewChangeOperation, timeout?: number): void;
            /**
             * Resets the appointment field to its original values.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AppointmentField.html#reset)
             */
            reset(): void;
        }
        /**
         * An element for playing audio files.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#)
         */
        interface AudioPlayer extends Element, HiddenCollapsedMixin {
            /**
             * Sets or gets the name of the artist displayed in an audio player.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#artistName)
             */
            artistName: string;
            /**
             * Sets or gets the cover image displayed in an audio player.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#coverImage)
             */
            coverImage: string;
            /**
             * Gets the current play time from the beginning of the audio track, in seconds.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#currentTime)
             */
            readonly currentTime: number;
            /**
             * Gets the total play time of the audio track, in seconds.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#duration)
             */
            readonly duration: number;
            /**
             * Indicates if the volume is currently muted.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#isMuted)
             */
            readonly isMuted: boolean;
            /**
             * Indicates if an audio track is currently playing.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#isPlaying)
             */
            readonly isPlaying: boolean;
            /**
             * Sets or gets the file location of the audio file.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#src)
             */
            src: string;
            /**
             * Sets or gets the track name displayed in an audio player.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#trackName)
             */
            trackName: string;
            /**
             * Sets or gets an audio player's volume.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#volume)
             */
            volume: number;
            /**
             * Mutes audio volume.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#mute)
             */
            mute(): Promise<void>;
            /**
             * Adds an event handler that runs when playback has ended.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#onEnded)
             *  @eventType onEnded
             */
            onEnded(handler: EventHandler): AudioPlayer;
            /**
             * Adds an event handler that runs when playback is paused.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#onPause)
             *  @eventType onPause
             */
            onPause(handler: EventHandler): AudioPlayer;
            /**
             * Adds an event handler that runs when playback is started or restarted.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#onPlay)
             *  @eventType onPlay
             */
            onPlay(handler: EventHandler): AudioPlayer;
            /**
             * Adds an event handler that runs when playback progresses.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#onProgress)
             *  @eventType onProgress
             */
            onProgress(handler: EventHandler): AudioPlayer;
            /**
             * Pauses playback.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#pause)
             */
            pause(): Promise<void>;
            /**
             * Begins or resumes playback.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#play)
             */
            play(): Promise<void>;
            /**
             * Moves playback to the specified time, in seconds.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#seek)
             */
            seek(time: number): Promise<void>;
            /**
             * Stops playback.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#stop)
             */
            stop(): Promise<void>;
            /**
             * Toggles playback.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#togglePlay)
             */
            togglePlay(): Promise<void>;
            /**
             * Unmutes audio volume.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.AudioPlayer.html#unmute)
             */
            unmute(): Promise<void>;
        }
        /**
         * Provides functionality for background images in certain elements.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Background.html#)
         */
        interface Background {
            /**
             * Sets or gets an object containing information about the element's background.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Background.html#background)
             */
            background: Background.BackgroundOptions;
        }
        /**
         * Container [boxes](https://support.wix.com/en/article/container-boxes)
         *  are used to structure your site.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Box.html#)
         */
        interface Box extends Element, HiddenCollapsedMixin, ClickableMixin, ContainableMixin, StyleMixin {
            /**
             * Gets an object containing information about the box's styles.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Box.html#style)
             */
            readonly style: Style;
        }
        /**
         * Breadcrumbs are used for navigating between site pages.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Breadcrumbs.html#)
         */
        interface Breadcrumbs extends HiddenCollapsedMixin, ViewportMixin {
            /**
             * Indicates if an ellipsis is displayed in the breadcrumbs trail.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Breadcrumbs.html#isEllipsisVisible)
             */
            readonly isEllipsisVisible: boolean;
            /**
             * Sets or gets breadcrumbs items.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Breadcrumbs.html#items)
             */
            items: Breadcrumbs.Item[];
            /**
             * Sets or gets the number of items that appear in the breadcrumbs trail after an ellipsis.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Breadcrumbs.html#itemsAfterEllipsis)
             */
            itemsAfterEllipsis: number;
            /**
             * Sets or gets the number of items that appear in the breadcrumbs trail before an ellipsis.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Breadcrumbs.html#itemsBeforeEllipsis)
             */
            itemsBeforeEllipsis: number;
            /**
             * Hides an ellipsis displayed in a breadcrumbs element and displays the middle items of the breadcrumbs trail instead.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Breadcrumbs.html#hideEllipsis)
             */
            hideEllipsis(): void;
            /**
             * Displays an ellipsis in a breadcrumbs element instead of the middle items of the breadcrumbs trail.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Breadcrumbs.html#showEllipsis)
             */
            showEllipsis(): void;
        }
        /**
         * A button on your site.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Button.html#)
         */
        interface Button extends Element, HiddenCollapsedMixin, DisabledMixin, LinkableMixin, ClickableMixin, StyleMixin, LabelMixin {
            /**
             * Sets or gets the icon image displayed on the button.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Button.html#icon)
             */
            icon: string;
            /**
             * Indicates if the button’s icon is collapsed or expanded.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Button.html#iconCollapsed)
             */
            readonly iconCollapsed: boolean;
            /**
             * Sets or gets a button's label.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Button.html#label)
             */
            label: string;
            /**
             * Sets or gets the button's link.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Button.html#link)
             */
            link: string;
            /**
             * Gets an object containing information about the button's styles.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Button.html#style)
             */
            readonly style: Style;
            /**
             * Collapses the button’s icon and sets its `iconCollapsed` property to `true`.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Button.html#collapseIcon)
             */
            collapseIcon(): Promise<void>;
            /**
             * Expands the button’s icon and sets its `iconCollapsed` property to `false`.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Button.html#expandIcon)
             */
            expandIcon(): Promise<void>;
            /**
             * Adds an event handler that runs when the mouse pointer is moved
             *  onto the element.
             *
             *  You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Button.html#onMouseIn)
             */
            onMouseIn(handler: MouseEventHandler): Button;
            /**
             * Adds an event handler that runs when the mouse pointer is moved
             *  off of the element.
             *
             *  You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Button.html#onMouseOut)
             */
            onMouseOut(handler: MouseEventHandler): Button;
        }
        /**
         * The reCAPTCHA element allows you to present a challenge-response test to site visitors to determine whether they are human or a bot.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Captcha.html#)
         */
        interface Captcha extends Element, FocusMixin, HiddenCollapsedMixin {
            /**
             * Gets the reCAPTCHA token.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Captcha.html#token)
             */
            readonly token: string;
            /**
             * Adds an event handler that runs when a connection error occurs while completing the CAPTCHA challenge.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Captcha.html#onError)
             *  @eventType onError
             */
            onError(handler: Captcha.ErrorHandler): void;
            /**
             * Adds an event handler that runs when the CAPTCHA token expires.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Captcha.html#onTimeout)
             *  @eventType onTimeout
             */
            onTimeout(handler: Captcha.TimeoutHandler): void;
            /**
             * Adds an event handler that runs when the CAPTCHA challenge is successfully completed.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Captcha.html#onVerified)
             *  @eventType onVerified
             */
            onVerified(handler: Captcha.VerifiedHandler): void;
            /**
             * Resets the reCAPTCHA element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Captcha.html#reset)
             */
            reset(): Promise<void>;
        }
        /**
         * An icon that leads users to the shopping cart.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.CartIcon.html#)
         */
        interface CartIcon extends Element, HiddenCollapsedMixin {
            /**
             * **Deprecated.**
             * This function will continue to work, but a newer version is available at
             * [wix-stores.cart.addProducts()](https://www.wix.com/velo/reference/wix-stores/cart/addproducts).
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CartIcon.html#addProductsToCart)
             */
            addProductsToCart(products: CartIcon.AddToCartItem[]): Promise<void>;
            /**
             * **Deprecated.**
             * This function will continue to work, but a newer version is available at
             * [wix-stores.cart.addProducts()](https://www.wix.com/velo/reference/wix-stores/cart/addproducts).
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CartIcon.html#addToCart)
             */
            addToCart(productID: string, quantity?: number, options?: CartIcon.AddToCartOptions): Promise<void>;
        }
        /**
         * An element for sending and receiving chat messages.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#)
         */
        interface Chatbox extends Element, HiddenMixin {
            /**
             * Indicates if an element appears on all pages or only on the current page.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#global)
             */
            readonly global: boolean;
            /**
             * Indicates if the chatbox is visible or hidden.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#hidden)
             */
            readonly hidden: boolean;
            /**
             * Indicates if the element is actually visible.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#isVisible)
             */
            readonly isVisible: boolean;
            /**
             * Indicates if the chatbox is maximized.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#maximized)
             */
            readonly maximized: boolean;
            /**
             * Note: This standard element property is not relevant for Chatbox.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#parent)
             */
            readonly parent: Node;
            /**
             * Expands the chatbox and focuses it on the specified chat channel.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#focusChannel)
             */
            focusChannel(channelInfo: Chatbox.ChannelInfo): Promise<void>;
            /**
             * Gets a chatbox channel.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#getChannel)
             */
            getChannel(channelInfo: Chatbox.ChannelInfo): Promise<Chatbox.Channel>;
            /**
             * Gets a list of available chat channels for a site visitor.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#getChannelList)
             */
            getChannelList(): Promise<Chatbox.Channel[]>;
            /**
             * Expands the chatbox and sets its [`maximized`](#maximized) property to `true`.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#maximize)
             */
            maximize(): Promise<void>;
            /**
             * Collapses the chatbox and sets its [`maximized`](#maximized) property to `false`.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#minimize)
             */
            minimize(): Promise<void>;
            /**
             * An event that fires when the chatbox is maximized.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#onMaximize)
             */
            onMaximize(): void;
            /**
             * An event that fires when a site visitor receives a chat message.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#onMessageReceived)
             */
            onMessageReceived(message: Chatbox.Message): void;
            /**
             * An event that fires when a site visitor sends a chat message.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#onMessageSent)
             */
            onMessageSent(message: Chatbox.Message): void;
            /**
             * An event that fires when the chatbox is minimized.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#onMinimize)
             */
            onMinimize(): void;
            /**
             * Note: This standard element event is not relevant for Chatbox.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#onViewportEnter)
             *  @eventType viewportEnter
             */
            onViewportEnter(handler: EventHandler): Element;
            /**
             * Note: This standard element event is not relevant for Chatbox.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#onViewportLeave)
             *  @eventType viewportLeave
             */
            onViewportLeave(handler: EventHandler): Element;
            /**
             * Note: This standard element function is not relevant for Chatbox.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#scrollTo)
             */
            scrollTo(): Promise<void>;
            /**
             * Sends a chat message from a site visitor.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#sendMessage)
             */
            sendMessage(messageInfo: Chatbox.MessageInfo): Promise<void>;
        }
        /**
         * Checkboxes are used for a single binary choice.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Checkbox.html#)
         */
        interface Checkbox extends LabelMixin, FormElement, DisabledMixin, HiddenCollapsedMixin, FocusMixin, ClickableMixin, StyleMixin, RequiredMixin, CheckedMixin {
            /**
             * Sets or gets whether a checkbox is checked.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Checkbox.html#checked)
             */
            checked: boolean;
            /**
             * Gets or sets if a checkbox is required to be checked.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Checkbox.html#required)
             */
            required: boolean;
            /**
             * Gets an object containing information about the checkbox's styles.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Checkbox.html#style)
             */
            readonly style: Style;
            /**
             * Sets or gets a checkbox's value.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Checkbox.html#value)
             */
            value: string;
        }
        /**
         * Checkbox groups are used for selecting any number of the given
         *  options.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.CheckboxGroup.html#)
         */
        interface CheckboxGroup extends LabelMixin, FormElement, HiddenCollapsedMixin, DisabledMixin, FocusMixin, ClickableMixin, StyleMixin, RequiredMixin {
            /**
             * Sets or gets the options of a checkbox group.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CheckboxGroup.html#options)
             */
            options: CheckboxGroup.Option[];
            /**
             * Sets or gets the indices of the selected options.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CheckboxGroup.html#selectedIndices)
             */
            selectedIndices: number[];
            /**
             * Gets an object containing information about the checkbox group's styles.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CheckboxGroup.html#style)
             */
            readonly style: Style;
            /**
             * Sets or gets the value of the selected options.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CheckboxGroup.html#value)
             */
            value: string[];
        }
        /**
         * Provides functionality for elements that can be checked.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.CheckedMixin.html#)
         */
        interface CheckedMixin {
            /**
             * Sets or gets whether the element is checked or not.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CheckedMixin.html#checked)
             */
            checked: boolean;
        }
        /**
         * Provides functionality for elements that can be clicked.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.ClickableMixin.html#)
         */
        interface ClickableMixin {
            /**
             * Adds an event handler that runs when the element is clicked.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ClickableMixin.html#onClick)
             *  @eventType click
             */
            onClick(handler: MouseEventHandler): Element;
            /**
             * Adds an event handler that runs when the element is double-clicked.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ClickableMixin.html#onDblClick)
             *  @eventType dblClick
             */
            onDblClick(handler: MouseEventHandler): Element;
        }
        /**
         * Provides functionality for elements that can be collapsed.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.CollapsedMixin.html#)
         */
        interface CollapsedMixin {
            /**
             * Indicates if the element is collapsed or expanded.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CollapsedMixin.html#collapsed)
             */
            readonly collapsed: boolean;
            /**
             * Collapses the element and sets its `collapsed` property to `true`.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CollapsedMixin.html#collapse)
             */
            collapse(): Promise<void>;
            /**
             * Expands the element and sets its `collapsed` property to `false`.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CollapsedMixin.html#expand)
             */
            expand(): Promise<void>;
        }
        /**
         * A text element for managing large amounts of text.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.CollapsibleTextBox.html#)
         */
        interface CollapsibleTextBox extends Element, HiddenCollapsedMixin, ClickableMixin {
            /**
             * Indicates whether the ellipsis functionality is turned on.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CollapsibleTextBox.html#ellipsisEnabled)
             */
            readonly ellipsisEnabled: boolean;
            /**
             * Sets or gets the maximum number of lines of introductory text in the collapsible text box.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CollapsibleTextBox.html#maxLines)
             */
            maxLines: number;
            /**
             * Sets or gets the data object of the read more action for the collapsible text box.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CollapsibleTextBox.html#readMoreActionData)
             */
            readMoreActionData: CollapsibleTextBox.ExpandOnCurrentPage | CollapsibleTextBox.LinkToContent;
            /**
             * Sets or gets the type of read more action for the collapsible text box.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CollapsibleTextBox.html#readMoreActionType)
             */
            readMoreActionType: string;
            /**
             * Sets or gets the plain-text content of a collapsible text box.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CollapsibleTextBox.html#text)
             */
            text: string;
            /**
             * Adds a read more button that links to the remaining text when clicked.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CollapsibleTextBox.html#addReadMoreButton)
             */
            addReadMoreButton(buttonText?: string): void;
            /**
             * Collapses the collapsible text box and displays the introductory text with an ellipsis.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CollapsibleTextBox.html#collapseText)
             */
            collapseText(): void;
            /**
             * Turns off the ellipsis functionality.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CollapsibleTextBox.html#disableEllipsis)
             */
            disableEllipsis(): void;
            /**
             * Turns on the ellipsis functionality.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CollapsibleTextBox.html#enableEllipsis)
             */
            enableEllipsis(): void;
            /**
             * Expands the collapsible text box, displays the full text, and hides the ellipsis.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CollapsibleTextBox.html#expandText)
             */
            expandText(): void;
            /**
             * Removes the read more button that links to the remaining text when clicked.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CollapsibleTextBox.html#removeReadMoreButton)
             */
            removeReadMoreButton(): void;
        }
        /**
         * A `Column` is a component part of a `ColumnStrip`.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Column.html#)
         */
        interface Column extends Element, HiddenCollapsedMixin, Background, ClickableMixin, ContainableMixin {
        }
        /**
         * A `ColumnStrip` is a strip of `Column` elements.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.ColumnStrip.html#)
         */
        interface ColumnStrip extends Element, Background, HiddenCollapsedMixin, ClickableMixin, ContainableMixin {
            /**
             * Gets an object containing information about the column strip's background, such as its image or video source.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ColumnStrip.html#background)
             */
            readonly background: Document.BackgroundOptions;
            /**
             * Gets a list of all the columns contained in the column strip.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ColumnStrip.html#columns)
             */
            readonly columns: Column[];
        }
        /**
         * Provides functionality for elements that can contain other elements.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.ContainableMixin.html#)
         */
        interface ContainableMixin {
            /**
             * Gets an array of the elements that are contained within the element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ContainableMixin.html#children)
             */
            readonly children: (Element & AnyProperties)[];
        }
        /**
         * A container for Repeater items.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Container.html#)
         */
        interface Container extends Element, HiddenCollapsedMixin, Background, ClickableMixin, ContainableMixin {
        }
        /**
         * An API for rendering a custom element.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.CustomElement.html#)
         */
        interface CustomElement extends Element, HiddenCollapsedMixin {
            /**
             * Sets or gets the SEO markup to be rendered for search engine bots.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CustomElement.html#seoMarkup)
             */
            seoMarkup: string;
            /**
             * Registers a callback function in Velo for an event triggered from the custom element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CustomElement.html#on)
             */
            on(eventName: string, callBackFunction: Function): void;
            /**
             * Sets an HTML attribute on the custom element's DOM node.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.CustomElement.html#setAttribute)
             */
            setAttribute(key: string, value: string | boolean | number): void;
        }
        /**
         * A `DatePicker` is used for entering dates. It lets site visitors populate a
         *  date field by picking a date using a calendar popup.
         * You can enable and disable dates, date ranges, and days of the week  on your date picker.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.DatePicker.html#)
         */
        interface DatePicker extends LabelMixin, FormElement, HiddenCollapsedMixin, DisabledMixin, FocusMixin, ReadOnlyMixin, ClickableMixin, RequiredMixin {
            /**
             * Sets or gets the format of the date displayed in the date picker.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.DatePicker.html#dateFormat)
             */
            dateFormat: string;
            /**
             * Sets or gets ranges of dates that a site visitor can't select.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.DatePicker.html#disabledDateRanges)
             */
            disabledDateRanges: DatePicker.DateRange[];
            /**
             * **Deprecated.** This property will continue to work, but a newer version is available at [`disabledDateRanges`](https://www.wix.com/velo/reference/$w/datepicker/disableddateranges).
             * 	[Read more](https://www.wix.com/corvid/reference/$w.DatePicker.html#disabledDates)
             */
            disabledDates: Date[];
            /**
             * Sets or gets the days of the week that a site visitor can't select.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.DatePicker.html#disabledDaysOfWeek)
             */
            disabledDaysOfWeek: number[];
            /**
             * Sets or gets ranges of dates that a site visitor can select.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.DatePicker.html#enabledDateRanges)
             */
            enabledDateRanges: DatePicker.DateRange[];
            /**
             * Sets or gets the latest date that a site visitor can select.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.DatePicker.html#maxDate)
             */
            maxDate: Date;
            /**
             * Sets or gets the earliest date that a site visitor can select.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.DatePicker.html#minDate)
             */
            minDate: Date;
            /**
             * Sets or gets the date picker's timezone.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.DatePicker.html#timeZone)
             */
            timeZone: string;
            /**
             * Sets or gets the value of the date picker.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.DatePicker.html#value)
             */
            value: Date;
        }
        /**
         * Provides functionality for elements that can be disabled.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.DisabledMixin.html#)
         */
        interface DisabledMixin {
            /**
             * Indicates if the element is enabled or disabled.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.DisabledMixin.html#enabled)
             */
            readonly enabled: boolean;
            /**
             * Disables the element and sets its `enabled` property to `false`.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.DisabledMixin.html#disable)
             */
            disable(): Promise<void>;
            /**
             * Enables the element and sets its `enabled` property to `true`.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.DisabledMixin.html#enable)
             */
            enable(): Promise<void>;
        }
        /**
         * A complete web page, which consists of a Header, Page, and Footer.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Document.html#)
         */
        interface Document {
            /**
             * Gets an object containing information about the document's background, such as its image or video source.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Document.html#background)
             */
            readonly background: Document.BackgroundOptions;
            /**
             * Gets the document's Header, Page, and Footer.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Document.html#children)
             */
            readonly children: Node[];
            /**
             * Gets the document's type.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Document.html#type)
             */
            readonly type: string;
        }
        /**
         * Dropdowns are used for selecting one of a number of options.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Dropdown.html#)
         */
        interface Dropdown extends LabelMixin, FormElement, HiddenCollapsedMixin, DisabledMixin, FocusMixin, ClickableMixin, StyleMixin, RequiredMixin {
            /**
             * Sets or gets the options in a dropdown.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Dropdown.html#options)
             */
            options: Dropdown.Option[];
            /**
             * Sets or gets the dropdown's placeholder text.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Dropdown.html#placeholder)
             */
            placeholder: string;
            /**
             * Sets or gets the index of the selected option.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Dropdown.html#selectedIndex)
             */
            selectedIndex: number;
            /**
             * Gets an object containing information about the dropdown's styles.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Dropdown.html#style)
             */
            readonly style: Style;
            /**
             * Sets or gets an element's value.
             * > **Notes:**
             * > + Changing a dropdown's `value` in code does not trigger an `onChange` event.
             * >
             * >
             * > + If an element is connected to a dataset, setting the element's `value`
             * >   in code does not set the value of the connected field in the dataset.
             * >   That means if you use the dataset to perform a submit, the value changed
             * >   in code is not reflected in the submitted item.
             * >
             * >
             * > + To submit the new value using a dataset, set the field's value using the
             * >   [`setFieldValue()`](wix-dataset.html#setFieldValue) function before
             * >   performing the submit.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Dropdown.html#value)
             */
            value: string;
            /**
             * Adds an event handler that runs when an input element's value
             *  is changed.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Dropdown.html#onChange)
             */
            onChange(handler: EventHandler): Dropdown;
        }
        /**
         * Use effect options to customize an effect when [showing]($w.HiddenMixin.html#show) or [hiding]($w.HiddenMixin.html#hide) an element.
         *  Effect options include arcs, bouncing, fading, flipping, floating, flying in/out, folding, gliding and more.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.EffectOptions.html#)
         */
        interface EffectOptions {
        }
        /**
         * Provides basic functionality for elements.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Element.html#)
         */
        interface Element extends Node, ViewportMixin {
            /**
             * Indicates if an element is currently in the [DOM structure](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction).
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Element.html#rendered)
             */
            readonly rendered: boolean;
            /**
             * Adds an event handler that runs when the mouse pointer is moved
             *  onto the element.
             *
             *  You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Element.html#onMouseIn)
             *  @eventType mouseenter
             */
            onMouseIn(handler: MouseEventHandler): Element;
            /**
             * Adds an event handler that runs when the mouse pointer is moved
             *  off of the element.
             *
             *  You can also [define an event handler using the Properties and Events panel](https://support.wix.com/en/article/velo-reacting-to-user-actions-using-events).
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Element.html#onMouseOut)
             *  @eventType mouseleave
             */
            onMouseOut(handler: MouseEventHandler): Element;
        }
        /**
         * Events are fired when certain actions occur to elements.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Event.html#)
         */
        interface Event {
            /**
             * Gets the context in which an event was fired.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Event.html#context)
             */
            readonly context: Event.EventContext;
            /**
             * Gets the element that the event was fired on.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Event.html#target)
             */
            readonly target: Element & AnyProperties;
            /**
             * Gets the type of event that was fired.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Event.html#type)
             */
            readonly type: string;
        }
        /**
         * Provides functionality for elements that can set and lose focus.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.FocusMixin.html#)
         */
        interface FocusMixin {
            /**
             * Removes focus from the element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.FocusMixin.html#blur)
             */
            blur(): void;
            /**
             * Places focus on the element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.FocusMixin.html#focus)
             */
            focus(): void;
            /**
             * Adds an event handler that runs when the element loses focus.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.FocusMixin.html#onBlur)
             *  @eventType blur
             */
            onBlur(handler: EventHandler): Element;
            /**
             * Adds an event handler that runs when the element receives focus.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.FocusMixin.html#onFocus)
             *  @eventType focus
             */
            onFocus(handler: EventHandler): Element;
        }
        /**
         * The footer is the area of your site that appears at the bottom and
         *  throughout all of your pages.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Footer.html#)
         */
        interface Footer extends Element, ClickableMixin, ContainableMixin, StyleMixin {
            /**
             * Gets an object containing information about the footer's styles.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Footer.html#style)
             */
            readonly style: Style;
        }
        /**
         * A container for the input elements and buttons in a `WixForms` `$w` element.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Form.html#)
         */
        interface Form extends Element, ClickableMixin, ContainableMixin, HiddenCollapsedMixin, StyleMixin {
            /**
             * Gets an object containing information about the styles of the form.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Form.html#style)
             */
            readonly style: Style;
        }
        /**
         * Provides functionality related to user input elements.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.FormElement.html#)
         */
        interface FormElement extends Element, ValidatableMixin, ValueMixin {
        }
        /**
         * A gallery for displaying multiple items.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Gallery.html#)
         */
        interface Gallery extends Element, HiddenCollapsedMixin, PlayableMixin {
            /**
             * Sets or gets the action that occurs when an item in the gallery is clicked.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Gallery.html#clickAction)
             */
            clickAction: string;
            /**
             * Gets the index of the gallery's current item.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Gallery.html#currentIndex)
             */
            readonly currentIndex: number;
            /**
             * Gets an object containing information about the current item.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Gallery.html#currentItem)
             */
            readonly currentItem: Gallery.ImageItem | Gallery.VideoItem;
            /**
             * Gets an object containing information about the gallery's capabilities.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Gallery.html#galleryCapabilities)
             */
            readonly galleryCapabilities: Gallery.GalleryCapabilities;
            /**
             * Sets or gets the items in a gallery.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Gallery.html#items)
             */
            items: Gallery.ImageItem[] | Gallery.VideoItem[];
            /**
             * Determines if a gallery's navigation arrows are shown.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Gallery.html#showNavigationButtons)
             */
            showNavigationButtons: boolean;
            /**
             * Adds an event handler that runs when a gallery's current item changes.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Gallery.html#onCurrentItemChanged)
             *  @eventType imageChanged
             */
            onCurrentItemChanged(handler: GalleryItemChangedEventHandler): Gallery;
            /**
             * Adds an event handler that runs when an item in a gallery is
             *  clicked.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Gallery.html#onItemClicked)
             *  @eventType itemClicked
             */
            onItemClicked(handler: GalleryItemClickedEventHandler): Gallery;
        }
        /**
         * Event that is fired when a gallery moves to a new image.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.GalleryItemChangedEvent.html#)
         */
        interface GalleryItemChangedEvent extends Event {
            /**
             * Gets the gallery item.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.GalleryItemChangedEvent.html#item)
             */
            readonly item: Gallery.ImageItem | Gallery.VideoItem;
            /**
             * Gets the gallery item's index.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.GalleryItemChangedEvent.html#itemIndex)
             */
            readonly itemIndex: number;
        }
        /**
         * Event that is fired when an image in a gallery is clicked.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.GalleryItemClickedEvent.html#)
         */
        interface GalleryItemClickedEvent extends GalleryItemChangedEvent, Event {
        }
        /**
         * A [Google Map element](https://www.wix.com/support/html5/article/adding-google-maps)
         *  that allows you to display a given location.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.GoogleMap.html#)
         */
        interface GoogleMap extends Element, HiddenCollapsedMixin {
            /**
             * Sets or gets the location information of a map's marked location.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.GoogleMap.html#location)
             */
            location: GoogleMap.MapLocation;
        }
        /**
         * The header is the area of your site that appears at the top and
         *  throughout all of your pages.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Header.html#)
         */
        interface Header extends Element, ClickableMixin, ContainableMixin, StyleMixin {
            /**
             * Gets an object containing information about the header's styles.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Header.html#style)
             */
            readonly style: Style;
        }
        /**
         * Provides functionality for all elements that can be hidden or collapsed.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.HiddenCollapsedElement.html#)
         */
        interface HiddenCollapsedElement extends Element, HiddenCollapsedMixin {
        }
        /**
         * Provides functionality for all elements that can be hidden or collapsed.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.HiddenCollapsedMixin.html#)
         */
        interface HiddenCollapsedMixin extends HiddenMixin, CollapsedMixin {
        }
        /**
         * Provides functionality for elements that can be hidden.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.HiddenMixin.html#)
         */
        interface HiddenMixin {
            /**
             * Indicates if the element is visible or hidden.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.HiddenMixin.html#hidden)
             */
            readonly hidden: boolean;
            /**
             * Indicates if the element is actually visible.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.HiddenMixin.html#isVisible)
             */
            readonly isVisible: boolean;
            /**
             * Hides the element and sets its `hidden` property
             *  to `true`, using an effect if specified.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.HiddenMixin.html#hide)
             */
            hide(effectName?: string, effectOptions?: EffectOptions.ArcEffectOptions | EffectOptions.BounceEffectOptions | EffectOptions.FadeEffectOptions | EffectOptions.FlipEffectOptions | EffectOptions.FloatEffectOptions | EffectOptions.FlyEffectOptions | EffectOptions.FoldEffectOptions | EffectOptions.GlideEffectOptions | EffectOptions.PuffEffectOptions | EffectOptions.RollEffectOptions | EffectOptions.SlideEffectOptions | EffectOptions.SpinEffectOptions | EffectOptions.TurnEffectOptions | EffectOptions.ZoomEffectOptions): Promise<void>;
            /**
             * Shows the element and sets its `hidden` property
             *  to `false`, using an effect if specified.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.HiddenMixin.html#show)
             */
            show(effectName?: string, effectOptions?: EffectOptions.ArcEffectOptions | EffectOptions.BounceEffectOptions | EffectOptions.FadeEffectOptions | EffectOptions.FlipEffectOptions | EffectOptions.FloatEffectOptions | EffectOptions.FlyEffectOptions | EffectOptions.FoldEffectOptions | EffectOptions.GlideEffectOptions | EffectOptions.PuffEffectOptions | EffectOptions.RollEffectOptions | EffectOptions.SlideEffectOptions | EffectOptions.SpinEffectOptions | EffectOptions.TurnEffectOptions | EffectOptions.ZoomEffectOptions): Promise<void>;
        }
        /**
         * A container for internal or external HTML code.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.HtmlComponent.html#)
         */
        interface HtmlComponent extends IFrame {
            /**
             * Sets or gets whether the HTML Component displays scrollbars.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.HtmlComponent.html#scrolling)
             */
            scrolling: string;
            /**
             * Sets or gets the URL of the HTML Component's code.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.HtmlComponent.html#src)
             */
            src: string;
            /**
             * Allows the HTML Component to be put into full screen mode.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.HtmlComponent.html#allowFullScreen)
             */
            allowFullScreen(): HtmlComponent;
            /**
             * Adds an event handler that runs when the HTML Component
             *  sends a message.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.HtmlComponent.html#onMessage)
             *  @eventType message
             */
            onMessage(handler: HtmlComponentMessageEventHandler): HtmlComponent;
            /**
             * Sends a message to the HTML Component.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.HtmlComponent.html#postMessage)
             */
            postMessage(message: string | number | boolean | any | any[]): void;
        }
        /**
         * Event that is fired when the code in an HtmlComponent sends a message.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.HtmlComponentMessageEvent.html#)
         */
        interface HtmlComponentMessageEvent extends Event {
            /**
             * Gets the event data.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.HtmlComponentMessageEvent.html#data)
             */
            readonly data: any;
        }
        /**
         * Event that is fired when a user hovers over a star on a ratings input component.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.IconMouseInEvent.html#)
         */
        interface IconMouseInEvent extends Event {
            /**
             * Gets the display label that corresponds to the icon that the mouse entered.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.IconMouseInEvent.html#label)
             */
            readonly label: string;
            /**
             * Gets the value (1-5) that corresponds to the icon that the mouse entered.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.IconMouseInEvent.html#value)
             */
            readonly value: number;
        }
        /**
         * Provides functionality for iframe-based elements, such as `HtmlComponent`.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.IFrame.html#)
         */
        interface IFrame extends Element, HiddenCollapsedMixin {
        }
        /**
         * Images are images stored in the [Media Manager](https://support.wix.com/en/article/about-the-media-manager)
         *  or retrieved from an external web location.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Image.html#)
         */
        interface Image extends Element, HiddenCollapsedMixin, LinkableMixin, ClickableMixin {
            /**
             * Sets or gets an image's alt text.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Image.html#alt)
             */
            alt: string;
            /**
             * Sets or gets the action that occurs when an image is clicked.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Image.html#clickAction)
             */
            clickAction: string;
            /**
             * Sets or gets how an image is placed inside an image element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Image.html#fitMode)
             */
            fitMode: string;
            /**
             * Sets or gets the file location of the image.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Image.html#src)
             */
            src: string;
            /**
             * Sets or gets an image's tooltip.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Image.html#tooltip)
             */
            tooltip: string;
        }
        /**
         * Event that is fired when the keyboard is pressed.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.KeyboardEvent.html#)
         */
        interface KeyboardEvent extends Event {
            /**
             * Indicates if the Option key on a Mac or Alt key on a PC was pressed.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.KeyboardEvent.html#altKey)
             */
            readonly altKey: boolean;
            /**
             * Indicates if the Control (Ctrl) key was pressed.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.KeyboardEvent.html#ctrlKey)
             */
            readonly ctrlKey: boolean;
            /**
             * Gets a string representation of the key that was pressed.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.KeyboardEvent.html#key)
             */
            readonly key: string;
            /**
             * Indicates if the ⌘ Command key on a Mac or ⊞ Windows key on a PC was pressed.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.KeyboardEvent.html#metaKey)
             */
            readonly metaKey: boolean;
            /**
             * Indicates if the Shift key was pressed.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.KeyboardEvent.html#shiftKey)
             */
            readonly shiftKey: boolean;
        }
        /**
         * Provides functionality for elements that have a label.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.LabelMixin.html#)
         */
        interface LabelMixin {
            /**
             * Sets or gets the label of an element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.LabelMixin.html#label)
             */
            label: string;
        }
        /**
         * Provides functionality for elements that can act as links.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.LinkableMixin.html#)
         */
        interface LinkableMixin {
            /**
             * Sets or gets the element's link.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.LinkableMixin.html#link)
             */
            link: string;
            /**
             * Sets or gets the target of the element's link.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.LinkableMixin.html#target)
             */
            target: string;
        }
        /**
         * A container for media items.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.MediaBox.html#)
         */
        interface MediaBox extends Element, HiddenCollapsedMixin, Background {
        }
        /**
         * A site menu.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Menu.html#)
         */
        interface Menu extends Element, HiddenCollapsedMixin {
        }
        /**
         * A menu container is a container that holds the elements in a
         *  mobile menu.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.MenuContainer.html#)
         */
        interface MenuContainer extends Element {
            /**
             * Closes a mobile menu.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.MenuContainer.html#close)
             */
            close(): Promise<void>;
            /**
             * Opens a mobile menu.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.MenuContainer.html#open)
             */
            open(): Promise<void>;
        }
        /**
         * Event that is fired when the mouse is clicked.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.MouseEvent.html#)
         */
        interface MouseEvent extends Event {
            /**
             * Gets the distance in pixels between the mouse pointer and the
             *  left edge of the browser's viewable area.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.MouseEvent.html#clientX)
             */
            readonly clientX: number;
            /**
             * Gets the distance in pixels between the mouse pointer and the
             *  top edge of the browser's viewable area.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.MouseEvent.html#clientY)
             */
            readonly clientY: number;
            /**
             * Gets the distance in pixels between the mouse pointer and the
             *  left edge of the element that triggered this event.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.MouseEvent.html#offsetX)
             */
            readonly offsetX: number;
            /**
             * Gets the distance in pixels between the mouse pointer and the
             *  top edge of the element that triggered this event.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.MouseEvent.html#offsetY)
             */
            readonly offsetY: number;
            /**
             * Gets the distance in pixels between the mouse pointer and the
             *  left edge of the page.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.MouseEvent.html#pageX)
             */
            readonly pageX: number;
            /**
             * Gets the distance in pixels between the mouse pointer and the
             *  top edge of the page.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.MouseEvent.html#pageY)
             */
            readonly pageY: number;
            /**
             * Gets the distance in pixels between the mouse pointer and the
             *  left edge of the screen or screens.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.MouseEvent.html#screenX)
             */
            readonly screenX: number;
            /**
             * Gets the distance in pixels between the mouse pointer and the
             *  top edge of the screen or screens.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.MouseEvent.html#screenY)
             */
            readonly screenY: number;
        }
        /**
         * Multi-state boxes are containers for states.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.MultiStateBox.html#)
         */
        interface MultiStateBox extends Element, HiddenCollapsedMixin, ClickableMixin, ContainableMixin {
            /**
             * Gets the multi-state box's current state.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.MultiStateBox.html#currentState)
             */
            readonly currentState: State;
            /**
             * Gets a list of all the states contained in the multi-state box.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.MultiStateBox.html#states)
             */
            readonly states: State[];
            /**
             * Change the multi-state box's current state to a specific state.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.MultiStateBox.html#changeState)
             */
            changeState(stateReference: string | State): Promise<State>;
            /**
             * Adds an event handler that runs when the multi-state box moves to a new state.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.MultiStateBox.html#onChange)
             *  @eventType change
             */
            onChange(eventHandler: EventHandler): MultiStateBox;
        }
        /**
         * Provides basic functionality for all Wix objects, including objects
         *  that are not [elements]($w.Element.html).
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Node.html#)
         */
        interface Node {
            /**
             * Indicates if an element appears on all pages or only on the current page.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Node.html#global)
             */
            readonly global: boolean;
            /**
             * Gets the element's ID.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Node.html#id)
             */
            readonly id: string;
            /**
             * Gets the element's parent element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Node.html#parent)
             */
            readonly parent: Node;
            /**
             * Gets the element's type.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Node.html#type)
             */
            readonly type: string;
            /**
             * Scrolls the page to the top of the element using an animation.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Node.html#scrollTo)
             */
            scrollTo(): Promise<void>;
        }
        /**
         * A page is a web page that can contain other elements.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Page.html#)
         */
        interface Page extends Element, ClickableMixin, ContainableMixin {
            /**
             * Gets the page's [SEO description](https://support.wix.com/en/article/adding-seo-page-titles-and-descriptions-meta-tags).
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Page.html#description)
             */
            readonly description: string;
            /**
             * Gets the page's keywords.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Page.html#keywords)
             */
            readonly keywords: string[];
            /**
             * Gets the page's title.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Page.html#title)
             */
            readonly title: string;
            /**
             * Indicates if the page is included in the site's menu.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Page.html#visibleInMenu)
             */
            readonly visibleInMenu: boolean;
        }
        /**
         * An element for working with paging.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Pagination.html#)
         */
        interface Pagination extends Element, DisabledMixin, HiddenCollapsedMixin, ClickableMixin, ViewportMixin {
            /**
             * Sets or gets the current page.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Pagination.html#currentPage)
             */
            currentPage: number;
            /**
             * Sets or gets the total number of pages shown in a pagination bar.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Pagination.html#totalPages)
             */
            totalPages: number;
            /**
             * Adds an event handler that runs when the pagination bar
             *  is changed.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Pagination.html#onChange)
             *  @eventType Change
             */
            onChange(handler: EventHandler): Pagination;
        }
        /**
         * Provides functionality for elements that can be played.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.PlayableMixin.html#)
         */
        interface PlayableMixin {
            /**
             * Indicates if the element is currently playing.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.PlayableMixin.html#isPlaying)
             */
            readonly isPlaying: boolean;
            /**
             * Moves to the next item.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.PlayableMixin.html#next)
             */
            next(): Promise<Element & AnyProperties>;
            /**
             * Adds an event handler that runs when playback is paused.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.PlayableMixin.html#onPause)
             *  @eventType autoplayOff
             */
            onPause(handler: EventHandler): Gallery & Slideshow;
            /**
             * Adds an event handler that runs when playback is started or restarted.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.PlayableMixin.html#onPlay)
             *  @eventType autoplayOn
             */
            onPlay(handler: EventHandler): Gallery & Slideshow;
            /**
             * Pauses playback.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.PlayableMixin.html#pause)
             */
            pause(): void;
            /**
             * Begins or resumes playback.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.PlayableMixin.html#play)
             */
            play(): void;
            /**
             * Moves to the previous image or slide.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.PlayableMixin.html#previous)
             */
            previous(): Promise<Element & AnyProperties>;
        }
        /**
         * A post page for a specific blog post.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.PostPage.html#)
         */
        interface PostPage extends Element, HiddenCollapsedMixin {
            /**
             * Gets the all the information associated with the current blog post.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.PostPage.html#getPost)
             */
            getPost(): Promise<PostPage.BlogPost>;
        }
        /**
         * A store page for a specific product.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.ProductPage.html#)
         */
        interface ProductPage extends Element, HiddenCollapsedMixin {
            /**
             * Gets all the information associated with the current product.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ProductPage.html#getProduct)
             */
            getProduct(): Promise<ProductPage.Product>;
        }
        /**
         * An element for displaying the status of an ongoing process.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.ProgressBar.html#)
         */
        interface ProgressBar extends Element, HiddenCollapsedMixin, StyleMixin {
            /**
             * Gets an object containing information about the progress bar's styles.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ProgressBar.html#style)
             */
            readonly style: Style;
            /**
             * Sets or gets a progress bar's target value.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ProgressBar.html#targetValue)
             */
            targetValue: number;
            /**
             * Sets or gets a progress bar's value.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ProgressBar.html#value)
             */
            value: number;
        }
        /**
         * A [quick action bar](https://support.wix.com/en/article/adding-and-setting-up-the-quick-action-bar-on-your-mobile-site)
         *  helps your visitors contact you instantly from their mobile devices.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.QuickActionBar.html#)
         */
        interface QuickActionBar extends HiddenCollapsedMixin, StyleMixin {
            /**
             * Sets or gets a quick action bar's alignment.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.QuickActionBar.html#alignment)
             */
            alignment: boolean;
            /**
             * Sets or gets a quick action bar's color scheme.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.QuickActionBar.html#colorScheme)
             */
            colorScheme: string;
            /**
             * Sets or gets whether a quick action bar's color scheme is inverted.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.QuickActionBar.html#invertColorScheme)
             */
            invertColorScheme: boolean;
            /**
             * Sets or gets whether a quick action bar's labels are shown.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.QuickActionBar.html#showLabels)
             */
            showLabels: boolean;
            /**
             * Adds an event handler that runs when an item in a quick action bar is
             *  clicked.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.QuickActionBar.html#onItemClicked)
             *  @eventType itemClicked
             */
            onItemClicked(handler: QuickActionBarItemClickedEventHandler): QuickActionBar;
        }
        /**
         * Event that is fired when a quick action bar item is clicked.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.QuickActionBarItemClickedEvent.html#)
         */
        interface QuickActionBarItemClickedEvent extends Event {
            /**
             * Gets the gallery item.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.QuickActionBarItemClickedEvent.html#item)
             */
            readonly item: QuickActionBarItemClickedEvent.QuickActionBarItem;
            /**
             * Gets the quick action bar item's index.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.QuickActionBarItemClickedEvent.html#itemIndex)
             */
            readonly itemIndex: number;
        }
        /**
         * Radio button groups are used for selecting one of a number of
         *  options.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.RadioButtonGroup.html#)
         */
        interface RadioButtonGroup extends LabelMixin, FormElement, HiddenCollapsedMixin, DisabledMixin, FocusMixin, ClickableMixin, StyleMixin, RequiredMixin {
            /**
             * Sets or gets the options in a radio button group.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RadioButtonGroup.html#options)
             */
            options: RadioButtonGroup.Option[];
            /**
             * Sets or gets the index of the selected option.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RadioButtonGroup.html#selectedIndex)
             */
            selectedIndex: number;
            /**
             * Gets an object containing information about the radio button group's styles.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RadioButtonGroup.html#style)
             */
            readonly style: Style;
            /**
             * Sets or gets the value of the selected option.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RadioButtonGroup.html#value)
             */
            value: string;
        }
        /**
         * Range sliders allow site visitors to select a range of values within a given range.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.RangeSlider.html#)
         */
        interface RangeSlider extends Element, ValueMixin, DisabledMixin, HiddenCollapsedMixin, FocusMixin {
            /**
             * Sets or gets the label of a range slider.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RangeSlider.html#label)
             */
            label: string;
            /**
             * Sets or gets the maximum value of a range slider.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RangeSlider.html#max)
             */
            max: number;
            /**
             * Sets or gets the minimum value of a range slider.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RangeSlider.html#min)
             */
            min: number;
            /**
             * Sets or gets the prefix of a range slider's value.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RangeSlider.html#prefix)
             */
            prefix: string;
            /**
             * Sets or gets a range slider's type.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RangeSlider.html#sliderType)
             */
            sliderType: string;
            /**
             * Sets or gets a range slider's step value.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RangeSlider.html#step)
             */
            step: number;
            /**
             * Sets or gets a range slider's step type.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RangeSlider.html#stepType)
             */
            stepType: string;
            /**
             * Sets or gets the suffix of a range slider's value.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RangeSlider.html#suffix)
             */
            suffix: string;
            /**
             * Sets or gets the value(s) of a range slider's handle(s).
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RangeSlider.html#value)
             */
            value: number | number[];
        }
        /**
         * A ratings display element allows you to display a value to your users
         *  using icons.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.RatingsDisplay.html#)
         */
        interface RatingsDisplay extends Element, HiddenCollapsedMixin, ClickableMixin {
            /**
             * Sets or gets the displayed number of ratings.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RatingsDisplay.html#numRatings)
             */
            numRatings: number;
            /**
             * Sets or gets the displayed rating.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RatingsDisplay.html#rating)
             */
            rating: number;
        }
        /**
         * A ratings input element allows you to capture a value from your users
         *  using icons.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.RatingsInput.html#)
         */
        interface RatingsInput extends FormElement, DisabledMixin, RequiredMixin, HiddenCollapsedMixin, FocusMixin, ClickableMixin, ViewportMixin {
            /**
             * Sets or gets the rating value.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RatingsInput.html#value)
             */
            value: number;
            /**
             * Sets the function that runs when a user's mouse enters one of the rating icons.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RatingsInput.html#onIconMouseIn)
             *  @eventType IconMouseIn
             */
            onIconMouseIn(handler: IconMouseInEventHandler): RatingsInput;
        }
        /**
         * Provides functionality for input elements that support readonly mode.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.ReadOnlyMixin.html#)
         */
        interface ReadOnlyMixin {
            /**
             * Sets or gets if a user can modify the value of the input element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ReadOnlyMixin.html#readOnly)
             */
            readOnly: boolean;
        }
        /**
         * A repeating layout.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Repeater.html#)
         */
        interface Repeater extends Element, HiddenCollapsedMixin {
            /**
             * Sets or gets the repeater data.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Repeater.html#data)
             */
            data: any[];
            /**
             * Runs a function for each repeated item.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Repeater.html#forEachItem)
             */
            forEachItem(callback: ForItemCallback): void;
            /**
             * Runs a function for each repeated item with the given IDs.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Repeater.html#forItems)
             */
            forItems(itemIds: string[], callback: ForItemCallback): void;
            /**
             * Sets the function that runs when a new repeated item is created.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Repeater.html#onItemReady)
             *  @eventType itemReady
             */
            onItemReady(handler: ItemReadyEventHandler): Repeater;
            /**
             * Sets the function that runs when a repeated item is removed.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Repeater.html#onItemRemoved)
             *  @eventType itemRemoved
             */
            onItemRemoved(handler: ItemRemovedEventHandler): Repeater;
        }
        /**
         * Provides functionality for input elements that can be required to have a value.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.RequiredMixin.html#)
         */
        interface RequiredMixin {
            /**
             * Sets or gets whether an input element is required to have a value.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RequiredMixin.html#required)
             */
            required: boolean;
        }
        /**
         * An input element for entering information in rich text format.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.RichTextBox.html#)
         */
        interface RichTextBox extends FormElement, DisabledMixin, TextInputMixin, HiddenCollapsedMixin, FocusMixin, ReadOnlyMixin, ClickableMixin, RequiredMixin {
            /**
             * **This standard element function is not supported for RichTextBox.**
             * 	[Read more](https://www.wix.com/corvid/reference/$w.RichTextBox.html#onInput)
             */
            onInput(eventHandler: EventHandler): Element;
        }
        /**
         * [Selection Tags](https://support.wix.com/en/article/adding-and-setting-up-selection-tags) are used for selecting one or more options.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.SelectionTags.html#)
         */
        interface SelectionTags extends FormElement, HiddenCollapsedMixin, DisabledMixin, ClickableMixin, StyleMixin, RequiredMixin, ValidatableMixin {
            /**
             * Sets or gets a list of items which will be rendered as tags.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.SelectionTags.html#options)
             */
            options: SelectionTags.Option[];
            /**
             * Sets or gets the indices of the selected options.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.SelectionTags.html#selectedIndices)
             */
            selectedIndices: number[];
            /**
             * Gets an object containing information about the selection tags' styles.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.SelectionTags.html#style)
             */
            readonly style: Style;
            /**
             * Sets or gets the values of the selected options.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.SelectionTags.html#value)
             */
            value: string[];
        }
        /**
         * `SignatureInput` lets site visitors enter signatures.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.SignatureInput.html#)
         */
        interface SignatureInput extends LabelMixin, FormElement, HiddenCollapsedMixin, DisabledMixin, FocusMixin, StyleMixin, RequiredMixin {
            /**
             * Gets an object containing information about the signature input element's styles.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.SignatureInput.html#style)
             */
            readonly style: Style;
            /**
             * Gets the value of a signature input.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.SignatureInput.html#value)
             */
            readonly value: string;
            /**
             * Clears the signature.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.SignatureInput.html#clear)
             */
            clear(): void;
            /**
             * Adds an event handler that runs when a signature input element's value
             *  is changed by a site visitor.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.SignatureInput.html#onChange)
             */
            onChange(handler: EventHandler): SignatureInput;
        }
        /**
         * A `Slide` from a `Slideshow` that can contain other elements.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Slide.html#)
         */
        interface Slide extends Element, Background, ContainableMixin {
            /**
             * Gets the slide's ID.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Slide.html#id)
             */
            readonly id: string;
            /**
             * Gets the name of the slide.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Slide.html#name)
             */
            readonly name: string;
        }
        /**
         * Sliders allow users to select a number from a given range.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Slider.html#)
         */
        interface Slider extends Element, ValueMixin, DisabledMixin, HiddenCollapsedMixin, FocusMixin {
            /**
             * Sets or gets the slider's maximum value.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Slider.html#max)
             */
            max: number;
            /**
             * Sets or gets the slider's minimum value.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Slider.html#min)
             */
            min: number;
            /**
             * Sets or gets a slider's step value.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Slider.html#step)
             */
            step: number;
            /**
             * Sets or gets a slider's step type.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Slider.html#stepType)
             */
            stepType: string;
            /**
             * Sets or gets the value of the slider.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Slider.html#value)
             */
            value: number;
        }
        /**
         * Slideshows are playable containers for slides.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Slideshow.html#)
         */
        interface Slideshow extends Element, HiddenCollapsedMixin, PlayableMixin, ClickableMixin, ContainableMixin {
            /**
             * Gets the index of the slideshow's current slide.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Slideshow.html#currentIndex)
             */
            readonly currentIndex: number;
            /**
             * Gets the slideshow's current slide.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Slideshow.html#currentSlide)
             */
            readonly currentSlide: Slide;
            /**
             * Sets or gets whether a slideshow's navigation buttons are shown.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Slideshow.html#showNavigationButtons)
             */
            showNavigationButtons: boolean;
            /**
             * Set or returns whether a slideshow's slide buttons are shown.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Slideshow.html#showSlideButtons)
             */
            showSlideButtons: boolean;
            /**
             * Gets a list of all the slides contained in the slideshow.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Slideshow.html#slides)
             */
            readonly slides: Slide[];
            /**
             * Change the slideshow's current slide to a specific slide or index.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Slideshow.html#changeSlide)
             */
            changeSlide(slideReference: number | Slide): Promise<Slide>;
            /**
             * Adds an event handler that runs when the slideshow moves to a new slide.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Slideshow.html#onChange)
             *  @eventType change
             */
            onChange(eventHandler: EventHandler): Slideshow;
        }
        /**
         * A `State` from a [`MultiStateBox`]($w.MultiStateBox.html) that can contain other elements.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.State.html#)
         */
        interface State extends Element, Background, ContainableMixin {
            /**
             * Gets the state's ID.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.State.html#id)
             */
            readonly id: string;
        }
        /**
         * An object representing an element's styles.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Style.html#)
         */
        interface Style {
            /**
             * Sets or gets the background color of an element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Style.html#backgroundColor)
             */
            backgroundColor: string;
            /**
             * Sets or gets the border color of an element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Style.html#borderColor)
             */
            borderColor: string;
            /**
             * Sets or gets the border radius of an element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Style.html#borderRadius)
             */
            borderRadius: string;
            /**
             * Sets or gets the border width of an element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Style.html#borderWidth)
             */
            borderWidth: string;
            /**
             * Sets or gets the text color of an element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Style.html#color)
             */
            color: string;
            /**
             * Sets or gets the foreground color of an element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Style.html#foregroundColor)
             */
            foregroundColor: string;
        }
        /**
         * Provides functionality for elements that can be styled.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.StyleMixin.html#)
         */
        interface StyleMixin {
            /**
             * Gets an object containing information about the element's styles.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.StyleMixin.html#style)
             */
            readonly style: Style;
        }
        /**
         * Switches are used for a single binary choice.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Switch.html#)
         */
        interface Switch extends Element, DisabledMixin, HiddenCollapsedMixin, FocusMixin, ClickableMixin, ValueMixin, CheckedMixin {
            /**
             * Sets or gets whether a switch is on or off.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Switch.html#checked)
             */
            checked: boolean;
            /**
             * **Note: This standard element property is not relevant for Switch. Use [`checked`](#checked) instead.**
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Switch.html#value)
             */
            readonly value: string;
        }
        /**
         * A table for displaying data.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Table.html#)
         */
        interface Table extends Element, HiddenCollapsedMixin, ClickableMixin {
            /**
             * Sets or gets the defining properties of the columns in a table.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Table.html#columns)
             */
            columns: Table.Column[];
            /**
             * Sets the function that is called when a new page of table data is to be displayed.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Table.html#dataFetcher)
             */
            dataFetcher: Function;
            /**
             * Sets or gets the table's pagination options.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Table.html#pagination)
             */
            pagination: Table.PaginationOptions;
            /**
             * Sets or gets the table's row data.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Table.html#rows)
             */
            rows: any[];
            /**
             * Adds an event handler that runs when a table cell is selected.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Table.html#onCellSelect)
             *  @eventType cellSelect
             */
            onCellSelect(eventHandler: TableCellEventHandler): Table;
            /**
             * Adds an event handler that runs when the table's data is changed.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Table.html#onDataChange)
             *  @eventType dataChange
             */
            onDataChange(eventHandler: EventHandler): void;
            /**
             * Adds an event handler that runs when a table row is selected.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Table.html#onRowSelect)
             *  @eventType rowSelect
             */
            onRowSelect(eventHandler: TableRowEventHandler): Table;
            /**
             * Fetches the most current data and updates the table.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Table.html#refresh)
             */
            refresh(): void;
            /**
             * Selects a table row by index.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Table.html#selectRow)
             */
            selectRow(index: number): void;
            /**
             * Updates the row data of a single row at the specified index.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Table.html#updateRow)
             */
            updateRow(index: number, rowData: any): void;
        }
        /**
         * Event that is fired when a table cell is selected.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.TableCellEvent.html#)
         */
        interface TableCellEvent extends Event {
            /**
             * Gets the column ID of the selected cell.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TableCellEvent.html#cellColumnId)
             */
            readonly cellColumnId: string;
            /**
             * Gets the data from the selected cell.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TableCellEvent.html#cellData)
             */
            readonly cellData: string;
            /**
             * Gets the row index of the selected cell.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TableCellEvent.html#cellRowIndex)
             */
            readonly cellRowIndex: number;
        }
        /**
         * Event that is fired when a table row is selected.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.TableRowEvent.html#)
         */
        interface TableRowEvent extends Event {
            /**
             * Gets the data for the selected row.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TableRowEvent.html#rowData)
             */
            readonly rowData: any;
            /**
             * Gets the index of the selected row.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TableRowEvent.html#rowIndex)
             */
            readonly rowIndex: number;
        }
        /**
         * Provides functionality for text elements.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Text.html#)
         */
        interface Text extends Element, HiddenCollapsedMixin, ClickableMixin {
            /**
             * Sets or gets the contents of a text element using standard HTML.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Text.html#html)
             */
            html: string;
            /**
             * Sets or gets the plain-text contents of a text element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Text.html#text)
             */
            text: string;
        }
        /**
         * An input element for capturing large amounts of text.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.TextBox.html#)
         */
        interface TextBox extends LabelMixin, FormElement, DisabledMixin, TextInputMixin, HiddenCollapsedMixin, FocusMixin, ReadOnlyMixin, ClickableMixin, StyleMixin, RequiredMixin {
            /**
             * Gets an object containing information about the text box's styles.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TextBox.html#style)
             */
            readonly style: Style;
            /**
             * Sets or gets a text input's value.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TextBox.html#value)
             */
            value: string;
            /**
             * Determines if the text contains line breaks when its value is read.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TextBox.html#wrap)
             */
            wrap: string;
        }
        /**
         * An input element for capturing small amounts of text.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.TextInput.html#)
         */
        interface TextInput extends LabelMixin, FormElement, HiddenCollapsedMixin, DisabledMixin, TextInputMixin, FocusMixin, ReadOnlyMixin, ClickableMixin, StyleMixin, RequiredMixin {
            /**
             * Sets or gets the input type of an Input element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TextInput.html#inputType)
             */
            inputType: string;
            /**
             * Sets or gets the maximum value for a text input element whose
             *  type is set to **Number**.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TextInput.html#max)
             */
            max: number;
            /**
             * Sets or gets the minimum value for a text input element whose
             *  type is set to **Number**.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TextInput.html#min)
             */
            min: number;
            /**
             * Indicates if the number spinner is hidden or visible for a numeric text input element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TextInput.html#numberSpinnerHidden)
             */
            readonly numberSpinnerHidden: boolean;
            /**
             * Gets an object containing information about the text input's styles.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TextInput.html#style)
             */
            readonly style: Style;
            /**
             * Gets a ValidityState object that contains
             *  detailed information about the validity states of the element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TextInput.html#validity)
             */
            readonly validity: ValidatableMixin.ValidityState;
            /**
             * Sets or gets a text input's value.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TextInput.html#value)
             */
            value: string;
            /**
             * Hides the number spinner for a numeric text input.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TextInput.html#hideNumberSpinner)
             */
            hideNumberSpinner(): void;
            /**
             * Shows the number spinner for a numeric text input.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TextInput.html#showNumberSpinner)
             */
            showNumberSpinner(): void;
        }
        /**
         * Provides functionality for elements that accept text as input.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.TextInputMixin.html#)
         */
        interface TextInputMixin {
            /**
             * Sets or gets the maximum number of characters that can be entered.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TextInputMixin.html#maxLength)
             */
            maxLength: number;
            /**
             * Sets or gets the element's placeholder text.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TextInputMixin.html#placeholder)
             */
            placeholder: string;
            /**
             * Adds an event handler that runs when the input element receives
             * input.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TextInputMixin.html#onInput)
             *  @eventType onInput
             */
            onInput(eventHandler: EventHandler): Element;
            /**
             * Adds an event handler that runs when the cursor is inside the
             *  input element and a key is pressed.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TextInputMixin.html#onKeyPress)
             *  @eventType keyPress
             */
            onKeyPress(eventHandler: KeyboardEventHandler): Element;
        }
        /**
         * A thank you page displayed when an order is created.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.ThankYouPage.html#)
         */
        interface ThankYouPage extends Element, HiddenCollapsedMixin {
            /**
             * Gets the order associated with the current page.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ThankYouPage.html#getOrder)
             */
            getOrder(): Promise<ThankYouPage.Order>;
        }
        /**
         * An input element for capturing the time of day.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.TimePicker.html#)
         */
        interface TimePicker extends LabelMixin, FocusMixin, DisabledMixin, HiddenCollapsedMixin, RequiredMixin, ReadOnlyMixin, FormElement {
            /**
             * Sets or gets the time slots that are available for a time picker.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TimePicker.html#enabledTimes)
             */
            enabledTimes: TimePicker.TimeSlot[];
            /**
             * Sets or gets the number of minutes the time picker steps.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TimePicker.html#step)
             */
            step: number;
            /**
             * Sets or gets whether the time picker uses 12-hour or 24-hour format.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TimePicker.html#useAmPmFormat)
             */
            useAmPmFormat: boolean;
            /**
             * Sets or gets a time picker's value.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.TimePicker.html#value)
             */
            value: string;
        }
        /**
         * An upload button enables site visitors to upload files to your site.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.UploadButton.html#)
         */
        interface UploadButton extends LabelMixin, FormElement, HiddenCollapsedMixin, DisabledMixin, FocusMixin, StyleMixin, RequiredMixin {
            /**
             * Sets or gets the label on the upload button.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.UploadButton.html#buttonLabel)
             */
            buttonLabel: string;
            /**
             * Sets or gets the maximum amount of files a site visitor can upload at a time.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.UploadButton.html#fileLimit)
             */
            fileLimit: number;
            /**
             * Sets or gets the type of file a site visitor can upload.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.UploadButton.html#fileType)
             */
            fileType: string;
            /**
             * Gets an object containing information about the upload button's styles.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.UploadButton.html#style)
             */
            readonly style: Style;
            /**
             * Indicates if a required file was selected, and if the file is valid for upload to the Media Manager.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.UploadButton.html#valid)
             */
            readonly valid: boolean;
            /**
             * Gets a message indicating why the file is invalid or could not be uploaded. Contains
             *  empty string if the file is valid and successfully uploaded.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.UploadButton.html#validationMessage)
             */
            readonly validationMessage: string;
            /**
             * Gets a ValidityState object that contains
             *  detailed information about the validity states of the file to upload.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.UploadButton.html#validity)
             */
            readonly validity: UploadButton.ValidityState;
            /**
             * Returns a list of files that are pending upload.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.UploadButton.html#value)
             */
            readonly value: UploadButton.File[];
            /**
             * Clears the files that are pending upload.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.UploadButton.html#reset)
             */
            reset(): void;
            /**
             * **Deprecated.** This function will continue to work, but a newer version is available. Use the
             * [`uploadFiles()`](#uploadFiles) function instead.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.UploadButton.html#startUpload)
             */
            startUpload(): Promise<UploadButton.UploadFile>;
            /**
             * Uploads the files that the site visitor has chosen.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.UploadButton.html#uploadFiles)
             */
            uploadFiles(): Promise<UploadButton.UploadedFile[]>;
        }
        /**
         * Provides functionality for elements that can be validated.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.ValidatableMixin.html#)
         */
        interface ValidatableMixin {
            /**
             * Indicates if an input element's value is valid.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ValidatableMixin.html#valid)
             */
            readonly valid: boolean;
            /**
             * Gets a message indicating why the element is invalid, or an
             *  empty string if the message is valid.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ValidatableMixin.html#validationMessage)
             */
            readonly validationMessage: string;
            /**
             * Gets a ValidityState object that contains
             *  detailed information about the validity states of the element.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ValidatableMixin.html#validity)
             */
            readonly validity: ValidatableMixin.ValidityState;
            /**
             * Adds an event handler that runs when the element's validation is checked.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ValidatableMixin.html#onCustomValidation)
             */
            onCustomValidation(validator: Validator, override?: boolean): void;
            /**
             * Resets the element's visual validity indication.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ValidatableMixin.html#resetValidityIndication)
             */
            resetValidityIndication(): void;
            /**
             * Updates the element's visual validity indication based on its current validity state.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ValidatableMixin.html#updateValidityIndication)
             */
            updateValidityIndication(): void;
        }
        /**
         * Adds the value property to elements.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.ValueMixin.html#)
         */
        interface ValueMixin {
            /**
             * Sets or gets an element's value.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ValueMixin.html#value)
             */
            value: any;
            /**
             * Adds an event handler that runs when an input element's value
             *  is changed.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ValueMixin.html#onChange)
             *  @eventType change
             */
            onChange(handler: EventHandler): Element;
        }
        /**
         * Vector images are digital illustrations based on geometric shapes.
         *  They maintain their high quality when resized.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.VectorImage.html#)
         */
        interface VectorImage extends Element, HiddenCollapsedMixin, LinkableMixin, ClickableMixin {
            /**
             * Sets or gets the file location of the vector image.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VectorImage.html#src)
             */
            src: string;
        }
        /**
         * **Deprecated.**
         * This API will continue to work, but a newer version is available at
         * [Video Player]($w/videoplayer).
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Video.html#)
         */
        interface Video extends Element, HiddenCollapsedMixin {
            /**
             * Sets or gets the URL of the video.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.Video.html#videoUrl)
             */
            videoUrl: string;
        }
        /**
         * An element for displaying videos in customizable video containers.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#)
         */
        interface VideoBox extends Element, HiddenCollapsedMixin {
            /**
             * Gets the current play time from the beginning of the current video, in seconds.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#currentTime)
             */
            readonly currentTime: number;
            /**
             * Gets the total play time of the current video, in seconds.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#duration)
             */
            readonly duration: number;
            /**
             * Indicates if the volume is currently muted.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#isMuted)
             */
            readonly isMuted: boolean;
            /**
             * Indicates if a video is currently playing.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#isPlaying)
             */
            readonly isPlaying: boolean;
            /**
             * Sets or gets the file location of the current video.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#src)
             */
            src: string;
            /**
             * Sets or gets the video box volume.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#volume)
             */
            readonly volume: number;
            /**
             * Mutes video box volume.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#mute)
             */
            mute(): Promise<void>;
            /**
             * Adds an event handler that runs when the playback has ended.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#onEnded)
             *  @eventType onEnded
             */
            onEnded(handler: EventHandler): VideoBox;
            /**
             * **Note: This standard element property is not relevant for VideoBox.**
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#onMouseIn)
             *  @eventType mouseenter
             */
            onMouseIn(handler: MouseEventHandler): Element;
            /**
             * **Note: This standard element property is not relevant for VideoBox.**
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#onMouseOut)
             *  @eventType mouseleave
             */
            onMouseOut(handler: MouseEventHandler): Element;
            /**
             * Adds an event handler that runs when the playback is paused.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#onPause)
             *  @eventType onPause
             */
            onPause(handler: EventHandler): VideoBox;
            /**
             * Adds an event handler that runs when the playback is started or restarted.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#onPlay)
             *  @eventType onPlay
             */
            onPlay(handler: EventHandler): VideoBox;
            /**
             * Adds an event handler that runs when the playback progresses.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#onProgress)
             *  @eventType onProgress
             */
            onProgress(handler: EventHandler): VideoBox;
            /**
             * Pauses playback.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#pause)
             */
            pause(): Promise<void>;
            /**
             * Begins or resumes playback.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#play)
             */
            play(): Promise<void>;
            /**
             * Stops the playback.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#stop)
             */
            stop(): Promise<void>;
            /**
             * Toggles playback.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#togglePlay)
             */
            togglePlay(): Promise<void>;
            /**
             * Unmutes video volume.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoBox.html#unmute)
             */
            unmute(): Promise<void>;
        }
        /**
         * An element for presenting videos.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#)
         */
        interface VideoPlayer extends Element, HiddenCollapsedMixin {
            /**
             * Gets the current play time from the beginning of the current video, in seconds.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#currentTime)
             */
            readonly currentTime: number;
            /**
             * Sets or gets the description of a video.
             *  > **Notes:**
             *  > - Setting a video description only works when a video player is presenting a
             *  >   video uploaded to your site.
             *  > - Getting a video description does not work when a video player is presenting a
             *  >   video from Facebook, Twitch, or YouTube.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#description)
             */
            description: string;
            /**
             * Gets the total play time of the current video, in seconds.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#duration)
             */
            readonly duration: number;
            /**
             * Indicates if the volume is currently muted.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#isMuted)
             */
            readonly isMuted: boolean;
            /**
             * Indicates if a video is currently playing.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#isPlaying)
             */
            readonly isPlaying: boolean;
            /**
             * Sets or gets the image shown in the video player before the video is played.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#poster)
             */
            poster: string;
            /**
             * Sets or gets the file location of the current video.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#src)
             */
            src: string;
            /**
             * Sets or gets the title displayed in a video player.
             *  > **Notes:**
             *  > - Setting a video title only works when a video player is presenting a
             *  >   video uploaded to your site.
             *  > - Getting a video title does not work when a video player is presenting a
             *  >   video from Facebook, Twitch, or YouTube.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#title)
             */
            title: string;
            /**
             * Sets or gets the video player volume.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#volume)
             */
            volume: number;
            /**
             * Mutes video volume.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#mute)
             */
            mute(): Promise<void>;
            /**
             * Adds an event handler that runs when playback has ended.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#onEnded)
             *  @eventType onEnded
             */
            onEnded(handler: EventHandler): VideoPlayer;
            /**
             * Adds an event handler that runs when playback is paused.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#onPause)
             *  @eventType onPause
             */
            onPause(handler: EventHandler): VideoPlayer;
            /**
             * Adds an event handler that runs when playback is started or restarted.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#onPlay)
             *  @eventType onPlay
             */
            onPlay(handler: EventHandler): VideoPlayer;
            /**
             * Adds an event handler that runs when playback progresses.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#onProgress)
             *  @eventType onProgress
             */
            onProgress(handler: EventHandler): VideoPlayer;
            /**
             * Pauses playback.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#pause)
             */
            pause(): Promise<void>;
            /**
             * Begins or resumes playback.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#play)
             */
            play(): Promise<void>;
            /**
             * Moves playback to the specified time, in seconds.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#seek)
             */
            seek(time: number): Promise<void>;
            /**
             * Pauses playback.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#stop)
             */
            stop(): Promise<void>;
            /**
             * Toggles playback.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#togglePlay)
             */
            togglePlay(): Promise<void>;
            /**
             * Unmutes video volume.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.VideoPlayer.html#unmute)
             */
            unmute(): Promise<void>;
        }
        /**
         * The ViewChangeEvent is triggered when the month or year changes on a date picker or appointment field element.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.ViewChangeEvent.html#)
         */
        interface ViewChangeEvent {
            /**
             * Gets the context in which an event was triggered.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ViewChangeEvent.html#context)
             */
            readonly context: any;
            /**
             * Gets the options that relate to the date picker or appointment field view change event.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ViewChangeEvent.html#options)
             */
            readonly options: ViewChangeEvent.ViewChangeEventOptions;
            /**
             * Gets the type of event that was triggered.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ViewChangeEvent.html#type)
             */
            readonly type: string;
        }
        /**
         * Provides functionality for elements that can be scrolled into and out
         *  of view.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.ViewportMixin.html#)
         */
        interface ViewportMixin {
            /**
             * Adds an event handler that runs when an element is displayed
             *  in the viewable part of the current window.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ViewportMixin.html#onViewportEnter)
             *  @eventType viewportEnter
             */
            onViewportEnter(handler: EventHandler): Element;
            /**
             * Adds an event handler that runs when an element is no longer
             *  displayed in the viewable part of the current window.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.ViewportMixin.html#onViewportLeave)
             *  @eventType viewportLeave
             */
            onViewportLeave(handler: EventHandler): Element;
        }
        /**
         * A `$w` element for enabling your site contacts and visitors to work with the Wix Forms app.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.WixForms.html#)
         */
        interface WixForms extends HiddenCollapsedMixin {
            /**
             * Adds an event handler that runs when a site visitor starts to submit a Wix Form yet before the form is actually submitted and sent to the server.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.WixForms.html#onWixFormSubmit)
             *  @eventType WixFormSubmitEvent
             */
            onWixFormSubmit(eventHandler: WixForms.WixFormSubmitEventHandler): void;
            /**
             * Adds an event handler that runs when a site visitor submits a Wix Form and it is successfully received by the server.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.WixForms.html#onWixFormSubmitted)
             *  @eventType WixFormSubmittedEvent
             */
            onWixFormSubmitted(eventHandler: WixForms.WixFormSubmittedEventHandler): void;
            /**
             * Adds an event handler that runs when a site visitor is not able to successfully submit a Wix Form to the server.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.WixForms.html#onWixFormSubmittedError)
             *  @eventType WixFormSubmittedErrorEvent
             */
            onWixFormSubmittedError(eventHandler: WixForms.WixFormSubmittedErrorEventHandler): void;
        }
        /**
         * An event that is fired when a site visitor clicks a submit button on a [`WixForms`](wix-crm.html#$w-wixforms) element and the Wix Form is about to be submitted to the server.
         *  You do not need to import `$w` or `wix-crm` to work with Wix Forms events.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.WixFormSubmitEvent.html#)
         */
        interface WixFormSubmitEvent extends Event {
        }
        /**
         * An event that is fired when a site visitor clicks a submit button on a [`WixForms`](wix-crm.html#$w-wixforms) element but the Wix Form is not successfully submitted to the server.
         *  You do not need to import `$w` or `wix-crm` to work with Wix Forms events.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.WixFormSubmittedErrorEvent.html#)
         */
        interface WixFormSubmittedErrorEvent extends Event {
            /**
             * Gets the error code for a failed Wix Form submission.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.WixFormSubmittedErrorEvent.html#code)
             */
            readonly code: string;
            /**
             * Gets the error message for a failed Wix Form submission.
             * 	[Read more](https://www.wix.com/corvid/reference/$w.WixFormSubmittedErrorEvent.html#message)
             */
            readonly message: string;
        }
        /**
         * An event that is fired when a site visitor clicks a submit button on a [`WixForms`](wix-crm.html#$w-wixforms) element and the Wix Form is successfully submitted to the server.
         *  You do not need to import `$w` or `wix-crm` to work with Wix Forms events.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.WixFormSubmittedEvent.html#)
         */
        interface WixFormSubmittedEvent extends Event {
        }
        /**
         * `AddressInput` is used for entering addresses. It lets users type
         * an address, and suggests exact locations using Google Maps services.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.AddressInput.html#)
         */
        namespace AddressInput {
            /**
             * An object representing a physical address.
             */
            type Address = {
                /**
                 * Address in human-readable format. The formatted address is displayed in the address input element.
                 */
                formatted: string;
                /**
                 * Address coordinates.
                 */
                location?: AddressInput.AddressLocation;
                /**
                 * Address street name and number.
                 */
                streetAddress?: AddressInput.StreetAddress;
                /**
                 * Address city.
                 */
                city?: string;
                /**
                 * Address subdivision of a country, such as a state or province.
                 */
                subdivision?: string;
                /**
                 * Address country.
                 */
                country?: string;
                /**
                 * Address postal code.
                 */
                postalCode?: string;
            };
            /**
             * An object containing a filter for filtering address suggestions
             * in an address input. Suggestions are restricted to addresses within
             * the specified country.
             * > **Note:** Currently only filtering by country is supported.
             */
            type AddressFilter = {
                /**
                 * [ISO_3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code.
                 */
                country?: string;
            };
            /**
             * An object containing the coordinates of an address.
             */
            type AddressLocation = {
                /**
                 * Address latitude.
                 */
                latitude: number;
                /**
                 * Address longitude.
                 */
                longitude: number;
            };
            /**
             * An object containing the street name and number of an address.
             */
            type StreetAddress = {
                /**
                 * Street name.
                 */
                name: string;
                /**
                 * Street number.
                 */
                number?: string;
            };
        }
        /**
         * Use an `AppointmentField` to select dates, times, and timezones for scheduling appointments.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.AppointmentField.html#)
         */
        namespace AppointmentField {
            type OperationOptions = {
                /**
                 * Start date of the currently displayed month.
                 */
                startDate: Date;
                /**
                 * End date of the currently displayed month.
                 */
                endDate: Date;
            };
            type dateTimeRange = {
                /**
                 * Date and time of the start of the range.
                 */
                startDateTime: Date;
                /**
                 * Date and time of the end of the range.
                 */
                endDateTime: Date;
            };
            type dateTimeRangeInfo = {
                /**
                 * Date range type. Valid values: `'enabledRanges'`
                 */
                type: string;
                /**
                 * Array of dateTimeRange objects.
                 */
                payload: AppointmentField.dateTimeRange[];
            };
        }
        /**
         * Provides functionality for background images in certain elements.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Background.html#)
         */
        namespace Background {
            /**
             * An object used by the `background` property that contains the background options.
             */
            type BackgroundOptions = {
                /**
                 * The file location of the background image or video.
                 *  Setting the `src` property changes the
                 *  displayed image or video to the image or video found at the new `src` value.
                 *
                 *  Getting the `src` property returns the
                 *  location of the current image or video file.
                 *
                 *  Images can either be from the [Media Manager](https://support.wix.com/en/article/about-the-media-manager)
                 *  or an external image from any web location. Videos must come from the
                 *  [Media Manager](https://support.wix.com/en/article/about-the-media-manager).
                 *
                 *  The URL formats supported are:
                 *
                 *  + Images from the Media Manager:
                 *    `wix:image://v1//#originWidth=&originHeight=[&watermark=]`
                 *  + Videos from the Media Manager:
                 *    `wix:video://v1//#posterUri=&posterWidth=&posterHeight=`
                 *  + Images from the web:
                 *    `http(s)://`
                 */
                src: string;
            };
        }
        /**
         * Breadcrumbs are used for navigating between site pages.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Breadcrumbs.html#)
         */
        namespace Breadcrumbs {
            /**
             * An object that contains the attributes of a breadcrumbs item.
             */
            type Item = {
                /**
                 * The label of the breadcrumbs item. This is text that the site visitor sees and can click to navigate. Required if `icon` isn't specified. If not specified, `label` is omitted from the returned array.
                 */
                label?: string;
                /**
                 * The icon of the breadcrumbs item. This is a vector image that the site visitor sees and can click to navigate. Required if `label` isn't specified. If not specified, the `icon` key is omitted from the returned array.
                 *
                 *  The vector image file can be an image file from the Media Manager, an external SVG image from any web location, or a literal SVG XML string.
                 *
                 *  The formats supported are:
                 *  + Vector images from the Media Manager: `wix:vector://v1//`
                 *  + Vector images from the web: `http(s)://`
                 *  + Vector XML string: `...`
                 */
                icon?: string;
                /**
                 * Optional link for the breadcrumbs item as a URL relative to your site's home page. This is the link the site visitor navigates to when they click on a breadcrumbs item. The page opens in the same window/tab.
                 *
                 *  If a link isn't specified, it's `undefined` in the breadcrumbs object. The corresponding label or icon isn't clickable.
                 *
                 *  >**Note:**
                 *  > In the default breadcrumbs `items` array generated for a page, any `link` properties contain absolute URLs, not relative ones.
                 */
                link?: string;
                /**
                 * Setting `isCurrent` to `true` for a breadcrumbs item causes the item to appear highlighted in the breadcrumbs element.
                 * You can use this property to indicate which page in a breadcrumbs trail is currently displayed. In a default `items` array, the last item's `isCurrent` value is `true`.
                 * >**Note:** The value of `isCurrent` isn't validated against which page is actually displayed. It can also be set to `true` for multiple breadcrumbs items.
                 */
                isCurrent?: boolean;
            };
        }
        /**
         * The reCAPTCHA element allows you to present a challenge-response test to site visitors to determine whether they are human or a bot.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Captcha.html#)
         */
        namespace Captcha {
            /**
             * An error event handler.
             */
            type ErrorHandler = () => void;
            /**
             * A timeout event handler.
             */
            type TimeoutHandler = () => void;
            /**
             * A verification event handler.
             */
            type VerifiedHandler = () => Promise<void> | void;
        }
        /**
         * An icon that leads users to the shopping cart.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.CartIcon.html#)
         */
        namespace CartIcon {
            /**
             * An object used to pass a custom text field when adding a product to
             *  the shopping cart with options.
             */
            type AddToCartCustomTextField = {
                /**
                 * Custom text field title.
                 */
                title: string;
                /**
                 * Custom text field value.
                 */
                value: string;
            };
            /**
             * An object used when adding multiple products to the shopping cart.
             */
            type AddToCartItem = {
                /**
                 * The ID of the product to add to the cart.
                 */
                productId: string;
                /**
                 * The number of product units to add to the cart.
                 */
                quantity: number;
                /**
                 * Specific product options to add to the cart.
                 */
                options?: CartIcon.AddToCartOptions;
            };
            /**
             * An object used when adding a product to the shopping cart with options.
             */
            type AddToCartOptions = {
                /**
                 * Product options to use when adding the product to the cart.
                 * The object contains key:value pairs where the key is the option name and the value is the chosen option value.
                 */
                choices: any;
                /**
                 * Custom text fields to use when adding the product to the cart.
                 */
                customTextFields: CartIcon.AddToCartCustomTextField[];
            };
        }
        /**
         * An element for sending and receiving chat messages.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Chatbox.html#)
         */
        namespace Chatbox {
            /**
             * An object representing a chat channel.
             */
            type Channel = {
                /**
                 * ID of the channel.
                 */
                id: string;
                /**
                 * Display information associated with the channel.
                 */
                displayData: Chatbox.DisplayData;
                /**
                 * An array of messages sent over the channel. Currently only the last message is included.
                 */
                messages: Chatbox.Message[];
            };
            /**
             * An object containing information about a chat channel.
             */
            type ChannelInfo = {
                /**
                 * ID of a chat channel.
                 */
                channelId?: string;
                /**
                 * Type of chat channel.
                 *  One of the following:
                 *
                 *  + `"Focused"`: Currently focused channel.
                 *  + `"Business"`: Business channel.
                 */
                type?: string;
            };
            /**
             * An object representing display information associated with a [`Channel`](#channel).
             */
            type DisplayData = {
                /**
                 * The image associated with the channel.
                 *  One of the following:
                 *
                 *  + For private social channels, the image associated with the site member's account. If there is no image associated with the account, defaults to the avatar image.
                 *  + For group social channels, the image associated with the chat group.
                 *  + For business channels, `image` is not currently supported.
                 */
                image: string;
                /**
                 * For social channels, the member's name or chat group name. For business channels, the site's [display name](wix-site-backend.generalInfo.html#getSiteDisplayName).
                 */
                name: string;
                /**
                 * Only supported for business channels. Initials of the site's business.
                 */
                initials: string;
            };
            /**
             * An object that contains information about a chat message.
             */
            type Message = {
                /**
                 * ID of the channel on which the message was sent.
                 */
                channelId: string;
                /**
                 * Type of message. Currently only `TEXT` is supported.
                 */
                type: string;
                /**
                 * First 250 characters of the chat message. Currently only text is included in the summary.
                 */
                summary: string;
                /**
                 * The sender's member ID. For a message sent from the site's business, the site owner's member ID.
                 */
                participantId: string;
                /**
                 * Date and time the message was sent.
                 */
                createdAt: Date;
                /**
                 * Content of the message.
                 */
                payload: Chatbox.MessagePayload;
                /**
                 * An object representing additional contextual message information included in a chat message. Only relevant for messages sent using the backend [`sendMessage()`](wix-chat-backend.html#sendMessage) function. Site visitors do not see metadata.
                 */
                metadata?: any;
            };
            /**
             * An object representing a chat message to be sent.
             */
            type MessageInfo = {
                /**
                 * The text to be sent in the message.
                 */
                messageText: string;
                /**
                 * The ID of the channel over which the message is sent. If empty, message is sent to the site's business.
                 */
                channelId?: string;
            };
            /**
             * The content of a chat message.
             */
            type MessagePayload = {
                /**
                 * Text of the chat message.
                 */
                text: string;
            };
        }
        /**
         * Checkbox groups are used for selecting any number of the given
         *  options.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.CheckboxGroup.html#)
         */
        namespace CheckboxGroup {
            /**
             * An object used by the `options` property that contains the attributes of a checkbox item.
             */
            type Option = {
                /**
                 * The value of the checkbox option. This is what you use in code and is what is stored in your collections. Mandatory if `label` is not specified.
                 */
                value?: string;
                /**
                 * The label of the checkbox option. This is what a user sees.  Mandatory if `value` is not specified.
                 */
                label?: string;
            };
        }
        /**
         * A text element for managing large amounts of text.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.CollapsibleTextBox.html#)
         */
        namespace CollapsibleTextBox {
            /**
             * Expands content overflow on current page.
             */
            type ExpandOnCurrentPage = {
                /**
                 * Text of the read more button. Defaults to `Read more`.
                 */
                readMoreButtonText?: string;
                /**
                 * Text of the read less button. Defaults to `Read less`.
                 */
                readLessButtonText?: string;
                /**
                 * Whether the collapsible text box is currently collapsed. Defaults to `true`.
                 */
                collapsed?: boolean;
            };
            /**
             * Links to the content overflow.
             */
            type LinkToContent = {
                /**
                 * Link for the remaining text. Supports all [link types](https://www.wix.com/velo/reference/$w/linkablemixin/link).
                 */
                link: string;
                /**
                 * Determines where the link opens, either in the current page or in a new page.
                 * One of:
                 * `"_blank"`: The link opens in a new tab or window.
                 * `"_self"`: The link opens in the tab or window.
                 *
                 * Defaults to `"_blank"`.
                 *
                 * Note: Link targets are only supported for external web links, for example, `https://www.wix.com`.
                 */
                target?: string;
                /**
                 * Whether the read more button is visible. Defaults to `false`.
                 */
                readMoreButtonVisible?: boolean;
                /**
                 * Text of the read more button. Defaults to 'Link to full article'.
                 */
                readMoreButtonText?: string;
            };
        }
        /**
         * A `DatePicker` is used for entering dates. It lets site visitors populate a
         *  date field by picking a date using a calendar popup.
         * You can enable and disable dates, date ranges, and days of the week  on your date picker.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.DatePicker.html#)
         */
        namespace DatePicker {
            /**
             * An object containing the start and end dates of a range of dates.
             */
            type DateRange = {
                /**
                 * Start date for the range. The `startDate` is inclusive,
                 *  meaning it's included in the range. The start date must be earlier than or the same as the
                 *  end date of the range.
                 */
                startDate: Date;
                /**
                 * End date for the range. The `endDate` is inclusive,
                 *  meaning it's included in the range. The end date must be later than or the same as the
                 *  start date of the range.
                 */
                endDate: Date;
            };
        }
        /**
         * A complete web page, which consists of a Header, Page, and Footer.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Document.html#)
         */
        namespace Document {
            /**
             * An object used by the `background` property that contains the background options.
             */
            type BackgroundOptions = {
                /**
                 * The file location of the background image.
                 *
                 *  Setting the `src` property changes the
                 *  displayed image or video to the image or video found at the new `src` value.
                 *
                 *  Getting the `src` property returns the
                 *  location of the current image or video file.
                 *
                 *  Images can either be from the [Media Manager](https://support.wix.com/en/article/about-the-media-manager)
                 *  or an external image from any web location. Videos must come from the
                 *  [Media Manager](https://support.wix.com/en/article/about-the-media-manager).
                 *
                 *  The URL formats supported are:
                 *
                 *  + Images from the Media Manager:
                 *    `wix:image://v1//#originWidth=&originHeight=[&watermark=]`
                 *  + Videos from the Media Manager:
                 *    `wix:video://v1//#posterUri=&posterWidth=&posterHeight=`
                 *  + Images from the web:
                 *    `http(s)://`
                 */
                src: string;
            };
        }
        /**
         * Dropdowns are used for selecting one of a number of options.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Dropdown.html#)
         */
        namespace Dropdown {
            /**
             * An object used by the `options` property that contains the attributes of a dropdown list item.
             */
            type Option = {
                /**
                 * The value of the dropdown option. This is what you use in code and is what is stored in your collections. Mandatory if `label` is not specified.
                 */
                value?: string;
                /**
                 * The label of the dropdown option. This is what a user sees. Mandatory if `value` is not specified.
                 */
                label?: string;
            };
        }
        /**
         * Use effect options to customize an effect when [showing]($w.HiddenMixin.html#show) or [hiding]($w.HiddenMixin.html#hide) an element.
         *  Effect options include arcs, bouncing, fading, flipping, floating, flying in/out, folding, gliding and more.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.EffectOptions.html#)
         */
        namespace EffectOptions {
            /**
             * An object used to customize the `"arc"` effect.
             */
            type ArcEffectOptions = {
                /**
                 * Valid values: `0`-`4000` milliseconds. Defaults to `1200`.
                 */
                duration?: number;
                /**
                 * Valid values: `0`-`8000` milliseconds. Defaults to `0`.
                 */
                delay?: number;
                /**
                 * Valid values: `"left"`, `"right"`. Defaults to `"left"`.
                 */
                direction?: string;
            };
            /**
             * An object used to customize the `"bounce"` effect.
             */
            type BounceEffectOptions = {
                /**
                 * Valid values: `0`-`4000` milliseconds. Defaults to `1200`.
                 */
                duration?: number;
                /**
                 * Valid values: `0`-`8000` milliseconds. Defaults to `0`.
                 */
                delay?: number;
                /**
                 * Valid values: `"topLeft"`, `"topRight"`, `"bottomRight"`,
                 *  `"bottomLeft"`, `"center"`. Defaults to `"topLeft"`.
                 */
                direction?: string;
                /**
                 * Valid values: `"soft"`, `"medium"`, `"hard"`. Defaults to `"medium"`.
                 */
                intensity?: string;
            };
            /**
             * An object used to customize the `"fade"` effect.
             */
            type FadeEffectOptions = {
                /**
                 * Valid values: `0`-`4000` milliseconds. Defaults to `1200`.
                 */
                duration?: number;
                /**
                 * Valid values: `0`-`8000` milliseconds. Defaults to `0`.
                 */
                delay?: number;
            };
            /**
             * An object used to customize the `"flip"` effect.
             */
            type FlipEffectOptions = {
                /**
                 * Valid values: `0`-`4000` milliseconds. Defaults to `1200`.
                 */
                duration?: number;
                /**
                 * Valid values: `0`-`8000` milliseconds. Defaults to `0`.
                 */
                delay?: number;
                /**
                 * Valid values: `"top"`, `"right"`, `"bottom"`, `"left"`. Defaults to `"right"`.
                 */
                direction?: string;
            };
            /**
             * An object used to customize the `"float"` effect.
             */
            type FloatEffectOptions = {
                /**
                 * Valid values: `0`-`4000` milliseconds. Defaults to `1200`.
                 */
                duration?: number;
                /**
                 * Valid values: `0`-`8000` milliseconds. Defaults to `0`.
                 */
                delay?: number;
                /**
                 * Valid values: `"top"`, `"right"`, `"bottom"`, `"left"`. Defaults to `"right"`.
                 */
                direction?: string;
            };
            /**
             * An object used to customize the `"fly"` effect.
             */
            type FlyEffectOptions = {
                /**
                 * Valid values: `0`-`4000` milliseconds. Defaults to `1200`.
                 */
                duration?: number;
                /**
                 * Valid values: `0`-`8000` milliseconds. Defaults to `0`.
                 */
                delay?: number;
                /**
                 * Valid values: `"top"`, `"right"`, `"bottom"`, `"left"`. Defaults to `"right"`.
                 */
                direction?: string;
            };
            /**
             * An object used to customize the `"fold"` effect.
             */
            type FoldEffectOptions = {
                /**
                 * Valid values: `0`-`4000` milliseconds. Defaults to `1200`.
                 */
                duration?: number;
                /**
                 * Valid values: `0`-`8000` milliseconds. Defaults to `0`.
                 */
                delay?: number;
                /**
                 * Valid values: `"top"`, `"right"`, `"bottom"`, `"left"`. Defaults to `"left"`.
                 */
                direction?: string;
            };
            /**
             * An object used to customize the `"glide"` effect.
             */
            type GlideEffectOptions = {
                /**
                 * Valid values: `0`-`4000` milliseconds. Defaults to `1200`.
                 */
                duration?: number;
                /**
                 * Valid values: `0`-`8000` milliseconds. Defaults to `0`.
                 */
                delay?: number;
                /**
                 * Valid values: `0`-`360` degrees. Defaults to `0`.
                 */
                angle?: number;
                /**
                 * Valid values: `0`-`300` pixels. Defaults to `0`.
                 */
                distance?: number;
            };
            /**
             * An object used to customize the `"puff"` effect.
             */
            type PuffEffectOptions = {
                /**
                 * Valid values: `0`-`4000` milliseconds. Defaults to `1200`.
                 */
                duration?: number;
                /**
                 * Valid values: `0`-`8000` milliseconds. Defaults to `0`.
                 */
                delay?: number;
            };
            /**
             * An object used to customize the `"roll"` effect.
             */
            type RollEffectOptions = {
                /**
                 * Valid values: `0`-`4000` milliseconds. Defaults to `1200`.
                 */
                duration?: number;
                /**
                 * Valid values: `0`-`8000` milliseconds. Defaults to `0`.
                 */
                delay?: number;
                /**
                 * Valid values: `"top"`, `"right"`, `"bottom"`, `"left"`. Defaults to `"left"`.
                 */
                direction?: string;
            };
            /**
             * An object used to customize the `"slide"` effect.
             */
            type SlideEffectOptions = {
                /**
                 * Valid values: `0`-`4000` milliseconds. Defaults to `1200`.
                 */
                duration?: number;
                /**
                 * Valid values: `0`-`8000` milliseconds. Defaults to `0`.
                 */
                delay?: number;
                /**
                 * Valid values: `"top"`, `"right"`, `"bottom"`, `"left"`. Defaults to `"left"`.
                 */
                direction?: string;
            };
            /**
             * An object used to customize the `"spin"` effect.
             */
            type SpinEffectOptions = {
                /**
                 * Valid values: `0`-`4000` milliseconds. Defaults to `1200`.
                 */
                duration?: number;
                /**
                 * Valid values: `0`-`8000` milliseconds. Defaults to `0`.
                 */
                delay?: number;
                /**
                 * Valid values: `cw`, `ccw`. Defaults to `cw`.
                 */
                direction?: string;
                /**
                 * Valid values: `1`-`15`. Defaults to `5`.
                 */
                cycles?: number;
            };
            /**
             * An object used to customize the `"turn"` effect.
             */
            type TurnEffectOptions = {
                /**
                 * Valid values: `0`-`4000` milliseconds. Defaults to `1200`.
                 */
                duration?: number;
                /**
                 * Valid values: `0`-`8000` milliseconds. Defaults to `0`.
                 */
                delay?: number;
                /**
                 * Valid values: `"right"`, `"left"`. Defaults to `"right"`.
                 */
                direction?: string;
            };
            /**
             * An object used to customize the `"zoom"` effect.
             */
            type ZoomEffectOptions = {
                /**
                 * Valid values: `0`-`4000` milliseconds. Defaults to `1200`.
                 */
                duration?: number;
                /**
                 * Valid values: `0`-`8000` milliseconds. Defaults to `0`.
                 */
                delay?: number;
            };
        }
        /**
         * Events are fired when certain actions occur to elements.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Event.html#)
         */
        namespace Event {
            /**
             * An object that contains information about the context in which an event was fired.
             */
            type EventContext = {
                /**
                 * `"GLOBAL_SCOPE"` for events fired outside
                 *  of repeaters, or `"COMPONENT_SCOPE"` for events fired from repeaters.
                 */
                type: string;
                /**
                 * ID of the repeater item where the
                 *  event was fired from.
                 */
                itemId: string;
            };
        }
        /**
         * A gallery for displaying multiple items.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Gallery.html#)
         */
        namespace Gallery {
            /**
             * An object used by the `galleryCapabilities` property that contains the capabilities of a gallery.
             */
            type GalleryCapabilities = {
                /**
                 * Indicates if the gallery supports play operations.
                 */
                isPlayable: boolean;
                /**
                 * Indicates if the gallery supports the notion of a current item.
                 */
                hasCurrentItem: boolean;
                /**
                 * Indicates if the gallery supports navigation buttons.
                 */
                hasNavigationButtons: boolean;
            };
            /**
             * An object used by the Gallery properties `items` and `currentItem` to represent a single gallery image.
             */
            type ImageItem = {
                /**
                 * Item type. Value is `"image"`.
                 */
                type: string;
                /**
                 * Item slug.
                 */
                slug?: string;
                /**
                 * Image source URL.
                 */
                src: string;
                /**
                 * Image description. Descriptions over 100 characters are truncated.
                 */
                description?: string;
                /**
                 * Image title.
                 */
                title?: string;
                /**
                 * URL of the image's clickable link. See [here]($w.LinkableMixin.html#link) for more information about links.
                 */
                link?: string;
            };
            /**
             * An object used by the Gallery properties `items` and `currentItem` to represent a single gallery video.
             */
            type VideoItem = {
                /**
                 * Item type. Value is `"video"`.
                 */
                type: string;
                /**
                 * Item slug.
                 */
                slug?: string;
                /**
                 * Video source URL.
                 */
                src: string;
                /**
                 * Video description. Descriptions over 100 characters are truncated.
                 */
                description?: string;
                /**
                 * Video title.
                 */
                title?: string;
                /**
                 * URL of the video's clickable link. See [here]($w.LinkableMixin.html#link) for more information about links.
                 */
                link?: string;
                /**
                 * Video thumbnail URL.
                 */
                thumbnail?: string;
            };
        }
        /**
         * A [Google Map element](https://www.wix.com/support/html5/article/adding-google-maps)
         *  that allows you to display a given location.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.GoogleMap.html#)
         */
        namespace GoogleMap {
            /**
             * An object used by the `location` property that
             *  contains the attributes of a marked map location.
             */
            type MapLocation = {
                /**
                 * The latitude of the location. Must be between -90 and 90.
                 */
                latitude: number;
                /**
                 * The longitude of the location. Must be between -180 and 180.
                 */
                longitude: number;
                /**
                 * The description of the location.
                 */
                description?: string;
            };
        }
        /**
         * A post page for a specific blog post.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.PostPage.html#)
         */
        namespace PostPage {
            /**
             * An object representing a blog post on a post page.
             * > **Note:**
             * `viewCount` and `likeCount` data used on your site pages is eventually consistent and may require up
             * to 24 hours to update. To make sure new post views and likes are included on your site in real time,
             * [disable caching](https://support.wix.com/en/article/caching-your-sites-pages) for
             * any page that uses `viewCount` or `likeCount` data. Note that disabling caching may increase your page loading time.
             */
            type BlogPost = {
                /**
                 * Post ID.
                 */
                _id: string;
                /**
                 * Post title.
                 */
                title: string;
                /**
                 * Text of the post.
                 */
                plainContent: string;
                /**
                 * Date the post was originally published.
                 */
                publishedDate: Date;
                /**
                 * Number of times the post was viewed.
                 */
                viewCount: number;
                /**
                 * Number of likes the post received.
                 */
                likeCount: number;
                /**
                 * Number of comments the post received.
                 */
                commentCount: number;
                /**
                 * Date the post was most recently published.
                 */
                lastPublishedDate: Date;
                /**
                 * Indicates whether the cover image is displayed in the post.
                 */
                coverImageDisplayed: boolean;
                /**
                 * Estimated time in minutes required to read the post.
                 */
                timeToRead: number;
                /**
                 * Indicates whether the post was pinned to the top of the blog feed.
                 */
                pinned: boolean;
                /**
                 * Indicates whether the post is set as featured in the post settings. Featured posts appear in custom blog feeds.
                 */
                featured: boolean;
                /**
                 * List of all hashtags in the post.
                 */
                hashtags: string[];
                /**
                 * The post's cover [image]($w.Image.html#src).
                 */
                coverImage: string;
                /**
                 * Relative URL of the post page on your published site.
                 */
                postPageUrl: string;
                /**
                 * A few lines of text that appear in the blog feed. Defined
                 * in [Post Settings](https://support.wix.com/en/article/editing-excerpts-in-the-new-wix-blog) or default of first 160 characters of the post.
                 */
                excerpt: string;
            };
        }
        /**
         * A store page for a specific product.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.ProductPage.html#)
         */
        namespace ProductPage {
            /**
             * An object representing a media item.
             */
            type MediaItem = {
                /**
                 * Media item ID.
                 */
                id: string;
                /**
                 * Media item title.
                 */
                title: string;
                /**
                 * Media item description. Descriptions over 100 characters are truncated.
                 */
                description: string;
                /**
                 * Media item type. Can be "image" or "video."
                 */
                type: string;
                /**
                 * Media item source URL.
                 */
                src: string;
                /**
                 * Thumbnail URL for videos only.
                 */
                thumbnail?: string;
            };
            /**
             * An object representing a product in a store.
             */
            type Product = {
                /**
                 * Product ID.
                 */
                _id: string;
                /**
                 * Date and time the product was last updated.
                 */
                _updatedDate: Date;
                /**
                 * Product name.
                 */
                name: string;
                /**
                 * Product description.
                 */
                description: string;
                /**
                 * Main product media item (image or video thumbnail) URL.
                 */
                mainMedia: string;
                /**
                 * List of product media items.
                 */
                mediaItems: ProductPage.MediaItem;
                /**
                 * Product stock keeping unit value. Must be unique.
                 */
                sku: string;
                /**
                 * Deprecated. Use `ribbon` instead.
                 */
                ribbons: ProductPage.ProductRibbon[];
                /**
                 * Product currency.
                 */
                currency: string;
                /**
                 * Product price.
                 *  The price must be greater than its discount.
                 *  The product price is propagated to the product's newly-created variants. Product variants whose prices have been updated directly are not affected by the changes to the product price.
                 */
                price: number;
                /**
                 * Discounted product price.
                 */
                discountedPrice: number;
                /**
                 * Product price formatted with the currency.
                 */
                formattedPrice: string;
                /**
                 * Discounted product price formatted with the currency.
                 */
                formattedDiscountedPrice: string;
                /**
                 * ID for the inventory item.
                 */
                inventoryItemId: string;
                /**
                 * Product discount.
                 */
                discount: ProductPage.ProductDiscount;
                /**
                 * Indicates whether inventory is tracked for the product.
                 */
                trackInventory: boolean;
                /**
                 * Indicates whether the product is in stock.
                 */
                inStock: boolean;
                /**
                 * Number of units currently in stock.
                 */
                quantityInStock: number;
                /**
                 * Additional product information sections.
                 */
                additionalInfoSections: ProductPage.ProductAdditionalInfoSection[];
                /**
                 * All the available options for a store product.
                 */
                productOptions: ProductPage.ProductOptions;
                /**
                 * Product page relative URL.
                 */
                productPageUrl: string;
                /**
                 * Indicates whether product variants are managed. Can be set to true only if the product has options. Once set to true, `manageVariants` can only be reset to false only if no variants exist. Use [`getProductVariants()`](https://www.wix.com/velo/reference/wix-stores.html#getProductVariants) to check if variants exist. You cannot set `manageVariants` to true if more than 300 variants are defined.
                 */
                manageVariants: boolean;
                /**
                 * List of product customization fields.
                 */
                customTextFields: ProductPage.ProductCustomTextFields[];
                /**
                 * Product type. Either `"physical"` or `"digital"`. When creating a product using the API, currently only `"physical"` is supported.
                 */
                productType: string;
                /**
                 * Product slug.
                 */
                slug: string;
                /**
                 * Product weight.
                 */
                weight: number;
                /**
                 * Product variants.
                 */
                variants: ProductPage.VariantItem[];
                /**
                 * Price per unit.
                 */
                pricePerUnit: number;
                /**
                 * Price per unit formatted with currency symbol.
                 */
                formattedPricePerUnit: string;
                /**
                 * Details of the product's price per unit.
                 */
                pricePerUnitData: ProductPage.pricePerUnitData;
                /**
                 * Custom SEO data for the product. Learn more [about SEO](https://support.wix.com/en/search?term=seo).
                 */
                seoData: ProductPage.SeoData;
                /**
                 * Product ribbon. Used to highlight relevant information about a product. For example, `"Sale"`, `"New Arrival"`, `"Sold Out"`.
                 */
                ribbon: string;
            };
            /**
             * An object representing an additional info section for a store product.
             */
            type ProductAdditionalInfoSection = {
                /**
                 * Section title.
                 */
                title: string;
                /**
                 * Section description.
                 */
                description: string;
            };
            /**
             * An object representing a product variant's option choices.
             */
            type ProductChoices = {
                /**
                 * Value of the choice. This key name is dependent on the
                 *  product option. For example, if a product has a size option, this
                 *  key value will be something like `"Size"` and its value will be something like
                 *  `"Large"`.
                 *
                 *  `optionKey` is not case-sensitive. Therefore the values for the option keys "`Size`", "`SIZE`", and "`size`" are combined.
                 */
                optionKey: string;
            };
            /**
             * An object representing a custom text field for a store product.
             */
            type ProductCustomTextFields = {
                /**
                 * Product customization field title.
                 */
                title: string;
                /**
                 * Maximum length of product customization field in characters.
                 */
                maxLength: string;
            };
            /**
             * An object representing a product discount.
             */
            type ProductDiscount = {
                /**
                 * Discount type. Required.
                 *
                 *  One of:
                 *
                 *
                 *
                 *  - `"AMOUNT"`
                 *  - `"PERCENT"`
                 *  - `"NONE"`
                 */
                type: string;
                /**
                 * Discount value. The discount value cannot be greater than the price of the product or the variant.
                 */
                value: string;
            };
            /**
             * An object representing an option for a store product.
             */
            type ProductOption = {
                /**
                 * Option type. Either `"color"` or `"drop_down"`.
                 */
                optionType: string;
                /**
                 * Option name.
                 */
                name: string;
                /**
                 * Option choices.
                 */
                choices: ProductPage.ProductOptionsChoice[];
            };
            /**
             * An object representing all the available options for a store product, such as "Size" and "Color."
             */
            type ProductOptions = {
                /**
                 * Name of the option. This key name
                 *  is dependent on the options added to the product. For example, if a product has a size
                 *  option, this key will be something like `"Size"`.
                 *
                 *  `optionKey` is not case-sensitive. Therefore the values for the option keys "`Size`", "`SIZE`", and "`size`" are combined.
                 */
                optionKey: ProductPage.ProductOption;
            };
            /**
             * An object representing an option's choice for a store product, such as choice "Small" for the option "Size."
             */
            type ProductOptionsChoice = {
                /**
                 * Choice value.
                 */
                value: number;
                /**
                 * Choice description.
                 */
                description: number;
                /**
                 * Choice media.
                 */
                media: ProductPage.ProductOptionsChoiceMedia;
                /**
                 * Indicates whether the product with this choice is in stock.
                 */
                inStock: boolean;
                /**
                 * Indicates whether the product with this option is visible.
                 */
                visible: boolean;
            };
            /**
             * An object representing the choice media.
             */
            type ProductOptionsChoiceMedia = {
                /**
                 * Main choice media item (image or video thumbnail) URL.
                 */
                mainMedia: string;
                /**
                 * List of choice media items.
                 */
                mediaItems: ProductPage.MediaItem;
            };
            /**
             * An object representing a ribbon for a store product.
             */
            type ProductRibbon = {
                /**
                 * Ribbon text.
                 */
                text: string;
            };
            /**
             * An object representing custom SEO data for the product.
             */
            type SeoData = {
                /**
                 * SEO tag details.
                 */
                tags: ProductPage.SeoTag[];
            };
            /**
             * An object representing the product's custom SEO tags.
             */
            type SeoTag = {
                /**
                 * SEO tag type.
                 * Supported values:
                 *
                 *  + `"title"`
                 *  + `"meta"`
                 *  + `"script"`
                 *  + `"link"`
                 */
                type: string;
                /**
                 * The props property holds an object of `{"key": "value"}` pairs where the key is one of the SEO tag's properties (name, content, rel, href, etc.)
                 * and the value is the value for that property. `{"name": "description", "content": "The description itself."}`.
                 */
                props: object;
                /**
                 * Tag metadata. For example, `{"height": 300, "width": 240}`.
                 */
                meta: object;
                /**
                 * Tag inner content. For example, ` inner content `.
                 */
                children: string;
                /**
                 * Whether the tag is a custom tag.
                 */
                custom: boolean;
                /**
                 * Whether the tag is disabled.
                 */
                disabled: boolean;
            };
            /**
             * An object representing variant information to use when creating or updating variants.
             */
            type VariantInfo = {
                /**
                 * Variant currency.
                 */
                currency: string;
                /**
                 * Variant price. The variant price must be greater than its discount. If the variant price has been updated, changes to the product price do not affect the variant price.
                 */
                price: number;
                /**
                 * Discounted variant price.
                 */
                discountedPrice: number;
                /**
                 * Variant price formatted with the currency.
                 */
                formattedPrice: string;
                /**
                 * Discounted variant price formatted with the currency.
                 */
                formattedDiscountedPrice: string;
                /**
                 * Variant weight.
                 */
                weight: number;
                /**
                 * Variant stock keeping unit value.
                 */
                sku: string;
                /**
                 * Whether the variant is visible in the store.
                 */
                visible: boolean;
                /**
                 * Price per unit.
                 */
                pricePerUnit: number;
                /**
                 * Price per unit formatted with currency symbol.
                 */
                formattedPricePerUnit: string;
            };
            /**
             * An object representing a product variant item.
             */
            type VariantItem = {
                /**
                 * Unique variant ID.
                 */
                _id: string;
                /**
                 * The choices of the retrieved variant.
                 */
                choices: ProductPage.ProductChoices;
                /**
                 * Variant information.
                 */
                variant: ProductPage.VariantInfo;
            };
            /**
             * An object representing a product's price per unit data.
             */
            type pricePerUnitData = {
                /**
                 * Product’s total weight, volume, or area. For example, if your product weighs 1 kilogram, the `totalQuantity` is `1`.
                 */
                totalQuantity: number;
                /**
                 * Total measurement unit of weight, volume, or area. For example, if your product weighs 1 kilogram, the `totalMeasurementUnit` is `"KG"`.
                 *
                 * Supported values:
                 * `"ML"`, `"CL"`, `"L"`, `"CBM"`, `"MG"`, `"G"`, `"KG"`, `"MM"`, `"CM"`, `"M"`, `"SQM"`, `"OZ"`, `"LB"`, `"FLOZ"`, `"PT"`, `"QT"`, `"GAL"`, `"IN"`, `"FT"`, `"YD"`, `"SQFT"`.
                 */
                totalMeasurementUnit: string;
                /**
                 * Product’s base weight, volume, or area. For example, for a product weighing 1 kilogram, the `baseQuantity` could be `100` (grams).
                 */
                baseQuantity: number;
                /**
                 * Base measurement unit of weight, volume, or area. For example, if your product weighs 1 kilogram, and the `baseQuantity` is `100` grams, `baseMeasurementUnit` is `"G"`.
                 *
                 * Supported values:
                 * `"ML"`, `"CL"`, `"L"`, `"CBM"`, `"MG"`, `"G"`, `"KG"`, `"MM"`, `"CM"`, `"M"`, `"SQM"`, `"OZ"`, `"LB"`, `"FLOZ"`, `"PT"`, `"QT"`, `"GAL"`, `"IN"`, `"FT"`, `"YD"`, `"SQFT"`.
                 */
                baseMeasurementUnit: string;
            };
        }
        /**
         * Event that is fired when a quick action bar item is clicked.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.QuickActionBarItemClickedEvent.html#)
         */
        namespace QuickActionBarItemClickedEvent {
            /**
             * An object representing a quick action bar item.
             */
            type QuickActionBarItem = {
                /**
                 * The quick action bar item type.
                 *
                 *  One of:
                 *
                 *  + `"3dots"`
                 *  + `"3dotsvertical"`
                 *  + `"about"`
                 *  + `"add"`
                 *  + `"address"`
                 *  + `"arrowdown"`
                 *  + `"arrowup"`
                 *  + `"blog"`
                 *  + `"booking"`
                 *  + `"briefcase"`
                 *  + `"clock"`
                 *  + `"clothes"`
                 *  + `"cloud"`
                 *  + `"contactform"`
                 *  + `"creditcard"`
                 *  + `"crown"`
                 *  + `"currency"`
                 *  + `"earth"`
                 *  + `"ecom"`
                 *  + `"email"`
                 *  + `"facebook"`
                 *  + `"flag"`
                 *  + `"flickr"`
                 *  + `"freebutton"`
                 *  + `"gallery"`
                 *  + `"googleplus"`
                 *  + `"hamburgermenu"`
                 *  + `"heart"`
                 *  + `"home"`
                 *  + `"hot"`
                 *  + `"hotel"`
                 *  + `"hotsale"`
                 *  + `"icecream"`
                 *  + `"instagram"`
                 *  + `"lightning"`
                 *  + `"link"`
                 *  + `"linkedin"`
                 *  + `"music"`
                 *  + `"new"`
                 *  + `"page"`
                 *  + `"phone"`
                 *  + `"pinterest"`
                 *  + `"present"`
                 *  + `"register"`
                 *  + `"restaurant"`
                 *  + `"rocket"`
                 *  + `"sale"`
                 *  + `"search"`
                 *  + `"shoppingcart"`
                 *  + `"signup"`
                 *  + `"smile"`
                 *  + `"social"`
                 *  + `"speaker"`
                 *  + `"star"`
                 *  + `"ticket"`
                 *  + `"twitter"`
                 *  + `"vimeo"`
                 *  + `"vk"`
                 *  + `"yelp"`
                 *  + `"youtube"`
                 */
                itemType: string;
                /**
                 * The quick action bar item label.
                 */
                label: string;
                /**
                 * The quick action bar item link.
                 */
                link: string;
            };
        }
        /**
         * Radio button groups are used for selecting one of a number of
         *  options.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.RadioButtonGroup.html#)
         */
        namespace RadioButtonGroup {
            /**
             * An object used by the `options` property that contains the attributes of a radio button item.
             */
            type Option = {
                /**
                 * The value of the radio button option. This is what you use in code and is what is stored in your collections. Mandatory if `label` is not specified.
                 */
                value?: string;
                /**
                 * The label of the radio button option. This is what a user sees. Mandatory if `value` is not specified.
                 */
                label?: string;
            };
        }
        /**
         * [Selection Tags](https://support.wix.com/en/article/adding-and-setting-up-selection-tags) are used for selecting one or more options.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.SelectionTags.html#)
         */
        namespace SelectionTags {
            /**
             * An object used by the [`options`](#options) property that contains the attributes of the selection tag item.
             */
            type Option = {
                /**
                 * The value of the selection tag option. This is what you use in code and is what is stored in your collections.
                 */
                value: string;
                /**
                 * The label of the selection tag option. This is what a site visitor sees.
                 */
                label: string;
            };
        }
        /**
         * A table for displaying data.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.Table.html#)
         */
        namespace Table {
            /**
             * An object used by the `columns` property that
             *  contains the properties that define a table column. Table columns do not
             *  store any data.
             */
            type Column = {
                /**
                 * The column ID.
                 */
                id: string;
                /**
                 * The location of the data displayed
                 *  in the column.
                 *
                 *  When the table is populated by a connection to a dataset, the `dataPath`
                 *  value is a field key from the collection that the dataset is connected to. The
                 *  `dataPath` can contain a [reference field](https://support.wix.com/en/article/about-reference-fields-in-database-collections)
                 *  by prefixing the field with the referenced collection name and a period. For example,
                 *  `"dataPath": "writer.name"`.
                 *
                 *  When the table is populated by using the [`rows`](#rows) or
                 *  [`dataFetcher`](#dataFetcher) properties, the `dataPath` value is one of the
                 *  property keys from the table's row objects.
                 */
                dataPath: string;
                /**
                 * The column header label.
                 */
                label: string;
                /**
                 * The type of data in this column: `"number"`, `"string"`, `"date"`, `"image"`, `"bool"`, or `"richText"`.
                 */
                type: string;
                /**
                 * The pixel width of the column.
                 */
                width?: number;
                /**
                 * Whether the column is visible.
                 */
                visible?: boolean;
                /**
                 * The location of the links used when
                 *  the items in the column are clicked.
                 *
                 *  When the table is populated by a connection to a dataset, the `linkPath`
                 *  value is a field key from the collection that the dataset is connected to.
                 *  The collection field can be a [regular field](https://support.wix.com/en/article/about-database-collections#regular-fields)
                 *  that contains URLs, a [calculated field](https://support.wix.com/en/article/about-database-collections#calculated-fields), or a [reference field](https://support.wix.com/en/article/about-reference-fields-in-database-collections)
                 *  that contains relative links to dynamic pages.
                 *
                 *  When the table is populated by using the [`rows`](#rows) or
                 *  [`dataFetcher`](#dataFetcher) properties, the `linkPath` value is one of the
                 *  property keys from the table's rows objects.
                 *  The property values associated with that key contain URLs or relative links.
                 */
                linkPath?: string;
            };
            /**
             * An object used by the `pagination` property that
             * contains the pagination options which determine if and how the table
             * is paginated.
             */
            type PaginationOptions = {
                /**
                 * The type of pagination.
                 *  One of:
                 *
                 *  + `"normal"`: No pagination. The table is scrollable if there are more
                 *    rows than can be displayed at once. All data is fetched at once.
                 *  + `"pagination"`: The data is separated into pages which are navigatable
                 *    using paging buttons. New data is fetched when a user clicks on a
                 *    paging button.
                 *  + `"virtual"`: The data is separated into pages which are navigated by
                 *    scrolling. New data is fetched when user a user scrolls below the
                 *    displayed rows.
                 */
                type: string;
                /**
                 * The number of rows per page.
                 */
                rowsPerPage: number;
            };
        }
        /**
         * A thank you page displayed when an order is created.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.ThankYouPage.html#)
         */
        namespace ThankYouPage {
            /**
             * An object representing address information.
             */
            type Address = {
                /**
                 * Address in readable format.
                 */
                formatted: string;
                /**
                 * City.
                 */
                city?: string;
                /**
                 * Country.
                 */
                country?: string;
                /**
                 * Main address information.
                 */
                addressLine?: string;
                /**
                 * Additional address information (apt, floor, etc.).
                 */
                addressLine2?: string;
                /**
                 * Alternative property for street name and number.
                 */
                streetAddress?: ThankYouPage.StreetAddress;
                /**
                 * Postal/zip code.
                 */
                postalCode?: string;
                /**
                 * Subdivision of a country, such as a state or province.
                 */
                subdivision?: string;
            };
            /**
             * An object representing a coupon applied to the order.
             */
            type AppliedCoupon = {
                /**
                 * Coupon ID.
                 */
                couponId: string;
                /**
                 * Coupon name.
                 */
                name: string;
                /**
                 * Coupon code.
                 */
                code: string;
            };
            /**
             * An object representing an order's billing info.
             */
            type BillingInfo = {
                /**
                 * Billing address.
                 */
                address?: ThankYouPage.Address;
                /**
                 * Last name.
                 */
                lastName?: string;
                /**
                 * First name.
                 */
                firstName?: string;
                /**
                 * Email address.
                 */
                email?: string;
                /**
                 * Phone number.
                 */
                phone?: string;
                /**
                 * Company name.
                 */
                company?: string;
                /**
                 * VAT information.
                 */
                vatId?: ThankYouPage.VatId;
            };
            /**
             * An object representing information about the buyer.
             */
            type BuyerInfo = {
                /**
                 * Unique buyer's ID.
                 */
                id: string;
                /**
                 * Buyer's email address.
                 */
                email: string;
                /**
                 * Buyer's first name.
                 */
                firstName: string;
                /**
                 * Buyer's last name.
                 */
                lastName: string;
                /**
                 * Buyer's identity.
                 * One of:
                 *
                 *
                 *  - `"MEMBER"`: A logged-in site member.
                 *  - `"CONTACT"`: A Wix contact.
                 */
                identityType: string;
                /**
                 * Buyer's phone number.
                 */
                phone?: string;
            };
            /**
             * An object representing information about the sales channel that submitted this order.
             */
            type ChannelInfo = {
                /**
                 * Order ID from an external system (e.g., eBay or Amazon).
                 */
                externalOrderId?: string;
                /**
                 * URL to the order in the external system (e.g., eBay or Amazon).
                 */
                externalOrderUrl?: string;
                /**
                 * Sales channel that submitted the order.
                 * One of:
                 *
                 *
                 *  + `"WEB"`: Wix online store.
                 *  + `"POS"`: Point of sale.
                 *  + `"EBAY"`: eBay.
                 *  + `"OTHER_PLATFORM"`: Order imported from another system (e.g., Cart2Cart).
                 *  + `"WIX_APP_STORE"`: Order created via the Wix mobile app.
                 */
                type: string;
            };
            /**
             * An object representing a custom field added by the customer during the checkout process.
             */
            type CustomField = {
                /**
                 * Custom field's title.
                 */
                title: string;
                /**
                 * Title translated into the buyer's language.
                 */
                translatedTitle: string;
                /**
                 * Custom field's text.
                 */
                value: string;
            };
            /**
             * An object representing a custom text field.
             */
            type CustomTextField = {
                /**
                 * Field title.
                 */
                title: string;
                /**
                 * Field value.
                 */
                value: string;
            };
            /**
             * An object representing a discount applied to the order.
             */
            type Discount = {
                appliedCoupon: ThankYouPage.AppliedCoupon;
            };
            /**
             * An object representing information about the identity of the order initiator.
             * Occasionally, the person that completes the order isn't the buyer. For example, this occurs when an order is created using a point of sale terminal.
             */
            type EnteredBy = {
                id: string;
                /**
                 * Order was created by one of the following:
                 *
                 *
                 *   + `"USER"`: Wix user who performed a POS transaction on behalf of the buyer.
                 *   + `"MEMBER"`: Logged-in site member.
                 *   + `"CONTACT"`: A Wix contact.
                 */
                identityType: string;
            };
            /**
             * An object representing an line item's price information.
             */
            type LineItemPriceData = {
                /**
                 * Price of the item.
                 */
                price: number;
                /**
                 * Total price charged to the customer (per line item) after calculation of quantity and discount.
                 */
                totalPrice: number;
                /**
                 * Whether the price includes tax.
                 */
                taxIncludedInPrice: boolean;
            };
            /**
             * An object representing a line item's primary media item.
             */
            type MediaItem = {
                /**
                 * Image description for accessibility purposes.
                 */
                altText?: string;
                /**
                 * Unique media item ID.
                 */
                id: string;
                /**
                 * Media item external URL.
                 */
                externalImageUrl?: string;
                /**
                 * Media item source URL for media uploaded to Wix.
                 */
                src: string;
                /**
                 * Media item width.
                 *  One of:
                 *
                 *
                 *  - `"IMAGE"`: Image item.
                 *  - `"UNSPECIFIED_MEDIA_TYPE_ITEM"`: Media item type can't be classified due to an error.
                 */
                type: string;
            };
            /**
             * An object representing a line item option.
             */
            type Option = {
                /**
                 * Name of the product option.
                 */
                option: string;
                /**
                 * Selected option.
                 */
                selection: string;
            };
            /**
             * An object representing an order.
             */
            type Order = {
                /**
                 * Unique order ID.
                 */
                _id: string;
                /**
                 * Date and time the order was updated.
                 */
                _updatedDate: Date;
                /**
                 * The site's displayed language.
                 */
                buyerLanguage: string;
                /**
                 * The shopping cart's unique ID.
                 */
                cartId?: string;
                /**
                 * Channel information.
                 */
                channelInfo: ThankYouPage.ChannelInfo;
                /**
                 * Identity of the order's operator.
                 */
                enteredBy: ThankYouPage.EnteredBy;
                /**
                 * Billing information.
                 */
                billingInfo?: ThankYouPage.BillingInfo;
                /**
                 * Buyer information.
                 */
                buyerInfo: ThankYouPage.BuyerInfo;
                /**
                 * A note added by the buyer.
                 */
                buyerNote?: string;
                /**
                 * Date and time the order was created.
                 */
                _dateCreated: Date;
                /**
                 * Order currency.
                 */
                currency: string;
                /**
                 * Running order number.
                 */
                number: number;
                /**
                 * Shipping information.
                 */
                shippingInfo?: ThankYouPage.OrderShippingInfo;
                /**
                 * Order items.
                 */
                lineItems: ThankYouPage.OrderLineItem[];
                /**
                 * Order totals.
                 */
                totals: ThankYouPage.Totals;
                /**
                 * The unit in which the order's weight is measured. Either `"KG"` or `"LB"`.
                 */
                weightUnit: string;
                /**
                 * Information about a custom field.
                 */
                customField?: ThankYouPage.CustomField;
                /**
                 * Discount information.
                 */
                discount?: ThankYouPage.Discount;
            };
            /**
             * An object representing a line item in an order.
             */
            type OrderLineItem = {
                /**
                 * Custom text.
                 */
                customTextFields?: ThankYouPage.CustomTextField[];
                /**
                 * Line item product ID.
                 */
                productId?: string;
                /**
                 * Type of the line item.
                 *  One of:
                 *
                 *
                 *  - `"DIGITAL"`: Digital item.
                 *  - `"PHYSICAL"`: Physical item.
                 *  - `"CUSTOM_AMOUNT_ITEM"`: Item with a custom price.
                 */
                lineItemType?: string;
                /**
                 * Information about the line item's primary media item.
                 */
                mediaItem: ThankYouPage.MediaItem;
                /**
                 * Name of the line item.
                 */
                name: string;
                /**
                 * Notes about the line item.
                 */
                notes?: string;
                /**
                 * Line item options.
                 */
                options: ThankYouPage.Option[];
                /**
                 * Deprecated: see priceData.
                 */
                price: number;
                /**
                 * Line item quantity.
                 */
                quantity: number;
                /**
                 * Line item stock keeping unit.
                 */
                sku: string;
                /**
                 * Deprecated: see priceData.
                 */
                totalPrice: number;
                /**
                 * Line item weight.
                 */
                weight: number;
                /**
                 * Line item index.
                 */
                index: number;
                /**
                 * Line item's name, translated into the customer's language.
                 */
                translatedName: string;
                /**
                 * Line item's discount amount.
                 */
                discount?: number;
                /**
                 * Line item's total amount of tax applied.
                 */
                tax?: number;
                /**
                 * Price information.
                 */
                priceData?: ThankYouPage.LineItemPriceData;
                /**
                 * Tax group ID.
                 */
                taxGroupId?: string;
                /**
                 * Line item's fulfiller ID.
                 */
                fulfillerId: string;
                /**
                 * Line item's variant ID.
                 */
                variantId: string;
            };
            /**
             * An object representing an order's shipping information.
             */
            type OrderShippingInfo = {
                /**
                 * Expected date of delivery.
                 */
                deliverByDate?: Date;
                /**
                 * Delivery option name.
                 */
                deliveryOption: string;
                /**
                 * Estimated time until delivery.
                 */
                estimatedDeliveryTime?: string;
                /**
                 * Shipment details (empty if order was designated for pickup).
                 */
                shipmentDetails?: ThankYouPage.ShipmentDetails;
                /**
                 * Pickup details (empty if order was designated for delivery).
                 */
                pickupDetails?: ThankYouPage.PickupDetails;
                /**
                 * Shipping region.
                 */
                shippingRegion?: string;
            };
            /**
             * An object representing an order's pickup details.
             */
            type PickupDetails = {
                /**
                 * Pickup instructions.
                 */
                pickupInstructions?: string;
                /**
                 * Pickup address.
                 */
                pickupAddress?: ThankYouPage.Address;
                /**
                 * First name.
                 */
                firstName?: string;
                /**
                 * Last name.
                 */
                lastName?: string;
                /**
                 * Email address.
                 */
                email?: string;
                /**
                 * Phone number.
                 */
                phone?: string;
            };
            /**
             * An object representing an order's shipping details.
             */
            type ShipmentDetails = {
                /**
                 * Shipping address.
                 */
                address?: ThankYouPage.Address;
                /**
                 * Last name.
                 */
                lastName?: string;
                /**
                 * First name.
                 */
                firstName?: string;
                /**
                 * Email address.
                 */
                email?: string;
                /**
                 * Phone number.
                 */
                phone?: string;
                /**
                 * Company name.
                 */
                company?: string;
                /**
                 * VAT information.
                 */
                vatId?: ThankYouPage.VatId;
                /**
                 * Deprecated: see priceData.
                 */
                tax?: number;
                /**
                 * Deprecated: see priceData.
                 */
                discount?: number;
                /**
                 * Shipment price information.
                 */
                priceData?: ThankYouPage.ShipmentPriceData;
            };
            /**
             * An object representing shipment price information.
             */
            type ShipmentPriceData = {
                /**
                 * Price of the item.
                 */
                price: number;
                /**
                 * Whether the price includes tax.
                 */
                taxIncludedInPrice: boolean;
            };
            /**
             * An object representing information about the street name and street number of an address.
             */
            type StreetAddress = {
                /**
                 * Address street name.
                 */
                name: string;
                /**
                 * Address street number.
                 */
                number: string;
            };
            type SubscriptionInfo = {
                /**
                 * ID of the current subscription's cycle.
                 */
                id: string;
                /**
                 * Current cycle number. For example, if the subscription is in the 3rd month of a 4-month subscription, the value will be `3`.
                 */
                cycleNumber: number;
                /**
                 * Subscription settings.
                 */
                subscriptionSettings: ThankYouPage.SubscriptionSettings;
                /**
                 * Subscription option information.
                 */
                subscriptionOptionInfo: ThankYouPage.SubscriptionOptionInfo;
            };
            type SubscriptionOptionInfo = {
                /**
                 * Subscription option ID.
                 */
                id: string;
                /**
                 * Subscription option title. For example, "Coffee of the week".
                 */
                title: string;
                /**
                 * Subscription option description. For example, "Subscribe and get 15% off".
                 */
                description: string;
            };
            type SubscriptionSettings = {
                /**
                 * Frequency of recurring payment.
                 * Supported values:
                 *
                 *  + `"DAY"`
                 *  + `"WEEK"`
                 *  + `"MONTH"`
                 *  + `"YEAR"`
                 */
                frequency: string;
                /**
                 * Whether subscription is renewed automatically at the end of each period.
                 */
                autoRenewal: boolean;
                /**
                 * Number of billing cycles before subscription ends. Ignored if `autoRenewal: false`.
                 */
                billingCycles: number;
            };
            /**
             * An object representing an order's totals.
             */
            type Totals = {
                /**
                 * Total calculated discount amount.
                 */
                discount?: number;
                /**
                 * Total quantity of the the order's line items.
                 */
                quantity: number;
                /**
                 * Total shipping price, including tax.
                 */
                shipping?: number;
                /**
                 * Subtotal of all the order's line items, excluding tax.
                 */
                subtotal: number;
                /**
                 * Total amount of tax.
                 */
                tax?: number;
                /**
                 * Total price.
                 */
                total: number;
                /**
                 * Total weight of the order's items.
                 */
                weight: number;
            };
            /**
             * An object representing value added tax (VAT) information.
             */
            type VatId = {
                /**
                 * VAT number.
                 */
                number: string;
                /**
                 * VAT type. Either `"CPF"` or `"CNPJ"`.
                 */
                type: string;
            };
        }
        /**
         * An input element for capturing the time of day.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.TimePicker.html#)
         */
        namespace TimePicker {
            /**
             * An object representing an available time slot for a time picker.
             */
            type TimeSlot = {
                /**
                 * Start time for the time slot. The `startTime` must be earlier than the `endTime`, and
                 *  be in one of the following formats:
                 *  + `HH:MM` (hours and minutes)
                 *  + `HH:MM:SS` (hours, minutes, and seconds)
                 *  + `HH:MM:SS.mmm` (hours, minutes, seconds, and milliseconds)
                 *
                 *  `HH` is a 2-digit value between 0-23.
                 *
                 *  `MM` is a 2-digit value between 0-59.
                 *
                 *  `SS` is a 2-digit value between 0-59. Seconds are rounded down to the nearest minute.
                 *
                 *  `mmm` is a 3-digit value between 0-999. Milliseconds are rounded down to the nearest second.
                 *
                 *
                 *  The time picker's first input time option is the `startTime`.
                 *  This means that if the `startTime` is '10:00', the first input time option is '10:00'.
                 */
                startTime: string;
                /**
                 * End time for the time slot. The `endTime` must be later than the `startTime`, and
                 *  be in one of the following formats:
                 *  + `HH:MM` (hours and minutes)
                 *  + `HH:MM:SS` (hours, minutes, and seconds)
                 *  + `HH:MM:SS.mmm` (hours, minutes, seconds, and milliseconds)
                 *
                 *  `HH` is a 2-digit value between 0-23.
                 *  > Note that '24:00' is a valid `endTime` in order for '23:59' to be an input time option.
                 *
                 *  `MM` is a 2-digit value between 0-59.
                 *
                 *  `SS` is a 2-digit value between 0-59. Seconds are rounded down to the nearest minute.
                 *
                 *  `mmm` is a 3-digit value between 0-999.  Milliseconds are rounded down to the nearest second.
                 *
                 *
                 *  The `endTime` is not included in the time picker's input time options. This means that if the `endTime`
                 *  is '11:00', the time picker's last input time option (assuming [`step`](#step) is '1'), is '10:59'.
                 */
                endTime: string;
            };
        }
        /**
         * An upload button enables site visitors to upload files to your site.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.UploadButton.html#)
         */
        namespace UploadButton {
            /**
             * The object used by the [`value`](#value) property that represents files ready for upload.
             */
            type File = {
                /**
                 * File name.
                 */
                name: string;
                /**
                 * File size in bytes.
                 */
                size: number;
                /**
                 * `true` if the file is valid for upload to the Media Manager.
                 */
                valid: boolean;
                /**
                 * Message indicating why the file is invalid. Empty if the file is valid.
                 */
                validationMessage: string;
            };
            /**
             * The error message object returned when the `uploadFiles()`'s Promise is rejected.
             */
            type UploadError = {
                /**
                 * The error's code.
                 */
                errorCode: string;
                /**
                 * The error's description.
                 */
                errorDescription: string;
            };
            /**
             * Object returned by the `startUpload()`'s Promise.
             */
            type UploadFile = {
                /**
                 * Wix URL of the successfully uploaded file.
                 */
                url: string;
                /**
                 * Wix media ID of the uploaded file.
                 */
                mediaId: string;
                /**
                 * Title of the uploaded file.
                 */
                title: string;
                /**
                 * Width of an uploaded image or video file.
                 */
                width: number;
                /**
                 * Height of an uploaded image or video file.
                 */
                height: number;
                /**
                 * Duration (in milliseconds) of an uploaded audio file.
                 */
                duration: number;
            };
            /**
             * An array of objects returned by the `uploadFiles()`'s Promise.
             */
            type UploadedFile = {
                /**
                 * Width of an uploaded image or video file.
                 */
                width: number;
                /**
                 * Height of an uploaded image or video file.
                 */
                height: number;
                /**
                 * Duration (in milliseconds) of an uploaded audio file.
                 */
                duration: number;
                /**
                 * Wix media URL of the successfully uploaded file in the following format: `'wix:image://v1//#originWidth=&originHeight=[&watermark=]'`.
                 *
                 * **Note:** This replaces the old `fileName` parameter. `fileName` will continue to work, but we recommend that you use the updated `fileUrl` parameter instead.
                 */
                fileUrl: string;
                /**
                 * **Deprecated**. Use the `fileUrl` property instead.
                 *
                 * Internal file name of the uploaded file, generated by the Media Manager. The name is the string located in the file's URL. Click [here](https://www.wix.com/velo/forum/tips-tutorials-examples/creating-a-url-for-a-media-file-or-the-truth-about-getfileurl) to learn more.
                 */
                fileName: string;
                /**
                 * Original name of the uploaded file.
                 */
                originalFileName: string;
            };
            /**
             * Contains detailed information about the validity states of a file to upload.
             */
            type ValidityState = {
                /**
                 * `true` if the file's custom validity message has been set to a non-empty string.
                 */
                customError: boolean;
                /**
                 * `true` if the file to upload meets all validations.
                 */
                valid: boolean;
                /**
                 * `true` if a file is required, and either no file has been selected, or a file has been selected but not uploaded.
                 */
                fileNotUploaded: boolean;
                /**
                 * `true` if a file has been selected but it is too large. Maximum allowed file sizes are listed [here](https://support.wix.com/en/article/supported-media-file-types-and-file-sizes).
                 */
                fileSizeExceedsLimit: boolean;
                /**
                 * `true` if a file has been selected but the file's type is not supported. Supported file types are listed [here](https://support.wix.com/en/article/supported-media-file-types-and-file-sizes).
                 */
                fileTypeNotAllowed: boolean;
                /**
                 * `true` if a file is required but no file has been selected.
                 */
                valueMissing: boolean;
                /**
                 * `true` if the text input element's value does not match its type when the type is email or url.
                 */
                typeMismatch: boolean;
                /**
                 * `true` if the element's value does not match its pattern validation.
                 */
                patternMismatch: boolean;
                /**
                 * `true` if the length of the element's value exceeds its [`maxLength`]($w.TextInputMixin.html#maxLength) property.
                 */
                tooLong: boolean;
                /**
                 * `true` if the length of the element's value is smaller than its `minlength` property.
                 */
                tooShort: boolean;
                /**
                 * `true` if the element's value is less than the its [`min`]($w.TextInput.html#min) property.
                 */
                rangeUnderflow: boolean;
                /**
                 * `true` if the element's value is more than the its [`max`]($w.TextInput.html#max) property.
                 */
                rangeOverflow: boolean;
                /**
                 * `true` if a text input element's numeric value is defined as a whole number but a decimal number is entered.
                 */
                stepMismatch: boolean;
                /**
                 * `true` if the element's value cannot be converted to a value.
                 */
                badInput: boolean;
                /**
                 * `true` if the number of files selected exceeds the limit defined in the `fileLimit` property.
                 */
                exceedsFileLimit: boolean;
                /**
                 * `true` if the element's time value is not a valid time.
                 */
                invalidTime: boolean;
                /**
                 * `true` if the element's date value is not a valid date.
                 */
                invalidDate: boolean;
            };
        }
        /**
         * Provides functionality for elements that can be validated.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.ValidatableMixin.html#)
         */
        namespace ValidatableMixin {
            /**
             * Contains detailed information about the validity states of an element.
             */
            type ValidityState = {
                /**
                 * `true` if the element's custom
                 *  validity message has been set to a non-empty string.
                 */
                customError: boolean;
                /**
                 * `true` if the element meets all
                 *  constraint validations.
                 */
                valid: boolean;
                /**
                 * `true` if the element's
                 *  [`required`]($w.RequiredMixin.html#required) property is `true`, but
                 *  it does not contain a value.
                 */
                valueMissing: boolean;
                /**
                 * `true` if the text input element's value
                 *  does not match its type when the type is email or url.
                 */
                typeMismatch: boolean;
                /**
                 * `true` if the element's
                 *  value does not match its pattern validation.
                 */
                patternMismatch: boolean;
                /**
                 * `true` if the length of the
                 *  element's value exceeds its [`maxLength`]($w.TextInputMixin.html#maxLength)
                 *  property.
                 */
                tooLong: boolean;
                /**
                 * `true` if the length of the
                 *  element's value is smaller than its `minlength` property.
                 */
                tooShort: boolean;
                /**
                 * `true` if the element's
                 *  value is less than its [`min`]($w.TextInput.html#min) property.
                 */
                rangeUnderflow: boolean;
                /**
                 * `true` if the element's
                 *  value is more than its [`max`]($w.TextInput.html#max) property.
                 */
                rangeOverflow: boolean;
                /**
                 * `true` if the element is
                 *  an upload button that is required and a file has been selected but not
                 *  uploaded.
                 */
                fileNotUploaded: boolean;
                /**
                 * `true` if a text input
                 *  element's numeric value is defined as a whole number but a decimal
                 *  number is entered.
                 */
                stepMismatch: boolean;
                /**
                 * `true` if the element's value
                 *  cannot be converted to a value.
                 */
                badInput: boolean;
                /**
                 * `true` if the element's time value
                 *  is not a valid time.
                 */
                invalidTime: boolean;
                /**
                 * `true` if the element's date value
                 *  is not a valid date.
                 */
                invalidDate: boolean;
            };
        }
        /**
         * The ViewChangeEvent is triggered when the month or year changes on a date picker or appointment field element.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.ViewChangeEvent.html#)
         */
        namespace ViewChangeEvent {
            /**
             * An object that contains information about the date picker or appointment field for which an event was triggered.
             */
            type ViewChangeEventOptions = {
                /**
                 * Start date of the currently displayed month.
                 */
                startDate: Date;
                /**
                 * End date of the currently displayed month.
                 */
                endDate: Date;
                /**
                 * Result returned by the operation.
                 */
                operationResult: any;
            };
        }
        /**
         * A `$w` element for enabling your site contacts and visitors to work with the Wix Forms app.
         * 	[Read more](https://www.wix.com/corvid/reference/$w.WixForms.html#)
         */
        namespace WixForms {
            /**
             * Handles events fired when the Wix Form is about to be submitted.
             */
            type WixFormSubmitEventHandler = (event: WixFormSubmitEvent) => any | boolean;
            /**
             * Handles events fired when the Wix Form is not submitted due to error.
             */
            type WixFormSubmittedErrorEventHandler = (errorEvent: WixFormSubmittedErrorEvent) => void;
            /**
             * Handles events fired when the Wix Form is submitted.
             */
            type WixFormSubmittedEventHandler = (event: WixFormSubmittedEvent) => void;
        }
    }
}

// /types/common/wix-dataset.d.ts
/**
 * A dataset connects page elements to a set of items in a data collection.
 * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.html#)
 */
declare module 'wix-dataset' {
    import wixData from 'wix-data';
    /**
     * A [dataset](wix-dataset.html) connects page elements to a set of items in a data collection.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#)
     */
    interface Dataset {
        /**
         * Adds a new blank item.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#add)
         */
        add(): Promise<void>;
        /**
         * Returns the current item.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#getCurrentItem)
         */
        getCurrentItem(): any;
        /**
         * Returns the current item's index.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#getCurrentItemIndex)
         */
        getCurrentItemIndex(): number;
        /**
         * Gets the index of the dataset's current page.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#getCurrentPageIndex)
         */
        getCurrentPageIndex(): number;
        /**
         * Returns the selected items.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#getItems)
         */
        getItems(fromIndex: number, numberOfItems: number): Promise<Dataset.GetItemsResult>;
        /**
         * Gets the dataset's page size.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#getPageSize)
         */
        getPageSize(): number;
        /**
         * Returns the number of items in the dataset that match its filter criteria.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#getTotalCount)
         */
        getTotalCount(): number;
        /**
         * Gets the number of pages in the dataset.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#getTotalPageCount)
         */
        getTotalPageCount(): number;
        /**
         * Indicates if there is a next item.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#hasNext)
         */
        hasNext(): boolean;
        /**
         * Indicates if there is a next page of data.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#hasNextPage)
         */
        hasNextPage(): boolean;
        /**
         * Indicates if there is a previous item.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#hasPrevious)
         */
        hasPrevious(): boolean;
        /**
         * Indicates if there is a previous page of data.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#hasPreviousPage)
         */
        hasPreviousPage(): boolean;
        /**
         * Loads the next page of data in addition to the current data.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#loadMore)
         */
        loadMore(): Promise<void>;
        /**
         * Loads the specified page.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#loadPage)
         */
        loadPage(pageIndex: number): Promise<any[]>;
        /**
         * **Deprecated.**
         * This function will continue to work, but a newer version is available. Use the
         * [`add()`](https://www.wix.com/velo/reference/wix-dataset/dataset/add) function instead.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#new)
         */
        new (): Promise<void>;
        /**
         * Saves the current item and moves to the next item.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#next)
         */
        next(): Promise<any>;
        /**
         * Moves to the next page of data.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#nextPage)
         */
        nextPage(): Promise<any[]>;
        /**
         * Adds an event handler that runs just after a save.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#onAfterSave)
         *  @eventType afterSave
         */
        onAfterSave(handler: Dataset.AfterSaveHandler): void;
        /**
         * Adds an event handler that runs just before a save.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#onBeforeSave)
         */
        onBeforeSave(handler: Dataset.BeforeSaveHandler): void;
        /**
         * Adds an event handler that runs when the current index changes.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#onCurrentIndexChanged)
         *  @eventType currentIndexChanged
         */
        onCurrentIndexChanged(handler: Dataset.CurrentIndexChangedHandler): void;
        /**
         * Adds an event handler that runs when an error occurs.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#onError)
         *  @eventType datasetError
         */
        onError(handler: Dataset.ErrorHandler): void;
        /**
         * Adds an event handler that runs when a value of the current item changes.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#onItemValuesChanged)
         *  @eventType itemValuesChanged
         */
        onItemValuesChanged(handler: Dataset.ItemValuesChangedHandler): void;
        /**
         * Adds an event handler that runs when the dataset is ready.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#onReady)
         *  @eventType datasetReady
         */
        onReady(handler: Dataset.ReadyHandler): void;
        /**
         * Saves the current item and moves to the previous item.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#previous)
         */
        previous(): Promise<any>;
        /**
         * Moves to the previous page of data.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#previousPage)
         */
        previousPage(): Promise<any[]>;
        /**
         * Refetches the contents of the dataset from the collection.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#refresh)
         */
        refresh(): Promise<void>;
        /**
         * Removes the current item.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#remove)
         */
        remove(): Promise<void>;
        /**
         * Reverts the current item to its saved value.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#revert)
         */
        revert(): Promise<void>;
        /**
         * Saves the current item.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#save)
         */
        save(): Promise<any>;
        /**
         * Sets the current item by index.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#setCurrentItemIndex)
         */
        setCurrentItemIndex(index: number): Promise<void>;
        /**
         * Updates the value of a field in the current item.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#setFieldValue)
         */
        setFieldValue(fieldKey: string, value: any): void;
        /**
         * Updates the values of a set of fields in the current item.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#setFieldValues)
         */
        setFieldValues(fieldValues: any): void;
        /**
         * Sets the dataset filter.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#setFilter)
         */
        setFilter(filter: wixData.WixDataFilter): Promise<void>;
        /**
         * Sets the dataset's page size.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#setPageSize)
         */
        setPageSize(pageSize: number): Promise<void>;
        /**
         * Sets the dataset sort order.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#setSort)
         */
        setSort(sort: wixData.WixDataSort): Promise<void>;
    }
    /**
     * A [dataset](wix-dataset.html) connects page elements on a dynamic page to a set of items in a data collection.
     *
     * >**Note:** It is not possible to connect page elements on a dynamic page to an item in a [single item collection](https://support.wix.com/en/article/about-collections-with-a-single-item).
     * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.DynamicDataset.html#)
     */
    interface DynamicDataset extends Dataset {
        /**
         * Gets the next dynamic page URL.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.DynamicDataset.html#getNextDynamicPage)
         */
        getNextDynamicPage(): Promise<string>;
        /**
         * Gets the previous dynamic page URL.
         * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.DynamicDataset.html#getPreviousDynamicPage)
         */
        getPreviousDynamicPage(): Promise<string>;
    }
    /**
     * A [dataset](wix-dataset.html) connects page elements to a set of items in a data collection.
     * 	[Read more](https://www.wix.com/corvid/reference/wix-dataset.Dataset.html#)
     */
    namespace Dataset {
        /**
         * An object representing a dataset error.
         */
        type DatasetError = {
            /**
             * Error code.
             */
            code: string;
            /**
             * Error message.
             */
            message: string;
        };
        /**
         * An object used by the `getItems()` function that contains the items retrieved and the total number of items in the dataset that match its filter criteria
         */
        type GetItemsResult = {
            /**
             * List of items objects where key:value pairs are the field keys and field values of the retrieved items, including all hidden fields.
             */
            items: any[];
            /**
             * The number of items in the dataset that match its filter criteria.
             */
            totalCount: number;
            /**
             * The index in the dataset of the first item in the items property.
             */
            offset: number;
        };
        /**
         * An after save event handler.
         */
        type AfterSaveHandler = (itemBeforeSave: any, itemAfterSave: any) => void;
        /**
         * A before save event handler.
         */
        type BeforeSaveHandler = () => Promise<boolean> | boolean;
        /**
         * A current item index change event handler.
         */
        type CurrentIndexChangedHandler = (index: number) => void;
        /**
         * An error event handler.
         */
        type ErrorHandler = (operation: string, error: Dataset.DatasetError) => void;
        /**
         * A current item value change event handler.
         */
        type ItemValuesChangedHandler = (itemBeforeChange: any, updatedItem: any) => void;
        /**
         * A dataset ready event handler.
         */
        type ReadyHandler = () => void;
    }
}

// /types/pages/$w.d.ts
declare type TypeNameToSdkType = {
    Breadcrumbs: $w.Breadcrumbs;
    CollapsibleTextBox: $w.CollapsibleTextBox;
    AccountNavBar: $w.AccountNavBar;
    Anchor: $w.Anchor;
    AppointmentField: $w.AppointmentField;
    Box: $w.Box;
    Button: $w.Button;
    Checkbox: $w.Checkbox;
    CheckboxGroup: $w.CheckboxGroup;
    Column: $w.Column;
    ColumnStrip: $w.ColumnStrip;
    Container: $w.Container;
    DatePicker: $w.DatePicker;
    Document: $w.Document;
    Dropdown: $w.Dropdown;
    Footer: $w.Footer;
    Gallery: $w.Gallery;
    GoogleMap: $w.GoogleMap;
    Header: $w.Header;
    HtmlComponent: $w.HtmlComponent;
    IFrame: $w.IFrame;
    Image: $w.Image;
    MediaBox: $w.MediaBox;
    Menu: $w.Menu;
    MenuContainer: $w.MenuContainer;
    MultiStateBox: $w.MultiStateBox;
    Page: $w.Page;
    QuickActionBar: $w.QuickActionBar;
    RadioButtonGroup: $w.RadioButtonGroup;
    Repeater: $w.Repeater;
    Slide: $w.Slide;
    Slideshow: $w.Slideshow;
    Table: $w.Table;
    Text: $w.Text;
    TextBox: $w.TextBox;
    TextInput: $w.TextInput;
    UploadButton: $w.UploadButton;
    VectorImage: $w.VectorImage;
    Video: $w.Video;
    VideoBox: $w.VideoBox;
    AddressInput: $w.AddressInput;
    AudioPlayer: $w.AudioPlayer;
    Captcha: $w.Captcha;
    Pagination: $w.Pagination;
    ProgressBar: $w.ProgressBar;
    RangeSlider: $w.RangeSlider;
    RatingsDisplay: $w.RatingsDisplay;
    RatingsInput: $w.RatingsInput;
    RichTextBox: $w.RichTextBox;
    Slider: $w.Slider;
    Switch: $w.Switch;
    TimePicker: $w.TimePicker;
    VideoPlayer: $w.VideoPlayer;
};


// the first part of this file is being generated by => scripts/selector-declaration-builder.js
// Run `npm run generate-dts` to generate it
declare type IntersectionArrayAndBase<T, P> = {
    [K in keyof T]: K extends P ? T[K] : T[K] & T[K][];
};


declare type TypeSelectorMap = IntersectionArrayAndBase<TypeNameToSdkType, 'Document'>;
declare type WixElements = PageElementsMap & TypeSelectorMap
declare type NicknameSelector = keyof PageElementsMap
declare type TypeSelector = keyof TypeSelectorMap

declare type WixElementSelector = NicknameSelector | TypeSelector
declare type IsWixElementSelector<S> = S extends WixElementSelector ? WixElements[S] : never;
/**
 * Selects and returns elements from a page.
 */
declare function $w<T extends WixElementSelector, S extends string>(selector: T | S & IsWixElementSelector<S>):
    S extends keyof WixElements
        ? WixElements[S]
        : any
/**
 * The `$w` namespace contains everything you need in order to work
 with your site's components.
 */
declare namespace $w {
    /**
     * Gets a selector function for a specific context.
     */
    function at(context: $w.Event.EventContext): $w.$w;

    /**
     * Sets the function that runs when all the page elements have finished loading.
     */
    function onReady(initFunction: $w.ReadyHandler): void;


    /**
     * Selects and returns elements from a page.
     */
    type $w = <T extends WixElementSelector, S extends string>(selector: T | S & IsWixElementSelector<S>) =>
        S extends keyof WixElements
            ? WixElements[S]
            : any
}


// /types/common/emptyBuffer.d.ts
declare class Buffer {
}

// /types/common/anyProperties.d.ts
declare interface AnyProperties {
    [prop: string]: any;
}
